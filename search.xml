<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java collection 集合</title>
      <link href="/2020/07/09/collections/"/>
      <url>/2020/07/09/collections/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 <a href="https://www.runoob.com/java/java-arraylist.html" target="_blank" rel="noopener">ArrayList</a>、<a href="https://www.runoob.com/java/java-linkedlist.html" target="_blank" rel="noopener">LinkedList</a>、<a href="https://www.runoob.com/java/java-hashset.html" target="_blank" rel="noopener">HashSet</a>、<code>LinkedHashSet</code>、<a href="https://www.runoob.com/java/java-hashmap.html" target="_blank" rel="noopener">HashMap</a>、<code>LinkedHashMap</code> 等等</p><a id="more"></a><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h1 id="Collection思维导图"><a href="#Collection思维导图" class="headerlink" title="Collection思维导图"></a><center><strong>Collection思维导图</strong></center></h1><br><div class="row">    <embed src="Javacollection.pdf" width="100%" height="550" type="application/pdf"></div> <br><p><a href="collections.png">collections图片预览</a></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSequentialList</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">Deque</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Deque</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>我们上面的代码中出现的&lt;?&gt;是什么东西呢 它叫泛型，常用来和集合对象一同使用，所以我们在开始学习集合之前，必须先了解下什么是泛型。而且泛型概念非常重要，它是程序的增强器，它是目前主流的开发方式。</p><p>泛型是（Generics）是JDK1.5 的一个新特性，其实就是一个『语法糖』，本质上就是编译器为了提供更好的可读性而提供的一种小手段，小技巧，虚拟机层面是不存在所谓『泛型』的概念的。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>通过泛型的语法定义，约束集合元素的类型，进行安全检查，把错误显示在编译期</li><li>代码通用性更强</li><li>泛型可以提升程序代码的可读性，但它只是一个语法糖（编译后这样的东西就被删除，不出现在最终的源代码中），对于JVM运行时的性能是没有任何影响的。</li></ul><h3 id="泛型示例"><a href="#泛型示例" class="headerlink" title="泛型示例"></a>泛型示例</h3><p><img src="/2020/07/09/collections/E.jpg" alt="E"></p><p>我们创建一个ArrayList，上面看到eclipse提示有个黄线，什么意思呢？</p><p>ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized.</E></p><p>ArrayList使用了泛型，在声明时需指定具体的类型<E>。</E></p><p>那我们把这个&lt;&gt;里的方式就称为泛型。上面的泛型有什么作用呢？就是在编译阶段就检查我们传入的参数类型是否正确。</p><p><img src="/2020/07/09/collections/E2.jpg" alt="E2"></p><p>有了泛型，我们可以看到人家要求存放String，而我故意存放的整数100，所以eclipse提示我们错误：</p><p>The method add(int, String) in the type List<String> is not applicable for the arguments (int)。</String></p><p>类型List<String>的add方法要求增加的类型为String类型，不正确不能存入。</String></p><h3 id="泛型声明"><a href="#泛型声明" class="headerlink" title="泛型声明"></a>泛型声明</h3><p>泛型可以在接口、方法、返回值上使用：</p><p>java.util.List泛型接口/类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>泛型方法的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(E e)</span> </span>&#123;&#125;<br>在方法返回值前声明了一个&lt;E&gt;表示后面出现的E是泛型，而不是普通的java变量<br></code></pre></td></tr></table></figure><h3 id="常用名称"><a href="#常用名称" class="headerlink" title="常用名称"></a>常用名称</h3><ul><li>E - Element (在集合中使用，因为集合中存放的是元素)</li><li>T - Type（Java 类）</li><li>K - Key（键）</li><li>V - Value（值）</li><li>N - Number（数值类型）</li><li>? - 表示不确定的java类型</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>测试泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.collections;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//测试泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Generic</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//泛型--就是想要检测数据类型</span><br><span class="hljs-comment">//1,泛型想要模拟数组--想要想数组中添加数据,必须约束类型+不是的话,在编译器就会报错</span><br><span class="hljs-keyword">int</span>[] i = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>System.out.println(Arrays.toString(i));<br><br><span class="hljs-comment">//2,在没有使用泛型是,集合中可以添加各种数据,太自由了</span><br>List list = <span class="hljs-keyword">new</span> ArrayList();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">1.1</span>);<br>list.add(<span class="hljs-keyword">true</span>);<br>list.add(<span class="hljs-string">"Hello Java"</span>);<br><br><span class="hljs-comment">//如果想要约束集合中元素的类型怎么办, -- 泛型 -- 可以检测元素类型+可以提前报错</span><br>List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list2.add(<span class="hljs-string">"abc"</span>);<br>list2.add(<span class="hljs-string">"1"</span>);<br>list2.add(<span class="hljs-string">"1.1"</span>);<br><span class="hljs-comment">//list2.add(true); //没有通过泛型的检查,编译期报错</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><ol><li><p><strong>目前的程序中,我们可以吧多个数据放入数组中存放,数组是作为多个数据存放的容器</strong></p></li><li><p><strong>数组的缺点:要求数据类型是单一类型 + 数组一旦创建长度不能变 + 便利方式单一 + 不适合插入,删除</strong></p></li><li><p><strong>集合里有很多种工具类,都有很严格的集成结构,顶级父类是一个接口Collection</strong></p></li><li><p><strong>英文名称Collection，是用来存放对象的数据结构。其中长度可变，而且集合中可以存放不同类型的对象。并提供了一组操作成批对象的方法。</strong></p><p><strong>数组的缺点：长度是固定不可变的，访问方式单一，插入、删除等操作繁琐</strong></p></li></ol><p><img src="/2020/07/09/collections/Collection.jpg" alt="Collection"></p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Collection 层次结构 中的根接口。Collection 表示一组对象，这些对象也称为 collection 的元素。一些 collection 允许有重复的元素，而另一些则不允许。一些 collection 是有序的，而另一些则是无序的</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span>：添加元素。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(Collection  c)</span>：把小集合添加到大集合中 。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> ： 如果此 collection 包含指定的元素，则返回 <span class="hljs-keyword">true</span>。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> ：如果此 collection 没有元素，则返回 <span class="hljs-keyword">true</span>。</span><br><span class="hljs-function">Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span>：返回在此 collection 的元素上进行迭代的迭代器。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> ：从此 collection 中移除指定元素的单个实例。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> ：返回此 collection 中的元素数。</span><br><span class="hljs-function">Object[] <span class="hljs-title">toArray</span><span class="hljs-params">()</span>：返回对象数组</span><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试Collection接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.collections;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2_Collection</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//1,创建对象 -- 使用泛型  约束集合中元素的类型</span><br>Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-comment">//2,调用常用方法</span><br>c.add(<span class="hljs-string">"杨幂"</span>);<br>c.add(<span class="hljs-string">"黄晓明"</span>);<br>c.add(<span class="hljs-string">"baby"</span>);<br>c.add(<span class="hljs-string">"魏大勋"</span>);<span class="hljs-comment">//向集合中添加元素</span><br><span class="hljs-comment">//底层重写了toString方法,因此直接打印对象[杨幂, 黄晓明, baby, 魏大勋]</span><br>System.out.println(c);<br><span class="hljs-comment">//c.clear();//清除集合内所有元素</span><br>System.out.println(c.contains(<span class="hljs-string">"黄晓明"</span>));<span class="hljs-comment">//判断集合中是否包含指定元素true</span><br>System.out.println(c.equals(<span class="hljs-string">"杨幂"</span>));<span class="hljs-comment">//判断集合中是否和指定元素相等false</span><br>System.out.println(c.hashCode());<span class="hljs-comment">//获取集合在内存中的哈希码值-783781501</span><br>System.out.println(c.isEmpty());<span class="hljs-comment">//判断集合是否为空false</span><br>System.out.println(c.size());<span class="hljs-comment">//获取集合中元素的个数4</span><br>System.out.println(c.remove(<span class="hljs-string">"杨幂"</span>));<span class="hljs-comment">//移除集合中的指定元素true</span><br>System.out.println(<span class="hljs-string">"c======"</span> +c);<span class="hljs-comment">//c======[黄晓明, baby, 魏大勋]</span><br>Object[] o = c.toArray();<span class="hljs-comment">//把集合转换成数组</span><br>System.out.println(Arrays.toString(o));<span class="hljs-comment">//[黄晓明, baby, 魏大勋]</span><br><br><span class="hljs-comment">//集合间的操作</span><br>System.out.println(<span class="hljs-string">"=========集合间的操作========"</span>);<br>Collection&lt;String&gt; c2 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>c2.add(<span class="hljs-string">"杨幂"</span>);<br>c2.add(<span class="hljs-string">"周杰伦"</span>);<br>c2.add(<span class="hljs-string">"Mojito"</span>);<br>System.out.println(c.addAll(c2));<span class="hljs-comment">//向c集合中加入c2的数据true</span><br>System.out.println(c.containsAll(c2));<span class="hljs-comment">//判断c中是否包含c2的元素true</span><br>System.out.println(c.removeAll(c2));<span class="hljs-comment">//获取c和c2中的差集true 从c中移除与c2相同的元素</span><br>System.out.println(c);<span class="hljs-comment">//[黄晓明, baby, 魏大勋]</span><br>System.out.println(c.retainAll(c2));<span class="hljs-comment">//获取c和c2中的交集true 从c中移除与c2不同的元素</span><br>System.out.println(c);<span class="hljs-comment">//[]</span><br><span class="hljs-comment">//集合的  遍历/循环/迭代--Iterator是一个接口,专门用来迭代集合里的元素</span><br>System.out.println(<span class="hljs-string">"=========="</span>);<br><span class="hljs-comment">//迭代方法</span><br>c.add(<span class="hljs-string">"杨幂"</span>);<br>c.add(<span class="hljs-string">"黄晓明"</span>);<br>c.add(<span class="hljs-string">"baby"</span>);<br>c.add(<span class="hljs-string">"魏大勋"</span>);<br>Iterator&lt;String&gt; it = c.iterator();<span class="hljs-comment">//获取迭代器的对象</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<span class="hljs-comment">//hasnext()方法 判断集合下一位里有没有元素,没有返回true</span><br>String value = it.next();<br>System.out.println(value);<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有序的 collection（也称为<em>序列</em>）。此接口的用户可以对列表中每个元素的插入位置进行精确地控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>数组有序</li><li>允许存放重复的元素</li><li>元素都有索引</li></ol><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListIterator&lt;E&gt; <span class="hljs-title">listIterator</span><span class="hljs-params">()</span></span><br><span class="hljs-function">          返回此列表元素的列表迭代器（按适当顺序）。</span><br><span class="hljs-function">ListIterator&lt;E&gt; <span class="hljs-title">listIterator</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function">          返回列表中元素的列表迭代器（按适当顺序），从列表的指定位置开始。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span></span><br><span class="hljs-function">          在列表的指定位置插入指定元素（可选操作）。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Collection&lt;? extends E&gt; c)</span></span><br><span class="hljs-function">          将指定 collection 中的所有元素都插入到列表中的指定位置（可选操作）。</span><br><span class="hljs-function">List&lt;E&gt; <span class="hljs-title">subList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fromIndex, <span class="hljs-keyword">int</span> toIndex)</span></span><br><span class="hljs-function">     返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。</span><br><span class="hljs-function">E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function">          返回列表中指定位置的元素。  </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object o)</span></span><br><span class="hljs-function">          返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。</span><br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> mind </category>
          
          <category> 集合 </category>
          
          <category> collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2020/07/06/JavaScript/"/>
      <url>/2020/07/06/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h2><h3 id="什么是JavaScript-了解"><a href="#什么是JavaScript-了解" class="headerlink" title="什么是JavaScript(了解)"></a>什么是JavaScript(了解)</h3><p>全称叫做JavaScript，简称叫做JS</p><p>由NetScape(网景)公司提供，是一门专门嵌入在浏览器中执行的脚本语言</p><p>LiveScript  JavaScript</p><p>JS运行在浏览器中，负责实现网页中的动画效果</p><p>或者是实现表单校验等功能</p><a id="more"></a><h3 id="JS特点和优势-了解"><a href="#JS特点和优势-了解" class="headerlink" title="JS特点和优势(了解)"></a>JS特点和优势(了解)</h3><p><strong>1、特点：</strong></p><p>(1)JS是一门直译式的语言(边解释边执行，没有编译的过程)</p><p>java–&gt; 编写时 xx.java —&gt;编译成 xx.class –&gt; 运行</p><p>js —&gt; 编写时 html, 编写时 js文件, 直接运行, 没有编译过程</p><p>(2)JS是一门基于对象的语言(JS中没有类的概念,也没有编译的过程)</p><p>JS中是有对象的(内置对象、自定义对象)</p><p>(3)JS是一门弱类型的语言(Java:强类型)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">在java中: 变量一旦声明, 就属于固定的数据类型, 不能被改变<br><span class="hljs-built_in">String</span> s = <span class="hljs-string">"abc"</span>;<br>int n = <span class="hljs-number">100</span>;<br>在JS中: 变量是不区分类型的, 可以指向任意的数据类型<br><span class="hljs-keyword">var</span> s = <span class="hljs-number">100</span>;<br>s = <span class="hljs-string">"abc"</span>;<br>s = <span class="hljs-literal">true</span>;<br>s = [];<br>s = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>2、优势：</strong></p><p>(1)JS具有良好的交互性</p><p>(2)JS具有一定的安全性(只能在浏览器内部运行,不能访问浏览器以外的资源)</p><p>(3)JS具有跨平台性(JS 浏览器)</p><p>( JS语言是跨平台的，是因为有浏览器，但浏览器不跨平台</p><p>Java语言是跨平台的，是因为有虚拟机，但虚拟主机不跨平台 )</p><h3 id="在HTML书写JS的方式"><a href="#在HTML书写JS的方式" class="headerlink" title="在HTML书写JS的方式"></a>在HTML书写JS的方式</h3><p><strong>1、在script标签内部可以书写JS代码：</strong></p><ol><li>在head或者body标签内部可以添加一个script标签，在script标签内部可以直接书写JS代码！</li><li>在引入js文件的script标签内部不要书写JS代码</li><li>也可以直接在元素上书写JS代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引入js<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 方法1:在script标签内部直接书写js代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">//声明一个变量str1,讲一个字符串赋值给 </span></span><br><span class="actionscript"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">"引入JS的第一种方法..."</span>;</span><br><span class="actionscript"><span class="hljs-comment">//document是表示当前整个网页的对象,将str1的内容输出到网页上显示</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(str1)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./demo.js"</span>&gt;</span><br><span class="handlebars"><span class="xml"><span class="hljs-comment">&lt;!-- 方法2:将外部的js文件引入进来 --&gt;</span></span></span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 方法3:将js代码直接写到元素上,例如:</span><br><span class="hljs-comment">通过onclick属性为按钮绑定点击事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"别点我~  !"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('don\'t touch')"</span>/&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明一个变量str2,将一个字符串赋值给str2</span><br><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">"引入js的第二种方法~~"</span>;<br><span class="hljs-comment">//document是表示当前整个网页的对象,将str2的内容输出到网页上显示</span><br><span class="hljs-built_in">document</span>.write(str2);<br></code></pre></td></tr></table></figure><h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><h3 id="注释格式"><a href="#注释格式" class="headerlink" title="注释格式"></a>注释格式</h3><p>JS的注释符号和Java的注释符号相同，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 单行注释内容</span><br><span class="hljs-comment">/* 多行注释内容 */</span><br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>1、基本数据类型</strong></p><p><strong>(1)数值类型(number)</strong></p><p>在JS中，所有的数值在底层都是浮点型，但是在处理和显示的过程中会自动的和整型进行转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">例如：<span class="hljs-number">2.4</span>+<span class="hljs-number">3.6</span>=<span class="hljs-number">6</span><br>特殊值：<span class="hljs-literal">Infinity</span>(无穷大) / -<span class="hljs-literal">Infinity</span>(负无穷大) / <span class="hljs-literal">NaN</span>(非数字)<br></code></pre></td></tr></table></figure><p><strong>(2)字符串类型(string)</strong></p><p>在JS中，字符串类型属于基本数据类型，字符串常量可以使用单引号或者使用双引号引起来。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">"Hello JS"</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">'Hello JS'</span>;<br></code></pre></td></tr></table></figure><p>另外，JS中字符串类型有对应的包装对象（String），在需要时会自动的和包装对象进行转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">"Hello JS"</span>; <span class="hljs-comment">//基本数据类型, string</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">typeof</span> s1 ); <span class="hljs-comment">//string typeof使用用来返回一个对象的数据类型 返回一个string类型</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"Hello JS"</span>); <span class="hljs-comment">//复杂数据类型, object 返回一个object类型</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-keyword">typeof</span> s2 ); <span class="hljs-comment">//object</span><br><span class="hljs-comment">//不管是基本数据类型s1, 还是对象类型s2, 都可以当作对象来用</span><br><span class="hljs-built_in">console</span>.log( s1.valueOf() ); <span class="hljs-comment">//s1是基本数据类型, 会转成对象, 调用valueOf函数</span><br><span class="hljs-built_in">console</span>.log( s2.valueOf() ); <span class="hljs-comment">//所以通过s1,s2调用方法都一样</span><br></code></pre></td></tr></table></figure><p><strong>(3)布尔类型(boolean)</strong></p><p>布尔类型的值有两个，分别为true和false。</p><p>(4)undefined类型</p><p>undefined类型的值只有一个，就是undefined，表示变量未定义(但不是指变量没有声明)。</p><p>是指声明了变量，但没有为变量赋值，该变量的值就是undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 1.undefined类型 */</span><br><span class="hljs-keyword">var</span> x;<br>alert( x ); <span class="hljs-comment">//undefined</span><br>alert( y ); <span class="hljs-comment">//抛异常</span><br></code></pre></td></tr></table></figure><p>(5)null类型</p><p>null类型的值也只有一个，就是null，表示空值。</p><p>可以作为函数的返回值，表示函数返回的是一个空的对象。</p><p>注意：null和undefined类型的变量是不能调用函数或属性的，会抛异常！</p><p><strong>2、复杂数据类型</strong></p><p>主要指对象(JS的内置对象、自定义的对象、函数、数组)</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>JS中是通过<code>var</code>关键字声明变量，声明的变量是不区分类型，可以指向任意的数据。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">100</span>;<br>x = <span class="hljs-string">"abc"</span>;<br>x = <span class="hljs-literal">true</span>;<br>x = [];<br>x = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>x = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>另外，JS中多次声明同名的变量不会出现语法错误，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 2.变量的定义 */</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">"Hello"</span>; <span class="hljs-comment">// var s; s="Hello";</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">123</span>; <span class="hljs-comment">// var s; s=123; 第二次声明变量x没有生效,第二次var 同名的变量,不会出现语法错误,但是声明会不生效</span><br>alert( s ); <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><p>JS是严格区分大小写的!</p><h3 id="JS运算符"><a href="#JS运算符" class="headerlink" title="JS运算符"></a>JS运算符</h3><p>JS和Java中的运算符大致相同，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">算术运算符: +，-，*，&#x2F;，%，++，--<br>赋值运算符: &#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;<br>比较运算符: &#x3D;&#x3D;，!&#x3D;，&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;<br>位运算符: &amp; ， |<br>逻辑运算符: &amp;&amp; ，||   ( false &amp;&amp; 表达式, true || 表达式 )<br>前置逻辑运算符: ! (not)<br>三元运算符: 表达式 ? 表达式 : 表达式<br>。。。<br></code></pre></td></tr></table></figure><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>JS中的语句和Java中的语句也大致相同</p><p><strong>1、if分支结构</strong></p><p>if分支结构用于基于不同的条件来执行不同的动作。语法结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (条件 <span class="hljs-number">1</span>)&#123;<br>当条件 <span class="hljs-number">1</span> 为 <span class="hljs-literal">true</span> 时执行的代码<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件 <span class="hljs-number">2</span>)&#123;<br>当条件 <span class="hljs-number">2</span> 为 <span class="hljs-literal">true</span> 时执行的代码<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>当条件 <span class="hljs-number">1</span> 和 条件 <span class="hljs-number">2</span> 都不为 <span class="hljs-literal">true</span> 时执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、switch语句</strong></p><p>使用 switch 语句来选择要执行的多个代码块之一。语法结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span>(n)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>执行代码块 <span class="hljs-number">1</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    执行代码块 <span class="hljs-number">2</span><br><span class="hljs-keyword">break</span>;<br>    ...<br><span class="hljs-keyword">default</span>:<br>与 <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> 和 <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> 不同时执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p>执行原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break来阻止代码自动地向下一个 case 运行。</p><p><strong>3、for循环语句</strong> – 循环代码块一定的次数</p><p>for 循环的语法结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (语句 <span class="hljs-number">1</span>; 语句 <span class="hljs-number">2</span>; 语句 <span class="hljs-number">3</span>)&#123;<br>被执行的代码块<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、while循环</strong> – 在指定条件为真时循环执行代码块</p><p>JS中while循环也分为while和do/while循环，下面为while循环语法结构:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span> (条件)&#123;<br>需要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p>while 循环会在指定条件为真时循环执行代码块。</p><p><code>案例1：if分支案例: 接收用户输入的成绩，判断成绩所属的等级</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">80~100(包括80，也包括100) 优秀<br>60~80(包括60，但不包括80) 中等<br>0~60(包括0，但不包括60) 不及格<br>其他值 输入有误<br></code></pre></td></tr></table></figure><p>propmt( 参数1, 参数2 )函数：在页面上弹出一个消息输入框，接收的参数1是在弹框中显示的提示内容，用户输入的内容，会作为函数的返回值直接返回。</p><p>参数2, 是输入框中的默认值, 可以修改</p><p><code>案例2：switch语句案例—实现一个简易的计算器：</code></p><p>可以接收用户输入的两个数值和一个操作符(+、-、*、/)，根据操作符号的不同，对两个数值执行不同的运算。</p><p><code>案例3：for循环语句案例</code></p><p>遍历1~100之间的所有整数，求1~100之间所有整数的和，并输出到控制台;</p><p><code>案例4：while循环语句案例</code></p><p>遍历下面数组中的元素，将元素输出到控制台。</p><p>代码实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;<br>&lt;title&gt;JS的语句&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">&lt;script&gt;</span><br><span class="hljs-regexp">/</span>* 案例<span class="hljs-number">1</span>：<span class="hljs-keyword">if</span>分支案例: 接收用户输入的成绩，判断成绩所属的等级<br><span class="hljs-number">80</span>~<span class="hljs-number">100</span>(包括<span class="hljs-number">80</span>，也包括<span class="hljs-number">100</span>) 优秀<br><span class="hljs-number">60</span>~<span class="hljs-number">80</span>(包括<span class="hljs-number">60</span>，但不包括<span class="hljs-number">80</span>) 中等<br><span class="hljs-number">0</span>~<span class="hljs-number">60</span>(包括<span class="hljs-number">0</span>，但不包括<span class="hljs-number">60</span>) 不及格<br>其他值 输入有误*<span class="hljs-regexp">/</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/prompt接收用户输入的字符串,赋值给score 在需要时数据类型自动转换,第一个参数是提示,第二个是输入框的默认值</span><br><span class="hljs-regexp">var score = prompt("请输入您的成绩:", "分数");</span><br><span class="hljs-regexp">console.log(typeof score);/</span><span class="hljs-regexp">/打印到控制台,typeof返回变量数据类型</span><br><span class="hljs-regexp">document.write(score + "&lt;br/</span>&gt;<span class="hljs-string">");//输出到网页</span><br><span class="hljs-string">if (score &gt;= 80 &amp;&amp; score &lt;= 100) &#123;</span><br><span class="hljs-string">document.write("</span>您的成绩是输入优秀<span class="hljs-string">");//输出到网页</span><br><span class="hljs-string">&#125; else if (score &gt;= 60 &amp;&amp; score &lt; 80) &#123;</span><br><span class="hljs-string">document.write("</span>您的成绩输入及格<span class="hljs-string">");</span><br><span class="hljs-string">&#125; else if (score &gt;= 0 &amp;&amp; score &lt; 60) &#123;</span><br><span class="hljs-string">document.write("</span>您的成绩属于不及格<span class="hljs-string">");</span><br><span class="hljs-string">&#125; else &#123;</span><br><span class="hljs-string">alert("</span>你的成绩不合法请重新输入<span class="hljs-string">");//提示弹窗</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*可以接收用户输入的两个数值和一个操作符(+、-、*、/)，</span><br><span class="hljs-string">根据操作符号的不同，对两个数值执行不同的运算。*/</span><br><span class="hljs-string">var str = prompt("</span>请输入数值<span class="hljs-number">1</span>,运算符,数值<span class="hljs-number">2</span>,中间用空格分隔:<span class="hljs-string">", "</span><span class="hljs-number">1</span> + <span class="hljs-number">1</span><span class="hljs-string">");</span><br><span class="hljs-string">document.write("</span>&lt;hr/&gt;<span class="hljs-string">" + str);//&lt;hr/&gt;换行横线 </span><br><span class="hljs-string">var strArr = str.split("</span> <span class="hljs-string">");//对当前字符串根据参数进行切割,所有的子字符串会作为数组返回</span><br><span class="hljs-string">var num1 = parseFloat(strArr[0]);</span><br><span class="hljs-string">var opt = strArr[1];</span><br><span class="hljs-string">var num2 = parseFloat(strArr[2]);//把字符串转换成小数类型parseInt()转换成整数类型</span><br><span class="hljs-string">//分别返回三个数组中三个值,用变量接收</span><br><span class="hljs-string">switch (opt) &#123;//按条件进行运算拼接</span><br><span class="hljs-string">case "</span>+<span class="hljs-string">":</span><br><span class="hljs-string">document.write("</span>两个数值的和为:<span class="hljs-string">" + (num1 + num2));</span><br><span class="hljs-string">break;</span><br><span class="hljs-string">case "</span>-<span class="hljs-string">":</span><br><span class="hljs-string">document.write("</span>两个数值的差为:<span class="hljs-string">" + (num1 - num2));</span><br><span class="hljs-string">break;</span><br><span class="hljs-string">case "</span>*<span class="hljs-string">":</span><br><span class="hljs-string">document.write("</span>两个数值得乘积为:<span class="hljs-string">" + (num1 * num2));</span><br><span class="hljs-string">break;</span><br><span class="hljs-string">case "</span>/<span class="hljs-string">":</span><br><span class="hljs-string">document.write("</span>两个数值得商为:<span class="hljs-string">" + (num1 / num2));</span><br><span class="hljs-string">break;</span><br><span class="hljs-string">default:</span><br><span class="hljs-string">document.write("</span>您的输入有误!<span class="hljs-string">")</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">//遍历1\~100之间的所有整数，求1\~100之间所有整数的和，并输出到控制台;</span><br><span class="hljs-string">document.write("</span>&lt;hr/&gt;<span class="hljs-string">");</span><br><span class="hljs-string">var sum = 0;</span><br><span class="hljs-string">for (var i = 1; i &lt;= 100; i++) &#123;</span><br><span class="hljs-string">sum += i;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">document.write("</span><span class="hljs-number">1</span><span class="hljs-number">-100</span>之间所有的整数和为:<span class="hljs-string">" + sum);</span><br><span class="hljs-string">document.write("</span>&lt;hr/&gt;<span class="hljs-string">");</span><br><span class="hljs-string">//遍历下面数组中的元素，将元素输出到控制台。</span><br><span class="hljs-string">var arr = [ 123, "</span>abc<span class="hljs-string">", false, new Object() ];</span><br><span class="hljs-string">var index = 0;//作为数组的下表</span><br><span class="hljs-string">var len = arr.length;//获取数组长度赋值给len,js数组长度是可变的</span><br><span class="hljs-string">while (index &lt; len) &#123;</span><br><span class="hljs-string">document.write(arr[index]+"</span> <span class="hljs-string">");</span><br><span class="hljs-string">index++;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">document.write("</span>&lt;hr/&gt;<span class="hljs-string">");</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h3><p>Array 对象用于在单个的变量中存储多个值。</p><p><strong>JS数组的声明方式一:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明一个空数组,长度为零</span><br><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-comment">//声明一个数组，并为数组设置初始值</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">"Hello"</span>, <span class="hljs-number">111</span>, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>() ];<br></code></pre></td></tr></table></figure><p><strong>JS数组的声明方式二:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明一个空数组，长度为零</span><br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-comment">//声明一个数组，并为数组设置初始值</span><br><span class="hljs-keyword">var</span> arr4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">"Hello"</span>, <span class="hljs-number">111</span>, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>());<br></code></pre></td></tr></table></figure><p><strong>数组中的细节问题:</strong></p><p>(1)JS中的数组可以存储任意类型的数据</p><p>(2)JS中的数组长度是可以被任意改变的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"此处数组的长度为: "</span>+arr1.length ); <span class="hljs-comment">// 0</span><br>arr1.length = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"此处数组的长度为: "</span>+arr1.length ); <span class="hljs-comment">// 5</span><br>arr1[<span class="hljs-number">9</span>] = <span class="hljs-string">"a"</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"此处数组的长度为: "</span>+arr1.length ); <span class="hljs-comment">// 10</span><br>arr1[<span class="hljs-number">99</span>] = <span class="hljs-string">"b"</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"此处数组的长度为: "</span>+arr1.length ); <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//js的数组声明</span><br><span class="hljs-comment">//声明数组的不通方法</span><br><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-keyword">var</span> arr2 = [ <span class="hljs-number">88</span>, <span class="hljs-string">"hello array"</span>, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() ];<span class="hljs-comment">//Date()日期函数</span><br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">var</span> arr4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">88</span>, <span class="hljs-string">"hello array"</span>, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br><span class="hljs-built_in">document</span>.write(arr1 + <span class="hljs-string">"&lt;br/&gt;"</span>);<br><span class="hljs-built_in">document</span>.write(arr2 + <span class="hljs-string">"&lt;br/&gt;"</span>);<br><span class="hljs-built_in">document</span>.write(arr3 + <span class="hljs-string">"&lt;br/&gt;"</span>);<br><span class="hljs-built_in">document</span>.write(arr4 + <span class="hljs-string">"&lt;br/&gt;"</span>);<br><span class="hljs-built_in">console</span>.log(arr1);<br><span class="hljs-built_in">console</span>.log(arr2);<br><span class="hljs-built_in">console</span>.log(arr3);<br><span class="hljs-built_in">console</span>.log(arr4);<br><span class="hljs-comment">//js数组中可以存放任何类型的元素</span><br><span class="hljs-comment">//js数组的长度可以被任意改变</span><br><span class="hljs-built_in">console</span>.log(arr1.length);<br>arr1.length = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(arr1.length);<br>arr1[<span class="hljs-number">99</span>] = <span class="hljs-string">"abc"</span>;<br><span class="hljs-built_in">console</span>.log(arr1.length);<br><span class="hljs-built_in">document</span>.write(arr1);<br></code></pre></td></tr></table></figure><h3 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h3><p>函数就是一个具有功能的代码块, 可以反复调用</p><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function。</p><p><strong>JS中声明函数的方式为:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名称(<span class="hljs-params">[参数列表]</span>)</span>&#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名/函数名 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">[参数列表]</span>)</span>&#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>调用函数: 函数名称([参数列表]);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//js的函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>alert(name+<span class="hljs-string">","</span>+age);<br>&#125;<br>fn1(<span class="hljs-string">"皮皮霞"</span>,<span class="hljs-number">35</span>);<br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name,addr</span>)</span>&#123;<br>alert(name+<span class="hljs-string">","</span>+addr);<br>&#125;<br>fn2(<span class="hljs-string">"政老板"</span>,<span class="hljs-string">"让皮皮霞带走了~"</span>)<br></code></pre></td></tr></table></figure><h3 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h3><p>(自己完成)声明一个函数fn，在函数中实现：遍历指定的两个数值(例如1和100)之间的整数，将是3的倍数的数值存入到一个数组中，并将数组返回。</p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p>DOM: Document Object Model，文档对象模型，其实就是JS专门为访问html元素提供的一套API。</p><h3 id="案例：电灯开关"><a href="#案例：电灯开关" class="headerlink" title="案例：电灯开关"></a>案例：电灯开关</h3><p>点击电灯可以实现开/关灯，代码实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>电灯开关案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">padding</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-id">#div1</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">30%</span>;<span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;<span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">20px</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入jquery的js库</span><br><span class="hljs-comment">&lt;script src="js/jquery-1.8.3.min.js"&gt;&lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">/** 练习：点击按钮，开灯或关灯 */</span></span><br><span class="actionscript"><span class="hljs-keyword">var</span> flag = <span class="hljs-string">"off"</span>;<span class="hljs-comment">//flag用于标记灯的状态,off表示灯目前是关闭状态 on表示灯是打开状态</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeImg</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取表示img元素的js对象</span></span><br><span class="actionscript"><span class="hljs-comment">//document表示当前往也的对象，整个网页可以堪称一个对象，getElementById()</span></span><br><span class="actionscript"><span class="hljs-comment">//获取当前网页下id的元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oImg=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"img1"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//获取id为img1元素的对象==oImg等价于img id="img1"的标签</span></span><br><span class="actionscript"><span class="hljs-comment">//判断状态,根据状态决定开灯,关灯</span></span><br><span class="actionscript"><span class="hljs-keyword">if</span>(flag==<span class="hljs-string">"off"</span>)&#123;<span class="hljs-comment">//如果是off则表示灯是关闭状态,需要更改状态</span></span><br><span class="actionscript">oImg.src=<span class="hljs-string">"imgs/on.gif"</span>;<span class="hljs-comment">//开灯</span></span><br><span class="actionscript">flag=<span class="hljs-string">"on"</span>;<span class="hljs-comment">//由于上面已经将灯打开,所以更新flag的状态为on</span></span><br><span class="actionscript">&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则表示灯为打开状态,需要改为关闭</span></span><br><span class="actionscript">oImg.src=<span class="hljs-string">"imgs/off.gif"</span>;<span class="hljs-comment">//关灯</span></span><br><span class="actionscript">flag=<span class="hljs-string">"off"</span>;<span class="hljs-comment">//由于上面已经将灯关闭,所以更新flag的状态为off</span></span><br>&#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- onclick用于为按钮绑定点击事件，当点击按钮时，会触发点击事件，执行函数changeImg() --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"开/关灯"</span></span><br><span class="hljs-tag"><span class="hljs-attr">onclick</span>=<span class="hljs-string">"changeImg()"</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"img1"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"imgs/off.gif"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例：增删改元素"><a href="#案例：增删改元素" class="headerlink" title="案例：增删改元素"></a>案例：增删改元素</h3><p>点击网页中的按钮对html元素进行操作</p><p>练习1、添加元素:添加一个div元素到body中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addNode</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1.创建一个新的div元素(返回的是一个JS对象, 表示新创建的div元素)</span><br>    <span class="hljs-keyword">var</span> newDivObj = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>); <span class="hljs-comment">// \&lt;div\&gt;\&lt;/div\&gt;</span><br>    newDivObj.innerHTML = <span class="hljs-string">"我是新来的...."</span>;<br>    <span class="hljs-comment">//2.获取body元素(body是父元素)</span><br>    <span class="hljs-keyword">var</span> bodyObj = <span class="hljs-built_in">document</span>.body;<br>    <span class="hljs-comment">//3.通过父元素(body)添加子元素(newDivObj)</span><br>    bodyObj.appendChild( newDivObj );<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2、删除元素: 删除id为div_2的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteNode</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1.获取要删除的元素(id为div_2)</span><br>    <span class="hljs-keyword">var</span> div2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div_2"</span>);<br>    <span class="hljs-comment">//2.获取id为div_2的元素的父元素</span><br>    <span class="hljs-keyword">var</span> parent = div2.parentNode;<br>    <span class="hljs-comment">//3.通过父元素删除子元素</span><br>    parent.removeChild( div2 );<br>&#125;<br></code></pre></td></tr></table></figure><p>练习3、更新元素内容：将div_3的内容更新为当前时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateNode</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1.获取id为div_3的元素</span><br>    <span class="hljs-keyword">var</span> div3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div_3"</span>);<br>    <span class="hljs-comment">//2.获取表示当前时间的字符串</span><br>    <span class="hljs-keyword">var</span> dateStr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString();<br>    <span class="hljs-comment">//3.将div_3元素的内容更新为当前时间</span><br>    div_3.innerHTML = dateStr;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>元素的增删改查<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 加入样式表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span> &#123; <span class="hljs-attribute">border</span>:<span class="hljs-number">#0099FF</span> <span class="hljs-number">2px</span> solid;<span class="hljs-attribute">height</span>:<span class="hljs-number">60px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">350px</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span> <span class="hljs-number">10px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">7px</span>;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">60px</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">26px</span>;<span class="hljs-attribute">text-align</span>:center;&#125;</span><br><span class="css"><span class="hljs-selector-id">#div_1</span>&#123; <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#d400ff</span>; &#125;</span><br><span class="css"><span class="hljs-selector-id">#div_2</span>&#123; <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FF3399</span>; &#125;</span><br><span class="css"><span class="hljs-selector-id">#div_3</span>&#123; <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#00FF00</span>; &#125;</span><br><span class="css"><span class="hljs-selector-id">#div_4</span>&#123; <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FFFF66</span>; &#125;</span><br><span class="css"><span class="hljs-selector-id">#info</span>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">250px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">90px</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">22px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;<span class="hljs-attribute">resize</span>:none;&#125;</span><br><span class="css"><span class="hljs-selector-tag">input</span>&#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">18px</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入jquery的js库</span><br><span class="hljs-comment">&lt;script src="js/jquery-1.8.3.min.js"&gt;&lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">/** 练习1、添加元素:添加一个div元素到body中 */</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addNode</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.创建一个div并给div添加内容,参数是元素名称,返回的是一个对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>)</span><br><span class="actionscript">oDiv.innerHTML = <span class="hljs-string">"我是一个新的div~"</span><span class="hljs-comment">//获取添加div的内容</span></span><br><span class="actionscript"><span class="hljs-comment">//2.获取当前网页中的body元素(document上提供了直接获取body元素的属性)</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oBody = <span class="hljs-built_in">document</span>.body;</span><br><span class="actionscript"><span class="hljs-comment">//3.通过父元素(body)调用方法,添加子元素(div)</span></span><br>oBody.appendChild(oDiv);<br><br>&#125;<br><br><span class="actionscript"><span class="hljs-comment">/** 练习2、删除元素: 删除id为div_2的元素 */</span></span><br><span class="actionscript"><span class="hljs-comment">//parentNode</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取要删除的元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oDiv2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div_2"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//2.获取要删除元素的父元素</span></span><br><span class="actionscript"><span class="hljs-comment">//var oBody = document.body;</span></span><br><span class="actionscript"><span class="hljs-keyword">var</span> oparent = oDiv2.parentNode;<span class="hljs-comment">//获取当前元素的父元素</span></span><br><span class="actionscript"><span class="hljs-comment">//3.通过父元素调用方法,删除子元素</span></span><br>oparent.removeChild(oDiv2);<br>&#125;<br><br><span class="actionscript"><span class="hljs-comment">/** 练习3、更新元素内容：将div_3的内容更新为当前时间 */</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateNode</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取要更新的元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oDiv3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div_3"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//2.获取当前元素时间的字符串</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> dateStr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString();</span><br><span class="actionscript"><span class="hljs-comment">//3.通过父元素调用方法更改为当前时间</span></span><br><span class="actionscript">oDiv3.innerHTML = dateStr;<span class="hljs-comment">//获取添加div的内容</span></span><br>&#125;<br><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteall</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//获取所有的div元素,返回的是所有div元素组成的数组</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> divarr = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"div"</span>);</span><br>alert(divarr.length);<br><span class="actionscript"><span class="hljs-comment">//遍历div元素组成的数组,获取并记录数组长度js中数组的长度是可变的,所以需要记录一个定值</span></span><br><span class="actionscript"><span class="hljs-keyword">var</span> len = divarr.length;</span><br><span class="actionscript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ;i&lt;len ; i++)&#123;</span><br><span class="actionscript"><span class="hljs-comment">//获取当前元素的父元素,并通过父元素删除当前元素</span></span><br>divarr[0].parentNode.removeChild(divarr[0]);<br>&#125;<br><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"addNode()"</span></span><br><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"创建一个div添加到body中"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"deleteNode()"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value</span>=<span class="hljs-string">"删除id为div_2的元素"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"updateNode()"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value</span>=<span class="hljs-string">"将div_3的内容更新为当前时间"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"deleteall()"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value</span>=<span class="hljs-string">"删除所有div"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div_1"</span>&gt;</span><br>div_1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div_2"</span>&gt;</span><br>    div_2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div_3"</span>&gt;</span><br>    div_3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div_4"</span>&gt;</span><br>    div_4<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例：网页换肤"><a href="#案例：网页换肤" class="headerlink" title="案例：网页换肤"></a>案例：网页换肤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 练习1：执行下面的函数，切换字体大小 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resize</span>(<span class="hljs-params"> selector </span>)</span>&#123;<br><span class="hljs-comment">//获取id为newstext元素</span><br><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"newstext"</span>);<br><span class="hljs-comment">//将id为newstext元素的class属性值设置为 selector</span><br>div.className = selector;<br>&#125;<br><br><span class="hljs-comment">/** 练习2：执行下面的函数，为页面切换不同的皮肤</span><br><span class="hljs-comment">点击换肤链接时,执行changeStyle函数，将link标签的href属性值指向</span><br><span class="hljs-comment">不同的css文件的路径，就会使用不同的css文件中的样式 */</span><br><span class="hljs-comment">//定义数组，存放不同的皮肤（css文件的路径）</span><br><span class="hljs-keyword">var</span> styleArr = [<span class="hljs-string">"css/red.css"</span>, <span class="hljs-string">"css/green.css"</span>, <span class="hljs-string">"css/blue.css"</span>];<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeStyle</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取head中的link标签(id=link)</span><br><span class="hljs-keyword">var</span> link = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"link"</span>);<br><span class="hljs-comment">//将link标签的href属性值指向css文件的路径</span><br>link.href = styleArr[index];<br>index++;<br><span class="hljs-keyword">if</span>( index == styleArr.length )&#123; <span class="hljs-comment">//如果下标等于数组长度</span><br>index = <span class="hljs-number">0</span>; <span class="hljs-comment">//则将下标重置为0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页换肤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br>body &#123;<br>font-size: 18px;<br>font-family: "微软雅黑";<br>&#125;<br><br>hr &#123;<br>border: 1px solid yellow;<br>&#125;<br><br>a &#123;<br>font-size: 17px;<br>font-weight: 500;<br>&#125;<br><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css"><span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#0099FF</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-id">#change-font</span> &#123;</span><br>text-align: center;<br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#newstext</span> &#123;</span><br>padding: 10px;<br>margin: 0 auto;<br>letter-spacing: 2px;<br>&#125;<br><span class="css"><span class="hljs-comment">/* 预先定一些选择器 */</span></span><br><span class="css"><span class="hljs-selector-class">.min</span> &#123;</span><br>font-size: 16px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.middle</span> &#123;</span><br>font-size: 18px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.max</span> &#123;</span><br>font-size: 20px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.super-max</span> &#123;</span><br>font-size: 24px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入外部的CSS文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css/none.css"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link"</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入jquery的js库</span><br><span class="hljs-comment">&lt;script src="js/jquery-1.8.3.min.js"&gt;&lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">/** 练习1：执行下面的函数，切换字体大小 */</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resize</span><span class="hljs-params">(size)</span> </span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//获取ID为newstext的元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"newstext"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//将接收到的class的值赋值给获取到的div元素</span></span><br><span class="actionscript"><span class="hljs-comment">//由于class是js中的保留字,因此为元素设置class属性,不能直接.class要使用className</span></span><br>oDiv.className = size;<br>&#125;<br><br><span class="actionscript"><span class="hljs-comment">//定义数组，存放不同的皮肤（css文件的路径）</span></span><br><span class="actionscript"><span class="hljs-keyword">var</span> arr = [ <span class="hljs-string">"css/red.css"</span>, <span class="hljs-string">"css/green.css"</span>, <span class="hljs-string">"css/blue.css"</span> ];</span><br><span class="actionscript"><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="actionscript"><span class="hljs-comment">/** 练习2：执行下面的函数，为页面切换不同的皮肤 */</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeStyle</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//获取link标签(返回一个js对象,这个对象代表link标签)</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oLink = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"link"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//修改link标签的href属性,指向一个css文件路径</span></span><br>oLink.href = arr[index]<br>index++;<br><span class="actionscript"><span class="hljs-comment">//判断index的值是否大于或等于数组长度</span></span><br>if (index &gt;= arr.length) &#123;<br>index = 0;<br>&#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>达内时代科技集团简介<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"change-font"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当为a标签的herf属性赋值为"javascript:void(0)"时,可以阻止超链接跳转 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0)"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"resize('min')"</span>&gt;</span>小字体<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag"><span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0)"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"resize('middle')"</span>&gt;</span>中字体<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag"><span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0)"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"resize('max')"</span>&gt;</span>大字体<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag"><span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0)"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"resize('super-max')"</span>&gt;</span>超大字体<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag"><span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0)"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"changeStyle()"</span>&gt;</span>换肤<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"newstext"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"middle"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>达内时代科技集团有限公司，是中国高端IT培训的领先品牌，致力于培养面向互联网、电信和金融领域的Java、C++、C#、.Net、软件测试、嵌入式、PHP、android等方面的中高端软件人才。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>达内创办于2002年，专注IT职业教育17年，2014年在美国纳斯达克上市公司。目前，已开设24大课程方向，在全国70多个城市建立了330家培训中心，真正实现“一地学习，全国就业”。高薪聘请总监级名师全职授课，术业有专攻，名师出高徒。实施“因材施教，分级培优”教学方案，让每一位学员都成才，让强者更强。采用“先学习，就业后付款”的模式，已帮助80万名学员成功就业。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>达内优秀的教学效果和行业领先的经营模式赢得了社会各界的广泛赞誉和好评，荣获了各界权威机构的颁奖：达内成为业界唯一的一家2006、2007、2008、2009连续4年入选德勤评选的<br>“中国高科技高成长50强公司”、“亚太地区高科技高成长500强公司”，获得首届中国留学人才归国创业“腾飞”奖、中关村管理委员会指定的“软件人才培养示范基地”、被《计算机世界》评选的“就业服务杰出贡献奖”、被《中国计算机报》评选的“最具影响力培训机构奖”、被搜狐评为“中国十大教育集团”、被腾讯评为“中国大学生心目中最具影响力的IT品牌”。<br>有实力、有信誉，要培训，就选上市公司！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="总结：JS获取元素"><a href="#总结：JS获取元素" class="headerlink" title="总结：JS获取元素"></a>总结：JS获取元素</h3><p><code>document</code>是一个js对象，用于表示当前html网页。当浏览器加载完整个html网页后，会用document对象表示整个html网页！</p><p><code>document.getElementById( id值 )</code> – 通过元素的id值，获取一个元素。返回的是表示该元素的js对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">"div1"</span>&gt;xxxx&lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/获取id为div1的元素</span><br><span class="hljs-regexp">var oDiv1 = document.getElementById("div1");</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/oDiv1是一个js对象,表示获取的div元素</span><br></code></pre></td></tr></table></figure><p><code>document.getElementsByTagName( 元素名 )</code> – 通过元素名称获取当前文档中的所有指定名称的元素，返回的是一个数组，其中包含了所有指定名称的元素。</p><p><code>document.body</code> – 获取当前文档中的body元素</p><p><code>element.parentNode</code> – 获取当前元素的父元素。element表示当前元素</p><h3 id="总结：JS增删改元素"><a href="#总结：JS增删改元素" class="headerlink" title="总结：JS增删改元素"></a>总结：JS增删改元素</h3><p><code>document.createElement( 元素名称 )</code> – 根据元素名称创建指定名称的元素，返回的是表示新创建元素的js对象</p><p><code>parent.appendChild( child )</code> – 通过父元素添加子元素，其中parent表示父元素，child表示子元素</p><p><code>parent.removeChild( child )</code>– 通过父元素删除子元素，其中parent表示父元素，child表示子元素</p><p><code>element.innerHTML</code> – 获取当前元素的html内容(从开始标签到结束标签之间的所有内容)，还可以设置当前元素的html内容(如果元素内部有内容，将会覆盖原有内容)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">"div1"</span>&gt;<br>这是一个div元素...<br>&lt;span&gt;这是一个span元素&lt;<span class="hljs-regexp">/span&gt;</span><br><span class="hljs-regexp">&lt;/</span>div&gt;<br><span class="hljs-comment">//获取div元素</span><br><span class="hljs-keyword">var</span> oDiv1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div1"</span>);<br>oDiv1.innerHTML;<span class="hljs-comment">//获取div元素的内容</span><br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 基础</title>
      <link href="/2020/07/06/jQuery/"/>
      <url>/2020/07/06/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h2><h3 id="什么是jQuery-了解"><a href="#什么是jQuery-了解" class="headerlink" title="什么是jQuery(了解)"></a>什么是jQuery(了解)</h3><p>jQuery: JavaScript Query  JS查询</p><p>jQuery是一门轻量的、免费开源的JS函数库（就是JS的简单框架）</p><p>jQuery可以极大的简化JS代码</p><p>jQuery的核心思想：“写的更少，但做的更多”</p><a id="more"></a><hr><p><em>轻量的：是指一个技术或框架对代码或程序的侵入程度是比较低的。</em></p><p><em>或者说代码对该技术依赖程度越低，这个技术越轻。对该技术的依赖程度越高，这个技术越重。</em></p><p><em>jQuery本质就是一个包含了很多函数的JS文件，如果要在某一个HTML中使用这个JS文件中的函数，就必须得将JS文件引入到HTML中</em>（想使用jQuery，就得引入jQuery的函数库文件，就是一个JS文件）</p><hr><h3 id="jQuery的优势-了解"><a href="#jQuery的优势-了解" class="headerlink" title="jQuery的优势(了解)"></a>jQuery的优势(了解)</h3><p>(1) 可以极大的简化JS代码</p><p>(2) 可以像CSS选择器一样获取html元素</p><p>css中获取所有的div,给div添加样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">div&#123; css属性... &#125;<br></code></pre></td></tr></table></figure><p>jQuery中获取所有div,给div添加边框样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">$(&quot;div&quot;).css(&quot;border&quot;, &quot;2px solid red&quot;);<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">JS获取id为div1的元素: document.getElementById(&quot;div1&quot;)<br>jQuery获取id为div1的元素: $(&quot;#div1&quot;)<br></code></pre></td></tr></table></figure><p>(3) 可以通过修改css属性控制页面的效果</p><p>(4) 可以兼容常用的浏览器</p><p>比如: JS中的innerText属性、removeNode()函数、replaceNode( )函数 这些函数在某些浏览器中是无法使用的。</p><p>jQuery中提供了相应的函数（ text函数、remove函数、replaceWith函数 ）</p><p>常用浏览器：谷歌浏览器、火狐浏览器、苹果浏览器、欧朋浏览器等</p><h3 id="jQuery引入"><a href="#jQuery引入" class="headerlink" title="jQuery引入"></a>jQuery引入</h3><p>jQuery的函数库文件就是一个普通的JS文件，引入jQuery和引入JS文件的方式一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 在使用jQuery之前，必须先引入jQuery的函数库文件 --&gt;<br>&lt;script src=<span class="hljs-string">"js/jquery-1.8.3.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure><p>在引入jQuery函数库文件时，如果文件引入路径错误，则会导致文件引入失败，如下图：</p><p><img src="/2020/07/06/jQuery/err.png" alt="err"></p><h3 id="文档就绪事件函数"><a href="#文档就绪事件函数" class="headerlink" title="文档就绪事件函数"></a>文档就绪事件函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在使用jQuery之前，必须先引入jQuery的函数库文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取id为demo的h1元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">"demo"</span> );</span><br><span class="actionscript"><span class="hljs-comment">//2.获取h1元素中的内容( innerHTML )</span></span><br>alert( h1.innerHTML );<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span>jQuery的引入示例...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题描述：上面的代码在执行时，会报一个错误：</p><p><img src="/2020/07/06/jQuery/err2.png" alt="err2"></p><p>原因描述：在执行获取id为demo的元素时, h1元素还没有被浏览器加载到，所以获取不到h1元素。</p><p><strong>解决方式一：</strong></p><p>将script标签移到body内部，也就是h1元素的后面</p><p>这样浏览器在加载时，会先加载h1元素，再执行获取h1元素的代码，由于在获取h1元素之前，h1元素已经被浏览器加载过了，所以后面再获取就能够获取到！</p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span>jQuery的引入示例...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取id为demo的h1元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">"demo"</span> );</span><br><span class="actionscript"><span class="hljs-comment">//2.获取h1元素中的内容( innerHTML )</span></span><br>alert( h1.innerHTML );<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解决方式二：</strong></p><p>将获取元素的代码放在文档就绪事件函数中，文档就绪事件函数会在浏览器加载完所有的html元素后（也就是加载完最后一个html元素时）立即执行。</p><p>由于当前网页中的所有元素都被加载了，h1元素肯定也被加载了，此时再获取h1元素就一定能获取到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在使用jQuery之前，必须先引入jQuery的函数库文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取id为demo的h1元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">"demo"</span> );</span><br><span class="actionscript"><span class="hljs-comment">//2.获取h1元素中的内容( innerHTML )</span></span><br>alert( h1.innerHTML );<br>&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span>jQuery的引入示例...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解决方式三：</strong></p><p>将获取元素的代码放在一个自定义的函数中，并将该函数绑定在h1元素的点击事件上，当我们点击h1元素时会执行自定义的函数，函数执行时才获取h1元素，此时就能够获取到h1元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在使用jQuery之前，必须先引入jQuery的函数库文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//1.获取id为demo的h1元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.getElementById( <span class="hljs-string">"demo"</span> );</span><br><span class="actionscript"><span class="hljs-comment">//2.获取h1元素中的内容( innerHTML )</span></span><br>alert( h1.innerHTML );<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"fn1()"</span>&gt;</span>jQuery的引入示例...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：什么时候该使用文档就绪事件函数?</strong></p><p>如果在获取元素时，获取元素的代码执行的时机，比元素本身加载的时间还要早，如果元素还没有加载就获取，必然是获取不到的。</p><p>可以将获取元素的代码放在文档就绪事件函数中，等浏览器加载完整个网页后，文档就绪事件函数才会执行，此时所有的元素都被加载了，再获取任何元素都能获取到！</p><p>jQuery提供的文档就绪事件函数（简写形式）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//在浏览器加载完整个html网页后立即执行</span></span><br>&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JS也为我们提供了文档就绪事件函数，其写法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//在浏览器加载完整个html网页后立即执行</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档就绪事件函数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./jquery_example/js/jquery-1.8.3.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">//文档就绪事件函数:浏览器在加载完成整个网页后会立即执行</span></span><br><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//案例:通过js过去id为demo的元素的内容</span></span><br><span class="actionscript"><span class="hljs-comment">//1.获取id为demo的元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> oH1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"demo"</span>)</span><br><span class="actionscript"><span class="hljs-comment">//2.获取demo元素的内容输出到控制台</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(oH1.innerHTML);</span><br>&#125;;<br><br><span class="javascript">$( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> oH1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"demo"</span>)</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(oH1.innerHTML);</span><br>&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span> &gt;</span>来了还他们想走恩?<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery选择器-重点"><a href="#jQuery选择器-重点" class="headerlink" title="jQuery选择器(重点)"></a>jQuery选择器(重点)</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-number">1</span>)元素名选择器<br>$(<span class="hljs-string">"div"</span>) -- 选中所有的div元素<br>$(<span class="hljs-string">"span"</span>) -- 选中所有的span元素<br><br>(<span class="hljs-number">2</span>)<span class="hljs-class"><span class="hljs-keyword">class</span>/类选择器</span><br>$(".s1") -- 选中所有class值为s1的元素(class值为s1的元素可能是任何元素)<br>$(<span class="hljs-string">"span.s1"</span>) -- 选中所有<span class="hljs-class"><span class="hljs-keyword">class</span>值为<span class="hljs-title">s1</span>的<span class="hljs-title">span</span>元素</span><br><span class="hljs-class"></span><br><span class="hljs-class">(3)<span class="hljs-title">id</span>选择器</span><br>$("#one") -- 选中id为one的元素<br><br>(<span class="hljs-number">4</span>)多元素选择器<br>$(<span class="hljs-string">"div,span,.s1,#one"</span>) -- 选中所有的div元素,以及所有的span元素,以及所有<span class="hljs-class"><span class="hljs-keyword">class</span>值为<span class="hljs-title">s1</span>的元素,以及<span class="hljs-title">id</span>为<span class="hljs-title">one</span>的元素</span><br></code></pre></td></tr></table></figure><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div span"</span>) -- 选中所有div内部的所有span元素<br>$(<span class="hljs-string">"#one span"</span>) -- 选中id为one的元素内部的所有span元素<br><br>$(<span class="hljs-string">"#two+span"</span>) -- 选中id为two的元素后面紧邻的span兄弟元素<br>$(<span class="hljs-string">"#two"</span>).next(<span class="hljs-string">"span"</span>) -- 选中id为two的元素后面紧邻的span兄弟元素<br>$(<span class="hljs-string">"#two"</span>).prev(<span class="hljs-string">"span"</span>) -- 选中id为two的元素前面紧邻的span兄弟元素<br><br>$(<span class="hljs-string">"#two~span"</span>) -- 选中id为two的元素后面所有的span兄弟元素<br>$(<span class="hljs-string">"#two"</span>).nextAll(<span class="hljs-string">"span"</span>) -- 选中id为two的元素后面所有的span兄弟元素<br>$(<span class="hljs-string">"#two"</span>).prevAll(<span class="hljs-string">"span"</span>) -- 选中id为two的元素前面所有的span兄弟元素<br><br>$(<span class="hljs-string">"#two"</span>).siblings(<span class="hljs-string">"span"</span>) -- 选中id为two的元素前、后所有的span兄弟元素<br></code></pre></td></tr></table></figure><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-number">1</span>) 选中第一个div元素<br>$(<span class="hljs-string">"div:first"</span>)<br>$(<span class="hljs-string">"div:eq(0)"</span>)<br>$(<span class="hljs-string">"div"</span>).eq(<span class="hljs-number">0</span>)<br><br>(<span class="hljs-number">2</span>) 选中最后一个div元素<br>$(<span class="hljs-string">"div:last"</span>)<br>$(<span class="hljs-string">"div:eq(-1)"</span>)<br>$(<span class="hljs-string">"div"</span>).eq(<span class="hljs-number">-1</span>)<br><br>(<span class="hljs-number">3</span>) 选中第n+<span class="hljs-number">1</span>个div元素(n从零开始)<br>$(<span class="hljs-string">"div:eq(n)"</span>)<br>$(<span class="hljs-string">"div"</span>).eq(n)<br></code></pre></td></tr></table></figure><h3 id="选择器练习"><a href="#选择器练习" class="headerlink" title="选择器练习"></a>选择器练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>选择器练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span>&#123; <span class="hljs-attribute">font-family</span>:<span class="hljs-string">"微软雅黑"</span>; <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">300px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">input</span>&#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">18px</span>;<span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;&#125;</span><br>div,span&#123;width:300px;border:1px solid #000;padding-left:10px;background:#bed4ef;;&#125;<br><span class="css"><span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">display</span>:block;&#125;</span><br><span class="css"><span class="hljs-selector-tag">body</span>&gt;<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">body</span>&gt;<span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span>;<span class="hljs-attribute">display</span>:inline-block;<span class="hljs-attribute">vertical-align</span>:middle;&#125;</span><br><span class="css"><span class="hljs-selector-id">#one</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">185px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">250px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">35px</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入jquery函数库文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery-1.8.3.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">/* 文档就绪事件函数(即在浏览器加载完最后一个html元素后立即执行) */</span></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">/* -------一、基本选择器练习------- */</span></span><br><span class="actionscript"><span class="hljs-comment">/* 1、选中id为b1的按钮,为b1按钮绑定点击事件，点击b1按钮：改变所有 div 元素的背景色为 #FD5551 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//在选择器选中的元素被点击后,立即执行当前的function</span></span><br><span class="actionscript"><span class="hljs-comment">//选中所有的div元素,并给所有div设置背景颜色(css函数)</span></span><br><span class="actionscript"><span class="hljs-comment">/* $("div").css("background","#FD5551") */</span></span><br><span class="javascript">$(<span class="hljs-string">"div"</span>).css(&#123;</span><br><span class="actionscript"><span class="hljs-string">"background"</span>:<span class="hljs-string">"#FD5551"</span>,</span><br><span class="actionscript"><span class="hljs-string">"border"</span>:<span class="hljs-string">"2fx solid blue"</span>,</span><br><span class="actionscript"><span class="hljs-string">"color"</span>:<span class="hljs-string">"yellow"</span></span><br>&#125;);<br>&#125;);<br><span class="actionscript"><span class="hljs-comment">/* 2、选中id为b2的按钮,为b2按钮绑定点击事件，点击b2按钮：改变 id 为 one 的元素的背景色为 #91BF2F */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">"#one"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#91BF2F"</span>);</span><br>&#125;);<br>/* 3、选中id为b3的按钮,为b3按钮绑定点击事件，点击b3按钮：<br><span class="actionscript">改变 <span class="hljs-class"><span class="hljs-keyword">class</span> 为 <span class="hljs-title">mini</span> 的所有元素的背景色为 #<span class="hljs-title">EE82EE</span> */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">".mini"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#EE82EE"</span>);</span><br>&#125;);<br><br><span class="actionscript"><span class="hljs-comment">/* ---------二、层级选择器------- */</span></span><br><span class="actionscript"><span class="hljs-comment">/* 4、选中id为b4的按钮,为b4按钮绑定点击事件，点击b4按钮：改变 div 内所有 span 的背景色为 #DC21D2 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">"div span"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#DC21D2"</span>);</span><br>&#125;);<br><span class="actionscript"><span class="hljs-comment">/* 5、选中id为b5的按钮,为b5按钮绑定点击事件，点击b5按钮：改变 id为two 元素的下一个相邻的 div元素 的背景色为 #2CADAA */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b5"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//选中id为two的元素的下一个相邻的div兄弟元素</span></span><br><span class="actionscript"><span class="hljs-comment">/* $("#two+div").css("background","#2CADAA"); */</span></span><br><span class="javascript">$(<span class="hljs-string">"#two"</span>).next(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#2CADAA"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//选中id为two的元素的前一个相邻的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">"#two"</span>).prev(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#2CADAA"</span>);</span><br>&#125;);<br><br><span class="actionscript"><span class="hljs-comment">/* 6、选中id为b6的按钮,为b6按钮绑定点击事件，点击b6按钮：改变 id为two 元素的后面所有的div兄弟元素 的背景色为 #ECD822 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b6"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//nextAll()选中当前元素后边所有的元素()内参数为具体的元素类型</span></span><br><span class="javascript">$(<span class="hljs-string">"#two"</span>).nextAll(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#ECD822"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//prevAll()选中当前元素前边所有的元素()内参数为具体的元素类型</span></span><br><span class="javascript">$(<span class="hljs-string">"#two"</span>).prevAll(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#ECD822"</span>);</span><br>&#125;);<br><span class="actionscript"><span class="hljs-comment">/* 7、选中id为b7的按钮,为b7按钮绑定点击事件，点击b7按钮：改变 id为two 元素的前、后所有的div兄弟元素 的背景色为 #EE0077 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b7"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//siblings()选中元素前后的所有元素()内参数为具体的元素类型</span></span><br><span class="javascript">$(<span class="hljs-string">"#two"</span>).siblings(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#EE0077"</span>);</span><br>&#125;);<br><span class="actionscript"><span class="hljs-comment">/* ---------三、基本过滤选择器------- */</span></span><br><span class="actionscript"><span class="hljs-comment">/* 8、选中id为b8的按钮,为b8按钮绑定点击事件，点击b8按钮：改变第一个以及最后一个 div 元素的背景色为 #0074E8 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b8"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//选中所有div中的第一个div元素</span></span><br><span class="actionscript"><span class="hljs-comment">/* $("div").eq(0).css("background","#0074E8"); */</span></span><br><span class="javascript">$(<span class="hljs-string">"div:first"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#0074E8"</span>);</span><br><span class="actionscript"><span class="hljs-comment">//选中所有div中的最后一个div元素</span></span><br><span class="actionscript"><span class="hljs-comment">/* $("div").eq(-1).css("background","#0074E8"); */</span></span><br><span class="javascript">$(<span class="hljs-string">"div:last"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#0074E8"</span>);</span><br>&#125;);<br><span class="actionscript"><span class="hljs-comment">/* 9、选中id为b9的按钮,为b9按钮绑定点击事件，点击b9按钮：改变第4个 div 元素的背景色为 #D917C6 */</span></span><br><span class="javascript">$(<span class="hljs-string">"#b9"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="actionscript"><span class="hljs-comment">//选中下标为3的div元素</span></span><br><span class="actionscript"><span class="hljs-comment">/* $("div").eq(3).css("background","#D917C6"); */</span></span><br><span class="javascript">$(<span class="hljs-string">"div:eq(3)"</span>).css(<span class="hljs-string">"background"</span>,<span class="hljs-string">"#D917C6"</span>);</span><br>&#125;);<br><br>&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>基本选择器→：<br><span class="hljs-comment">&lt;!-- 按钮,id为b1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b1,改变所有 div 元素的背景色为 #FA8072"</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b2,改变 id 为 one 的元素的背景色为 #9ACD32"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b3,改变 class 为 mini 的所有元素的背景色为 #EE82EE"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>层级选择器→：<br><span class="hljs-comment">&lt;!-- 按钮,id为b4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b4,改变 div 内所有 span 的背景色为 #7CFC00"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b5"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b5,改变 id为two 元素的下一个相邻的 div元素 的背景色为 #48D1CC"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b6 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b6"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b6,改变 id为two 元素的后面所有的div兄弟元素 的背景色为 #D2FA7E"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b7 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b7"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b7,改变 id为two 元素的前、后所有的div兄弟元素 的背景色为 #FF69B4"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>基本过滤选择器→：<br><span class="hljs-comment">&lt;!-- 按钮,id为b8 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b8"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b8,改变第一个/最后一个 div 元素的背景色为 #1E90FF"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮,id为b9 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"b9"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b9,改变第4个 div 元素的背景色为 #EA3AD8"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>点击按钮查看效果...<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"one"</span>&gt;</span><br>这是一个div1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"one01"</span>&gt;</span>这是一个div11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mini"</span>&gt;</span>这是一个span,class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mini"</span>&gt;</span>这是一个span,class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个div2<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮1"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮2"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"two"</span>&gt;</span>这是一个div3,id是two<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是一个span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个div4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个div5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mini"</span>&gt;</span>这是一个span,class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个div6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mini01"</span>&gt;</span>这是一个span,class为mini01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mini"</span>&gt;</span>这是一个span,class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="创建表格元素"><a href="#创建表格元素" class="headerlink" title="创建表格元素"></a>创建表格元素</h3><p><strong>练习1：创建单行单列的表格</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTable1</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-comment">//创建一个table元素,返回一个jQuery对象</span><br><span class="hljs-comment">//$tab前的$在这里只是为了标记这是一个jquery对象,没有别的意义</span><br><span class="hljs-keyword">var</span> $tab = $(<span class="hljs-string">"&lt;table&gt;&lt;/table&gt;"</span>);<br><span class="hljs-comment">//创建一个tr元素</span><br><span class="hljs-keyword">var</span> $tr = $(<span class="hljs-string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<br><span class="hljs-comment">//创建一个td元素(为td设置内容)</span><br><span class="hljs-keyword">var</span> $td = $(<span class="hljs-string">"&lt;td&gt;MDZZ&lt;/td&gt;"</span>);<br><span class="hljs-comment">//将td元素添加到tr内部</span><br>$tr.append($td);<br><span class="hljs-comment">//将tr元素添加到table内部</span><br>$tab.append($tr);<br><span class="hljs-comment">//将table添加到body元素内部(body已存在,直接获取即可)</span><br>$(<span class="hljs-string">"body"</span>).append($tab);<br>$(<span class="hljs-string">"body"</span>).append(<span class="hljs-string">"&lt;hr/&gt;"</span>);<br><span class="hljs-comment">//$("body").append("&lt;table&gt;&lt;tr&gt;&lt;td&gt;MDZZ啊!!!&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;hr/&gt;")</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2.1：创建单行6列的表格</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTable2</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//1.创建一个table元素</span><br><span class="hljs-keyword">var</span> $tab = $(<span class="hljs-string">"&lt;table&gt;&lt;/table&gt;"</span>);<br><span class="hljs-comment">//2.创建一个tr元素</span><br><span class="hljs-keyword">var</span> $tr = $(<span class="hljs-string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123; <br><span class="hljs-comment">//3.创建一个td元素, 并为td添加内容</span><br><span class="hljs-keyword">var</span> $td = $(<span class="hljs-string">"&lt;td&gt;&lt;/td&gt;"</span>);<br>$td.html(<span class="hljs-string">"Hello TD~~"</span>);<br><span class="hljs-comment">//4.将td添加到tr元素内部</span><br>$tr.append( $td );<br>&#125;<br><span class="hljs-comment">//5.将tr添加到table元素内部</span><br>$tab.append( $tr );<br><span class="hljs-comment">//6.将table添加到body元素内部</span><br>$(<span class="hljs-string">"body"</span>).append( $tab ); <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2.2：创建5行6列的表格</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTable2</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//创建一个table元素,返回一个jQuery对象</span><br><span class="hljs-comment">//$tab前的$在这里只是为了标记这是一个jquery对象,没有别的意义</span><br><span class="hljs-keyword">var</span> $table = $(<span class="hljs-string">"&lt;table&gt;&lt;/table&gt;"</span>);<br><span class="hljs-comment">//创建r元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span> ; i++) &#123;<br><span class="hljs-keyword">var</span> $tr = $(<span class="hljs-string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<br><span class="hljs-comment">//创建td元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; j++) &#123;<br><span class="hljs-keyword">var</span> $td = $(<span class="hljs-string">"&lt;td&gt;我是第"</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">"行&lt;/td&gt;"</span>);<br><span class="hljs-comment">//把创建的td放到tr里</span><br>$tr.append($td);<br><br>&#125;<br><span class="hljs-comment">//把tr放到table里</span><br>$table.append($tr);<br>$table.css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);<br>&#125;<br><span class="hljs-comment">//把table放到body里</span><br>$(<span class="hljs-string">"body"</span>).append($table);<br>$(<span class="hljs-string">"body"</span>).append(<span class="hljs-string">"&lt;hr/&gt;"</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：创建指定行和列的表格</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTable3</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取用户输入的行数和列数(js),value用来设置或获取表单中的value值</span><br><span class="hljs-comment">/* var rows = document.getElementById("rows").value;</span><br><span class="hljs-comment">var cols = document.getElementById("cols").value; */</span><br><span class="hljs-comment">//获取用户输入的行数和列数(jquery),val()用来设置或获取表单中的value值</span><br><span class="hljs-keyword">var</span> rows = $(<span class="hljs-string">"#rows"</span>).val();<br><span class="hljs-keyword">var</span> cols = $(<span class="hljs-string">"#cols"</span>).val();<br><span class="hljs-comment">//获取用户输入的行数和列数</span><br><span class="hljs-comment">//创建一个table元素,返回一个jQuery对象</span><br><span class="hljs-comment">//$tab前的$在这里只是为了标记这是一个jquery对象,没有别的意义</span><br><span class="hljs-keyword">var</span> $table = $(<span class="hljs-string">"&lt;table&gt;&lt;/table&gt;"</span>);<br><span class="hljs-comment">//创建r元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; rows ; i++) &#123;<br><span class="hljs-keyword">var</span> $tr = $(<span class="hljs-string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<br><span class="hljs-comment">//创建td元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; cols ; j++) &#123;<br><span class="hljs-keyword">var</span> $td = $(<span class="hljs-string">"&lt;td&gt;我是第"</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">"行&lt;/td&gt;"</span>);<br><span class="hljs-comment">//把创建的td放到tr里</span><br>$tr.append($td);<br><br>&#125;<br><span class="hljs-comment">//把tr放到table里</span><br>$table.append($tr);<br>$table.css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);<br>&#125;<br><span class="hljs-comment">//把table放到body里</span><br>$(<span class="hljs-string">"body"</span>).append($table);<br>$(<span class="hljs-string">"body"</span>).append(<span class="hljs-string">"&lt;hr/&gt;"</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仿QQ好友列表"><a href="#仿QQ好友列表" class="headerlink" title="仿QQ好友列表"></a>仿QQ好友列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>仿QQ好友分组<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">table</span>&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">#09f</span> <span class="hljs-number">1px</span> solid;<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">border-collapse</span>:collapse;<span class="hljs-attribute">margin</span>:<span class="hljs-number">15px</span> <span class="hljs-number">10px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">10%</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span>&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">#06f</span> <span class="hljs-number">1px</span> solid;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#6f5f3e</span>;<span class="hljs-attribute">text-align</span>:center;<span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">0</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> <span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ff9</span>;<span class="hljs-attribute">text-align</span>:left;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">28px</span>;<span class="hljs-attribute">padding-left</span>:<span class="hljs-number">14px</span>;<span class="hljs-attribute">text-indent</span>:padding-left:<span class="hljs-number">20px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> <span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">19px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">border</span>:none;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">cursor</span>:pointer;&#125;</span><br><span class="css"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0c0</span>&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入jquery的js库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery-1.8.3.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="actionscript"><span class="hljs-comment">/** 通过jQuery实现仿QQ列表好友列表 */</span></span><br><span class="actionscript"><span class="hljs-comment">/* thisobj代表被点击的这个span元素,传参进来 */</span></span><br><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">openDiv</span><span class="hljs-params">(thisobj)</span></span>&#123;</span><br>/* 将其他三个分组关闭(隐藏div)<br>通过当前被点击的span,找到当前span的所有祖先元素中的tr元素,<br>再通过tr找到掐他三个tr兄弟元素,再通过三个tr元素找到内部的div元素*/<br><span class="actionscript"><span class="hljs-comment">/* $(thisobj).parents("tr").siblings("tr").find("div").css("display", "none"); */</span></span><br><span class="javascript">$(thisobj).parents(<span class="hljs-string">"tr"</span>).siblings(<span class="hljs-string">"tr"</span>).find(<span class="hljs-string">"div"</span>).hide(<span class="hljs-number">100</span>);</span><br><span class="actionscript"><span class="hljs-comment">/* js对象不能调用jQuery的函数 */</span></span><br><span class="actionscript"><span class="hljs-comment">//获取被点击的span相邻的div元素</span></span><br><span class="javascript">$(thisobj).next(<span class="hljs-string">"div"</span>).slideToggle(<span class="hljs-number">100</span>);<span class="hljs-comment">//100ms</span></span><br><br>&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-comment">&lt;!-- this代表本元素,这里代表当前的span --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"openDiv(this)"</span>&gt;</span>君王好友<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>&gt;</span><br>秦始皇<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>刘邦<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>李世民<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>康熙<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"openDiv(this)"</span>&gt;</span>三国好友<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>&gt;</span><br>刘备<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>关羽<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>张飞<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>赵云<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"openDiv(this)"</span>&gt;</span>美女好友<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>&gt;</span><br>西施<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>貂蝉<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>杨贵妃<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>王昭君<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"openDiv(this)"</span>&gt;</span>IT好友<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>&gt;</span><br>王海涛<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>马云<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>李开复<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>俞敏洪<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="模拟员工信息管理系统"><a href="#模拟员工信息管理系统" class="headerlink" title="模拟员工信息管理系统"></a>模拟员工信息管理系统</h3><p>练习1：添加员工信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEmp</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取要添加的员工信息(id,name,email.salary)</span><br><span class="hljs-keyword">var</span> id = $(<span class="hljs-string">"#box1 input[name='id']"</span>).val();<br><span class="hljs-keyword">var</span> name = $(<span class="hljs-string">"#box1 input[name='name']"</span>).val();<br><span class="hljs-keyword">var</span> email = $(<span class="hljs-string">"#box1 input[name='email']"</span>).val();<br><span class="hljs-keyword">var</span> salary = $(<span class="hljs-string">"#box1 input[name='salary']"</span>).val();<br><span class="hljs-comment">//校验员工信息</span><br><span class="hljs-comment">//添加员工不能为空</span><br><span class="hljs-keyword">if</span>(id.trim()==<span class="hljs-string">""</span> || name.trim()==<span class="hljs-string">""</span>|| email.trim()==<span class="hljs-string">""</span> || salary.trim() == <span class="hljs-string">""</span>)&#123;<br>alert(<span class="hljs-string">"添加员工信息不能为空!"</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//获取table中的所有tr元素,遍历每一个tr,通过当前tr找到内部第二个td单元格的内容</span><br><span class="hljs-comment">//(该程序中的每一个员工id),拿着用户输入的id和当前员工的id作比较,如果相同就停止程序</span><br><span class="hljs-comment">//如果不相同,就执行下一个循环(this表示每次遍历的tr元素)</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-string">"false"</span>;<br>$(<span class="hljs-string">"table tr"</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> tempId = $(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td:eq(1)"</span>).text();<br><span class="hljs-keyword">if</span> (id == tempId) &#123;<br>flag = <span class="hljs-string">"true"</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>&#125;);<br><span class="hljs-keyword">if</span> (flag==<span class="hljs-string">"true"</span>) &#123;<br>alert(<span class="hljs-string">"输入的员工ID重复,请重新输入"</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//将员工信息作为一行添加到表格中,在页面中显示</span><br><span class="hljs-comment">//创建一个tr元素</span><br><span class="hljs-keyword">var</span> $tr = $(<span class="hljs-string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<br><span class="hljs-comment">//创建5个td元素,并添加内容到td,将td添加到tr</span><br>$tr.append(<span class="hljs-string">"&lt;td&gt;&lt;input type='checkbox'/&gt;&lt;/td&gt;"</span>);<br>$tr.append(<span class="hljs-string">"&lt;td&gt;"</span>+id+<span class="hljs-string">"&lt;/td&gt;"</span>);<br>$tr.append(<span class="hljs-string">"&lt;td&gt;"</span>+name+<span class="hljs-string">"&lt;/td&gt;"</span>);<br>$tr.append(<span class="hljs-string">"&lt;td&gt;"</span>+email+<span class="hljs-string">"&lt;/td&gt;"</span>);<br>$tr.append(<span class="hljs-string">"&lt;td&gt;"</span>+salary+<span class="hljs-string">"&lt;/td&gt;"</span>);<br>$(<span class="hljs-string">"table"</span>).append($tr);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：删除员工信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delEmp</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取被选中的复选框所在的tr元素,并将tr直接移除</span><br><span class="hljs-comment">//$("input[type='checkbox']:checked").parents("tr").remove();</span><br><span class="hljs-comment">//通过选框找父元素td选项,将表头th选项过滤掉,然后获取所有tr进行删除</span><br>  $(<span class="hljs-string">"input[type='checkbox']:checked"</span>).parent(<span class="hljs-string">"td"</span>).parent(<span class="hljs-string">"tr"</span>).remove();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习3：修改员工信息（自己完成）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updEmp</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取修改后的员工信息(id,name,email,salary)</span><br><span class="hljs-keyword">var</span> id = $(<span class="hljs-string">"#box2 input[name='id']"</span>).val();<br><span class="hljs-keyword">var</span> name = $(<span class="hljs-string">"#box2 input[name='name']"</span>).val();<br><span class="hljs-keyword">var</span> email = $(<span class="hljs-string">"#box2 input[name='email']"</span>).val();<br><span class="hljs-keyword">var</span> salary = $(<span class="hljs-string">"#box2 input[name='salary']"</span>).val();<br><span class="hljs-comment">//校验数据</span><br><span class="hljs-comment">//修改后的员工数据不能为空</span><br><span class="hljs-keyword">if</span>(id.trim()==<span class="hljs-string">""</span> || name.trim()==<span class="hljs-string">""</span>|| email.trim()==<span class="hljs-string">""</span> || salary.trim() == <span class="hljs-string">""</span>)&#123;<br>alert(<span class="hljs-string">"您输入的员工数据不能为空!"</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//如果输入的员工id存在则执行修改,否则不修改</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-string">"false"</span>;<br>$(<span class="hljs-string">"table tr"</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> tempID = $(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td:eq(1)"</span>).text();<br><span class="hljs-keyword">if</span>(id==tempID)&#123;<br>flag = <span class="hljs-string">"true"</span>;<br>$(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td:eq(2)"</span>).text(name);<br>$(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td:eq(3)"</span>).text(email);<br>$(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td:eq(4)"</span>).text(salary);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;);<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-string">"false"</span>)&#123;<br>alert(<span class="hljs-string">"您输入的ID不存在!"</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习4：实现全选或全不选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkAll</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取全选复选框在当点击之后的状态值,即获取复选框checked属性的值</span><br><span class="hljs-comment">//checked的属性值:true表示复选框(单选框)被选中了,false表示没被选中</span><br><span class="hljs-comment">//使用prop()函数:$ele.prop(attrName) -- 获取当前元素的某一个属性的值,attrName是属性名</span><br><span class="hljs-comment">//$ele.prop(attrName,attrValue) -- 为当前元素的属性赋值,attrName是属性名,attrValue是属性值</span><br><span class="hljs-keyword">var</span> isCheck = $(<span class="hljs-string">"#all"</span>).prop(<span class="hljs-string">"checked"</span>);<br><span class="hljs-comment">/* if ($flag) &#123;</span><br><span class="hljs-comment">$("table input[type='checkbox']:not(#all)").prop("checked",true);</span><br><span class="hljs-comment">&#125; else&#123;</span><br><span class="hljs-comment">$("table input[type='checkbox']:not(#all)").prop("checked",false);</span><br><span class="hljs-comment">&#125;; */</span><br>$(<span class="hljs-string">"input[type='checkbox']"</span>).prop(<span class="hljs-string">"checked"</span>,isCheck);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jQuery总结"><a href="#jQuery总结" class="headerlink" title="jQuery总结"></a>jQuery总结</h2><h3 id="html元素操作"><a href="#html元素操作" class="headerlink" title="html元素操作"></a>html元素操作</h3><p><strong>1、创建元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"&lt;div&gt;&lt;/div&gt;"</span>) -- 创建一个div元素，返回的是一个jQuery对象,表示创建的div元素<br>$(<span class="hljs-string">"&lt;div&gt;xxxx&lt;/div&gt;"</span>) -- 创建一个包含内容的div元素，返回的是一个jQuery对象,表示创建的div元素<br></code></pre></td></tr></table></figure><p><strong>2、添加子元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$parent.append( $child ) -- 父元素调用方法添加子元素<br>$(<span class="hljs-string">"body"</span>).append( <span class="hljs-string">"&lt;div&gt;我是新来的...&lt;/div&gt;"</span> ); -- 往body元素内部追加一个div子元素<br></code></pre></td></tr></table></figure><p><strong>3、删除元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).remove() -- 删除所有的div元素<br><br>JS删除所有div元素：<br><span class="hljs-comment">//获取所有的div元素(返回的是所有div组成的数组)</span><br><span class="hljs-keyword">var</span> divArr = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"div"</span>); <span class="hljs-comment">//div数组</span><br><span class="hljs-comment">//遍历div数组,依次删除每一个div元素</span><br><span class="hljs-keyword">var</span> len = divArr.length;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>    <span class="hljs-comment">//通过当前元素的父元素删除当前元素(始终删除第一个)</span><br>    divArr[<span class="hljs-number">0</span>].parentNode.removeChild( divArr[<span class="hljs-number">0</span>] );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、替换元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).replaceWith(<span class="hljs-string">"&lt;p&gt;我是来替换的…&lt;/p&gt;"</span>)<br></code></pre></td></tr></table></figure><h3 id="html元素内容和值的操作"><a href="#html元素内容和值的操作" class="headerlink" title="html元素内容和值的操作"></a>html元素内容和值的操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  这是一个div11元素<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是一个span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    这是一个div1111元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1、html()函数 (类似于js中的innerHTML属性)</strong> </p><p>– 用于获取或设置元素的内容，比如为div、span、p、h1~h6、table、tr、td、form等元素设置内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).html() -- 获取所有div中的第一个div的内容<br>$(<span class="hljs-string">"div"</span>).html(<span class="hljs-string">"xxxx"</span>) -- 为所有div设置内容<br></code></pre></td></tr></table></figure><p><strong>2、text()函数 (类似于js中的innerText属性，innerText在部分浏览器中不兼容)</strong></p><p>-- 用于获取或设置元素的文本内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">$(&quot;div&quot;).text() -- 获取所有div中的所有文本内容<br>$(&quot;div&quot;).text(&quot;xxxx&quot;) -- 为所有div设置文本内容<br></code></pre></td></tr></table></figure><p><strong>3、val()函数</strong> (类似于js中的value属性)</p><p>-- 获取或设置表单项元素的value值(input/select/option/textarea)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"input"</span>).val() -- 获取所有input元素中的第一个input元素的value值<br>$(<span class="hljs-string">"input"</span>).val(值) -- 为所有的input元素设置value值<br></code></pre></td></tr></table></figure><h3 id="元素属性和css属性操作"><a href="#元素属性和css属性操作" class="headerlink" title="元素属性和css属性操作"></a>元素属性和css属性操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"inp"</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1、prop()函数</strong> – 用于获取或设置元素的属性值</p><p>在jQuery1.6版本之后才有这个函数，1.6之前版本的jQuery可以使用attr()函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"input[type='checkbox']"</span>).prop(<span class="hljs-string">"checked"</span>)<br><span class="hljs-comment">// 获取input复选框的选中状态, 返回true表示复选框为选中状态,返回false表示复选框为取消选中状态</span><br>$(<span class="hljs-string">"input[type='checkbox']"</span>).prop(<span class="hljs-string">"checked"</span>, <span class="hljs-literal">true</span>)<br><span class="hljs-comment">// 设置所匹配的复选框元素为选中状态</span><br><br>$(<span class="hljs-string">"#inp"</span>).prop(<span class="hljs-string">"name"</span>); <span class="hljs-comment">//获取id为inp元素的name属性值, 返回useranme</span><br>$(<span class="hljs-string">"#inp"</span>).prop(<span class="hljs-string">"name"</span>,<span class="hljs-string">"user"</span>); <span class="hljs-comment">//为id为inp的元素设置name属性值, name属性值就会变成user</span><br></code></pre></td></tr></table></figure><p><strong>2、css()函数</strong> – 用于获取或设置元素的css属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"#div1"</span>).css(<span class="hljs-string">"width"</span>) -- 获取id为div1元素的宽度<br>$(<span class="hljs-string">"#div1"</span>).css(<span class="hljs-string">"width"</span>,<span class="hljs-string">"200px"</span>) -- 设置id为div1元素的宽度为<span class="hljs-number">200</span>px<br>$(<span class="hljs-string">"#div1"</span>).css(&#123;<br><span class="hljs-string">"width"</span> : <span class="hljs-string">"200px"</span>,<br><span class="hljs-string">"height"</span> : <span class="hljs-string">"150px"</span>,<br><span class="hljs-string">"border"</span> : <span class="hljs-string">"5px solid red"</span>,<br><span class="hljs-string">"background"</span> : <span class="hljs-string">"pink"</span><br>&#125;); <span class="hljs-comment">// 为id为div1的元素设置宽度为200px、高度为150px、边框以及背景颜色等样式</span><br></code></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p><strong>1、each() 函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> index,element </span>)</span>&#123;&#125;)<br><span class="hljs-comment">// each()函数可以遍历$(selector)选择器选中的所有元素(即每次都选择器选中的元素中获取一个元素,并执行function 函数)</span><br><span class="hljs-comment">// function中的index -- 表示遍历的元素的下标</span><br><span class="hljs-comment">// function中的element -- 表示当前正在遍历的元素(也可以通过this获取)</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"table tr"</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//从当前行中获取第二个单元格的内容(当前行的id值)</span><br><span class="hljs-keyword">var</span> tempId = $(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td"</span>).eq(<span class="hljs-number">1</span>).html();<br><span class="hljs-comment">//拿着用户输入的id 和 每一行中的id值进行比较</span><br><span class="hljs-keyword">if</span>( id == tempId )&#123;<br>alert(<span class="hljs-string">"添加失败，id已存在！"</span>);<br>flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">//id存在，更新flag的值，true表示已存在！</span><br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>2、show()/hide() 函数</strong></p><p>show() – 设置元素由隐藏变为显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).show() -- 设置所有的div元素为显示<br></code></pre></td></tr></table></figure><p>等价于:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"display"</span>, <span class="hljs-string">"block"</span>);<br></code></pre></td></tr></table></figure><p>hide() – 设置元素由显示变为隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).hide() -- 设置所有的div元素为隐藏<br></code></pre></td></tr></table></figure><p>等价于:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"display"</span>, <span class="hljs-string">"none"</span>)<br></code></pre></td></tr></table></figure><p><strong>2、toggle()/slideToggle()</strong></p><p>toggle() – 切换元素的显示状态, 如果元素是显示的, 则切换为隐藏, 否则切换为显示</p><p>slidToggle() –切换元素的显示状态, 如果元素是显示的, 则切换为隐藏，否则切换为显示，切换为显示为下拉状态，隐藏为收缩状态。</p><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><h3 id="为元素绑定点击事件"><a href="#为元素绑定点击事件" class="headerlink" title="为元素绑定点击事件"></a>为元素绑定点击事件</h3><p>以点击事件为例，为元素绑定点击事件的方式为:</p><p><strong>方式1(js版)：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">"input按钮被点击了..."</span>);<br>  &#125;<br>&lt;<span class="hljs-regexp">/script&gt;</span><br><span class="hljs-regexp">&lt;body&gt;</span><br><span class="hljs-regexp">&lt;input onclick="fn()" type="button" value="点我~!" /</span>&gt;<br>&lt;<span class="hljs-regexp">/body&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式2(js版)：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//获取id为btn的元素</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"btn"</span>);<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-string">"input按钮被点击了..."</span>);<br>&#125;<br>&#125;<br>&lt;<span class="hljs-regexp">/script&gt;</span><br><span class="hljs-regexp">&lt;body&gt;</span><br><span class="hljs-regexp">&lt;input id="btn" type="button" value="点我~!" /</span>&gt;<br>&lt;<span class="hljs-regexp">/body&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式3(jQuery版)：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//当点击btn按钮时,触发点击事件执行其中的函数</span><br>    $(<span class="hljs-string">"#btn"</span>).click( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(<span class="hljs-string">"input按钮被点击了..."</span>);<br>    &#125;);<br>&#125;);<br>&lt;<span class="hljs-regexp">/script&gt;</span><br><span class="hljs-regexp">&lt;body&gt;</span><br><span class="hljs-regexp">&lt;input id="btn" type="button" value="点我~!" /</span>&gt;<br>&lt;<span class="hljs-regexp">/body&gt;</span><br></code></pre></td></tr></table></figure><h3 id="js对象和jQuery对象的互相转换"><a href="#js对象和jQuery对象的互相转换" class="headerlink" title="js对象和jQuery对象的互相转换"></a>js对象和jQuery对象的互相转换</h3><p>通过JS的方式获取元素，返回的是JS对象，JS对象只能调用JS的属性或函数</p><p>通过jQuery选择器获取元素，返回的是jQuery对象（结构像一个集合），jQuery对象只能调用jQuery的属性或函数。</p><p>如果现有JS对象，但我们需要调用jQuery的属性或函数，可以将JS对象转成jQuery对象；</p><p>如果现有jQuery对象，但我们需要调用JS的属性或函数，可以将jQuery对象转成JS对象；</p><p><img src="/2020/07/06/jQuery/jq.png" alt="jq"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
          <category> 前端 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO</title>
      <link href="/2020/07/06/IO/"/>
      <url>/2020/07/06/IO/</url>
      
        <content type="html"><![CDATA[<h2 id="IO简介"><a href="#IO简介" class="headerlink" title="IO简介"></a>IO简介</h2><h3 id="继承结构"><a href="#继承结构" class="headerlink" title="继承结构"></a>继承结构</h3><p>in/out相对于程序而言的输入(读取)和输出(写出)的过程。<br>在Java中，根据处理的数据单位不同，分为字节流和字符流</p><a id="more"></a><h1 id="IO思维导图"><a href="#IO思维导图" class="headerlink" title="IO思维导图"></a><center><strong>IO思维导图</strong></center></h1><br><div class="row">    <embed src="JavaIO.pdf" width="100%" height="550" type="application/pdf"></div> <br><p>java.io包：<br>File</p><ul><li>字节流：针对二进制文件</li></ul><ul><li>InputStream</li></ul><ul><li>–FileInputStream</li><li>–BufferedInputStream</li><li>–ObjectInputStream</li></ul><ul><li>OutputStream</li></ul><ul><li>–FileOutputStream</li><li>–BufferedOutputStream</li><li>–ObjectOutputStream</li></ul><ul><li>字符流：针对文本文件。读写容易发生乱码现象，在读写时最好指定编码集为utf-8</li></ul><ul><li>Writer</li></ul><ul><li>–BufferedWriter</li><li>–OutputStreamWriter</li></ul><ul><li>Reader</li></ul><ul><li>–BufferedReader</li><li>–InputStreamReader</li><li>–PrintWriter/PrintStream</li></ul><h2 id="File文件流"><a href="#File文件流" class="headerlink" title="File文件流"></a>File文件流</h2><ol><li>文件和目录路径名的抽象表示形式。</li><li>创建对象<code>File(String pathname)</code> </li><li>常用方法</li></ol><p><font size="5">文件、文件夹属性</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">length()：文件的字节量<br>exists()：是否存在，存在返回<span class="hljs-keyword">true</span><br>isFile()：是否为文件，是文件返回<span class="hljs-keyword">true</span><br>isDirectory()：是否为文件夹，是文件夹返回<span class="hljs-keyword">true</span><br>getName()：获取文件/文件夹名<br>getParent()：获取父文件夹的路径<br>getAbsolutePath()：获取文件的完整路径<br></code></pre></td></tr></table></figure><p><font size="5">创建、删除</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">createNewFile()：新建文件，文件夹不存在会异常，文件已经存在返回<span class="hljs-keyword">false</span><br>mkdirs()：新建多层不存在的文件夹\a\b\c<br>mkdir()：新建单层不存在的文件夹\a<br>delete()：删除文件，删除空文件夹<br></code></pre></td></tr></table></figure><p><font size="5">文件夹列表</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">list()：返回String[]，包含文件名<br>listFiles()：返回File[]，包含文件对象(常用)<br></code></pre></td></tr></table></figure><p><font size="5">注意!</font></p><p>路径:</p><p>​        绝对路径:一个完整的路径,以盘符为单位:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">"c:\\a.txt"</span><br><span class="hljs-string">"F:\\JavaSe\\javase"</span><br></code></pre></td></tr></table></figure><p>​        相对路径:一个简化的路径,相对指的是相对于当前项目的根目录</p><p>路径不区分大小写,Windows使用的是反斜杠,是转义字符</p><p><font size="5">练习</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//测试File工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01_File</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建File的对象</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps1\\git.txt"</span>);<br>        <span class="hljs-comment">//2.测试工具 调用方法</span><br>        System.out.println(file.length());<span class="hljs-comment">//获取字节量</span><br>        System.out.println(file.exists());<span class="hljs-comment">//判断文件是否存在</span><br>        System.out.println(file.isFile());<span class="hljs-comment">//判断是否是文件</span><br>        System.out.println(file.isDirectory());<span class="hljs-comment">//判断是否是文件夹</span><br>        System.out.println(file.getName());<span class="hljs-comment">//获取文件名</span><br>        System.out.println(file.getParent());<span class="hljs-comment">//获取父类路径</span><br>        System.out.println(file.getAbsolutePath());<span class="hljs-comment">//获取完整路径</span><br><br>        file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps1\\1git.txt"</span>);<br>        System.out.println(file.createNewFile());<span class="hljs-comment">//创建不存在的新文件</span><br><br>        file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps1\\a"</span>);<br>        System.out.println(file.mkdir());<span class="hljs-comment">//创建不存在的文件夹 一级文件夹</span><br>        file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps1\\a\\b\\c"</span>);<br><br>        System.out.println(file.mkdirs());<span class="hljs-comment">//创建不存在的文件夹 多级不存在的文件夹</span><br>        System.out.println(file.delete());<span class="hljs-comment">//删除文件或者空的文件夹</span><br><br>        file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps1"</span>);<br>        String[] list = file.list();<span class="hljs-comment">//列出文件夹下的所有资源</span><br>        System.out.println(Arrays.toString(list));<span class="hljs-comment">//[1git.txt, a, git, ...] 都是资源文件</span><br>        File[] files = file.listFiles();<span class="hljs-comment">//[F:\Downloads\apps1\1git.txt, F:\Downloads\apps1\a,...]列出所有资源</span><br>        System.out.println(Arrays.toString(files));<br><br>        <span class="hljs-comment">//TODO 获取文件夹下的所有资源，判断是文件还是文件夹</span><br>        <span class="hljs-comment">//TODO 递归求目录总大小</span><br>        <span class="hljs-keyword">long</span> size = add(file);<span class="hljs-comment">//使用add方法计算该路径下的文件大小</span><br>        System.out.println(<span class="hljs-string">"文件的大小是:"</span> + size +<span class="hljs-string">"字节"</span>);<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps2"</span>);<br>        delete(file1);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">add</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0L</span>;<span class="hljs-comment">//定义变量储存总大小</span><br>        <span class="hljs-comment">//遍历fs数组，拿到每个资源</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (files[i].isDirectory()) &#123;<span class="hljs-comment">//判断资源是文件夹?</span><br>                sum += add(files[i]);<span class="hljs-comment">//把当前的资源files[i]再求和的过程 -- 在方法里调用方法本身 --  递归</span><br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (files[i].isFile()) &#123;<span class="hljs-comment">//判断资源是文件?</span><br>                sum += files[i].length();<span class="hljs-comment">//如果是文件，直接length求和</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-comment">//删除文件</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(File file)</span></span>&#123;<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; files.length ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (files[i].isFile()) &#123;<span class="hljs-comment">//判断资源是文件?</span><br>                files[i].delete();<span class="hljs-comment">//是文件直接删除</span><br><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (files[i].isDirectory())&#123;<span class="hljs-comment">//判断资源是文件夹?</span><br>                <br>                files[i].delete();<span class="hljs-comment">//在方法里调用方法本身 --  递归</span><br>                delete(files[i]);<span class="hljs-comment">//删除文件</span><br><br>            &#125;<br><br>        &#125;<br>        file.delete();<br><br>    &#125;<br><br>&#125;<br><br>测试结果：<br><span class="hljs-number">40</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br>git.txt<br>F:\Downloads\apps1<br>F:\Downloads\apps1\git.txt<br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br>[<span class="hljs-number">1</span>git.txt, a, git, git.txt, git.txt7, git1.txt, git3.txt, git5.txt, git6.txt, git7.txt, JAVA_API_1<span class="hljs-number">.8</span>_CHS.CHM]<br>[F:\Downloads\apps1\<span class="hljs-number">1</span>git.txt, F:\Downloads\apps1\a, F:\Downloads\apps1\git, F:\Downloads\apps1\git.txt, F:\Downloads\apps1\git.txt7, F:\Downloads\apps1\git1.txt, F:\Downloads\apps1\git3.txt, F:\Downloads\apps1\git5.txt, F:\Downloads\apps1\git6.txt, F:\Downloads\apps1\git7.txt, F:\Downloads\apps1\JAVA_API_1<span class="hljs-number">.8</span>_CHS.CHM]<br>文件的大小是:<span class="hljs-number">128614405</span>字节<br></code></pre></td></tr></table></figure><p>P.S.名称分隔符不能写死,使用File.separator代替分隔符</p><p><font size="5">方法递归</font></p><p>在方法内部调用方法本身,方法递归容易出现死循环,一定要给出口</p><p><img src="/2020/07/06/IO/Func.png" alt="递归"></p><h2 id="读取过程"><a href="#读取过程" class="headerlink" title="读取过程"></a>读取过程</h2><ol><li><p>是指程序需要  从 磁盘 中读取数据进来。简称in的过程。<br><img src="/2020/07/06/IO/different.png" alt="递归"></p></li><li><p>根据操作数据的单位(txt/jpg/mp4)，分为两种读取手段：字节流和字符流。</p></li><li><p>字符流：用来处理文本格式的数据txt，字节流：用来操作电脑里的所有格式的数据。</p></li><li><p>读取的工具类：<br>字节流：InputStream – FileInputStream – BufferedInputStream<br>字符流：Reader – FileReader – BufferedReader</p></li><li><p>字节读取流：InputStream – FileInputStream – BufferedInputStream<br>InputStream：是字节读取流的父类，而且被设计为了抽象类。所以，我们不学习他的new，只学习他的共性方法。<br>常用方法：<br><code>abstract  int read()</code><br>从输入流中读取数据的下一个字节。<br><code>int read(byte[] b)</code><br>从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。<br><code>int read(byte[] b, int off, int len)</code><br>将输入流中最多 len 个数据字节读入 byte 数组。<br><code>void close()</code><br>关闭此输入流并释放与该流关联的所有系统资源。 </p></li></ol><p><code>FileInputStream</code>：<code>FileInputStream</code> 从文件系统中的某个文件中获得输入字节<br><code>FileInputStream(File file)</code><br><code>FileInputStream(String name)</code></p><p><code>BufferedInputStream</code>：为另一个输入流添加一些功能，底层会创建一个内部缓冲区数组。<br><code>BufferedInputStream(InputStream in)</code></p><p>   <font size="5">练习</font></p><p>   字节流读取:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1,从读取效率来讲:BufferedInputStream高级流/缓冲流 &gt; FileInputStream普通流</span><br><span class="hljs-comment"> * 2,BufferedInputStream底层源码战士,为一个byte[],优化了从磁盘中</span><br><span class="hljs-comment"> * 数据读取到流里的过程,把数组读满了,一次性从java程序展示,这个过程中,减少了交互,提高了效率</span><br><span class="hljs-comment"> * 底层维护的数组,默认大小是8192,相当于8*1024字节=8kb,可储存8kb的数据</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_InputStream</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Method();<span class="hljs-comment">// FileInputStream读取</span><br>Method2();<span class="hljs-comment">// BufferedInputStream读取</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 创建多态对象 --参数就是字符串形式的路径名称</span><br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>);<br><span class="hljs-comment">//触发了String类型的构造方法</span><br>InputStream in = <span class="hljs-keyword">new</span> FileInputStream(file);<br><span class="hljs-comment">// 开始读取</span><br><span class="hljs-comment">// 多态对象可以统一调用标准,标准是父类</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">// 定义变量储存read()的值</span><br><span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//把数据从读取流中一个字节一个字节拿到</span><br>System.out.println(b);<br><span class="hljs-comment">//3，当数据读完了，没数据了 还让读 ，有啥后果？-- 永远返回-1</span><br>&#125;<br>in.close();<span class="hljs-comment">//关闭资源</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>InputStream in = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>));<br><span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(b);<br>&#125;<br>in.close();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>字符读取流：<code>Reader</code>– <code>FileReader</code> – <code>BufferedReader</code></p></li><li><p><code>Reader</code>：是字符读取流的抽象  父类，既然是抽象类就不能new，只能学习共性方法<br>常用方法：<br><code>abstract  void close()</code><br>关闭该流并释放与之关联的所有资源。<br><code>int read()</code><br>读取单个字符。<br><code>int read(char[] cbuf)</code><br>将字符读入数组。<br><code>abstract  int read(char[] cbuf, int off, int len)</code><br>将字符读入数组的某一部分。<br><code>int read(CharBuffer target)</code><br>试图将字符读入指定的字符缓冲区。 </p></li><li><p><code>FileReader</code>：学习子类创建对象，用来读取字符文件的便捷类。</p><p>创建对象：<br><code>FileReader(File file)</code><br><code>FileReader(String fileName)</code><br><code>BufferedReader</code>：从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。<br>创建对象：<br><code>BufferedReader(Reader in)</code></p></li></ol><p><font size="5">练习</font></p><p>字符流读取:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exercise;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Reader:是字节流读取流的抽象 父类,既然是抽象类就不能new,只能学习共性方法</span><br><span class="hljs-comment"> * 就读取效率上来说:BufferedReader&gt;FileReader</span><br><span class="hljs-comment"> * 原因是,BufferedReader底层维护了一个字节的缓冲数组,大小为8K</span><br><span class="hljs-comment"> * 把数组堵满了,会给程序一次减少交互的次数</span><br><span class="hljs-comment"> * 提高效率</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Reader</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>method();<span class="hljs-comment">//FileReader读取</span><br>method2();<span class="hljs-comment">//BufferedReader读取</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建多态对象</span><br>Reader in = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>);<br><span class="hljs-comment">//触发String类型的构造方法</span><br><span class="hljs-comment">//Reader in2 = new FileReader(new File("F:\\Downloads\\apps\\git.txt"));</span><br><span class="hljs-comment">//触发File类型的构造方法</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义变量，记录read()的返回值</span><br><span class="hljs-keyword">while</span>((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//没数据了，就永远返回-1</span><br>System.out.println(b);<br>&#125;<br><span class="hljs-comment">//3，释放资源</span><br>in.close();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建多态对象</span><br>Reader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>));<br><span class="hljs-comment">//触发Reader类型的构造方法</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义变量，记录read()的返回值</span><br><span class="hljs-keyword">while</span>((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//没数据了，就永远返回-1</span><br>System.out.println(b);<br>&#125;<br><span class="hljs-comment">//3，释放资源</span><br>in.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符流和字节流的区别"><a href="#字符流和字节流的区别" class="headerlink" title="字符流和字节流的区别"></a>字符流和字节流的区别</h3><p>字符流读写乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(?,”utf-<span class="hljs-number">8</span>”));<br><span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(?,”utf-<span class="hljs-number">8</span>”));<br><span class="hljs-comment">//默认是系统的编码，GBK写出。</span><br><span class="hljs-comment">//如果打开和写出的编码用的表不一致，会造成乱码。</span><br>OutputStreamWriter os = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"encode.txt"</span>),<span class="hljs-string">"utf-8"</span>);   <br>       os.write(<span class="hljs-string">"中国"</span>);<br>       os.flush();<br></code></pre></td></tr></table></figure><h3 id="常见字符编码表"><a href="#常见字符编码表" class="headerlink" title="常见字符编码表"></a>常见字符编码表</h3><table><thead><tr><th align="center">编码</th><th align="center">编码</th><th align="center">编码范围</th><th align="center">字节量</th></tr></thead><tbody><tr><td align="center">ASC-II</td><td align="center">英文,标点,基本指令</td><td align="center">0到127</td><td align="center">单字节</td></tr><tr><td align="center">ISO-8859-1</td><td align="center">ASC-II扩展,西欧字符</td><td align="center">128到255</td><td align="center">单字节</td></tr><tr><td align="center">ANSI,CJK</td><td align="center">ANSI是一种字符编码规范,CJK表示亚洲字符编码的统称(中日韩)</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">GBK</td><td align="center">中国国标码</td><td align="center">最大65535</td><td align="center">英文使用单字节,中文使用双字节</td></tr><tr><td align="center">UNICODE</td><td align="center">统一码Java的char类型字符 就采用Unicode编码</td><td align="center">100万+编码位,分为常用字符表,生僻字符表等,我们只是用常用表</td><td align="center">常用字符表所有字符都采用双字节</td></tr><tr><td align="center">UTF-8</td><td align="center">Unicode传输格式Unicode Transformations Format为了解决Unicode英文字符字节量翻倍的问题,提出的一种变长的编码格式</td><td align="center"></td><td align="center">英文单字节某些字符双字节中文三字节一些特殊符号四字节</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">code</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       String s = <span class="hljs-string">"我爱你中国"</span>;<br>       System.out.println(s.getBytes(<span class="hljs-string">"utf-8"</span>).length);<span class="hljs-comment">//15--unicode/u8一个汉字3字节存储</span><br>       System.out.println(s.getBytes(<span class="hljs-string">"gbk"</span>).length);<span class="hljs-comment">//10--中文双字节</span><br>       System.out.println(s.getBytes(<span class="hljs-string">"unicode"</span>).length);<span class="hljs-comment">//12--双字节+2</span><br>       System.out.println(s.getBytes(<span class="hljs-string">"iso-8859-1"</span>).length);<span class="hljs-comment">//5--单字节</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="IO关流"><a href="#IO关流" class="headerlink" title="IO关流"></a>IO关流</h3><p><code>try(  ){  }catch(){ }</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customBufferStreamCopy</span><span class="hljs-params">(File source, File target)</span> </span>&#123;<br>    InputStream fis = <span class="hljs-keyword">null</span>;<br>    OutputStream fos = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fis = <span class="hljs-keyword">new</span> FileInputStream(source);<br>        fos = <span class="hljs-keyword">new</span> FileOutputStream(target);<br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">while</span> ((i = fis.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            fos.write(buf, <span class="hljs-number">0</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        close(fis);<br>        close(fos);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Closeable closable)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (closable != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            closable.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//上述代码对于异常处理十分复杂，</span><br><span class="hljs-comment">//对于资源的关闭也很麻烦，那么可以和下面的进行对比：</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customBufferStreamCopy</span><span class="hljs-params">(File source, File target)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> (InputStream fis = <span class="hljs-keyword">new</span> FileInputStream(source);<br>        OutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(target))&#123;<br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">while</span> ((i = fis.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            fos.write(buf, <span class="hljs-number">0</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写出过程"><a href="#写出过程" class="headerlink" title="写出过程"></a>写出过程</h2><ol><li><p>是指程序需要  从 Java程序中 写出数据  保存到磁盘。简称out的过程。</p></li><li><p>根据操作数据的单位</p></li><li><p>(txt/jpg/mp4)，分为两种读取手段：字节流和字符流。</p></li><li><p>字符流：用来处理文本格式的数据txt，字节流：用来操作电脑里的所有格式的数据。</p></li><li><p>写出的工具类：<br>字节流：<code>OutputStream</code> – <code>FileOutputStream</code> – <code>BufferedOutputStream</code><br>字符流：<code>Writer</code> – <code>FileWriter</code>  – <code>BufferedWriter</code></p></li><li><p>字节流写出：<code>OutputStream</code> – <code>FileOutputStream</code> – <code>BufferedOutputStream</code><br><code>OutputStream</code>：此抽象类是表示输出字节流的所有类的超类，被修饰成了抽象类，不能new，只能学习共性方法<br>常用方法：<br><code>void close()</code><br>关闭此输出流并释放与此流有关的所有系统资源。<br><code>void flush()</code><br>刷新此输出流并强制写出所有缓冲的输出字节。<br><code>void write(byte[] b)</code><br>将 <code>b.length</code> 个字节从指定的 byte 数组写入此输出流。<br><code>void write(byte[] b, int off, int len)</code><br>将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。<br><code>abstract  void write(int b)</code><br>将指定的字节写入此输出流。<br><code>FileOutputStream</code>：文件输出流<br>创建对象<br><code>FileOutputStream(String name)</code><br><code>FileOutputStream(File file)</code><br><code>FileOutputStream(String name, boolean append)</code><br><code>FileOutputStream(File file, boolean append)</code><br><code>BufferedOutputStream</code>：该类实现缓冲的输出流<br>创建对象<br><code>BufferedOutputStream(OutputStream out)</code> </p></li><li><p>练习</p><p>   字节流写出</p></li></ol><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 字节流写出：OutputStream -- FileOutputStream -- BufferedOutputStream</span><br><span class="hljs-comment"> * 执行效率来讲：BufferedOutputStream  &gt; FileOutputStream</span><br><span class="hljs-comment"> * 原因是:BufferedOutputStream底层维护了一个缓冲数组默认是8K,吧数组里的数据一次性给</span><br><span class="hljs-comment"> * 文件写出，较少交互，提高效率。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_OutputStream</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>method();<span class="hljs-comment">//FileOutputStream写出</span><br>method2();<span class="hljs-comment">//BufferedOutputStream写出</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-comment">//触发String类型的构造方法，默认是数据覆盖模式</span><br>OutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"F:\\Downloads\\apps\\git2.txt"</span>);<br><span class="hljs-comment">//触发File类型的构造方法，默认是数据覆盖模式</span><br><span class="hljs-comment">//OutputStream out2 = new FileOutputStream(new File("F:\\Downloads\\apps\\git2.txt"));</span><br><span class="hljs-comment">//触发String类型的构造方法，数据追加模式</span><br><span class="hljs-comment">//OutputStream out3 = new FileOutputStream("F:\\Downloads\\apps\\git2.txt",true);</span><br><span class="hljs-comment">//写入数据</span><br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-number">97</span>);<br><span class="hljs-comment">//释放资源</span><br>out.close();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建对象</span><br>OutputStream out = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"F:\\Downloads\\apps\\git2.txt"</span>));<span class="hljs-comment">//覆盖</span><br><span class="hljs-comment">//OutputStream out2 = new BufferedOutputStream(new FileOutputStream("F:\\Downloads\\apps\\git2.txt"));</span><br><span class="hljs-comment">//开始写入</span><br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-number">97</span>);<br><span class="hljs-comment">//释放资源</span><br>out.close();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></code></pre><p>字符流写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 执行效率来讲：BufferedWriter &gt; FileWriter</span><br><span class="hljs-comment"> * 原因是：BufferedWriter底层维护了一个缓冲数组默认是8K，一次性向文件中写出多个数据，较少交互，提高效率。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Writer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>method();<span class="hljs-comment">//FileWriter写出</span><br>method2();<span class="hljs-comment">//BufferedWriter写出</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-comment">//覆盖</span><br>Writer out = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"F:\\Downloads\\apps\\git1.txt"</span>);<br><span class="hljs-comment">//Writer out1 = new FileWriter(new File("F:\\Downloads\\apps\\git1.txt"));</span><br><span class="hljs-comment">//追加</span><br><span class="hljs-comment">//Writer out2 = new FileWriter("F:\\Downloads\\apps\\git1.txt",true);</span><br><span class="hljs-comment">//开始写入</span><br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-string">"大家好"</span>);<br><span class="hljs-comment">//释放资源</span><br>out.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-comment">//覆盖</span><br>Writer out = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"F:\\Downloads\\apps\\git1.txt"</span>));<br><span class="hljs-comment">//追加</span><br><span class="hljs-comment">//Writer out2 = new BufferedWriter(new FileWriter("F:\\Downloads\\apps\\git1.txt"));</span><br><span class="hljs-comment">//开始写入</span><br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-string">"大家好"</span>);<br><span class="hljs-comment">//释放资源</span><br>out.close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>IO综合练习</p><p>文件复制</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Copy</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1，接收用户输入的 源文件 路径</span><br>Scanner key = <span class="hljs-keyword">new</span> Scanner(System.in);<br>System.out.println(<span class="hljs-string">"请输入源文件的路径:"</span>);<br>String frompath = key.nextLine();<br>File from = <span class="hljs-keyword">new</span> File(frompath);<br><span class="hljs-comment">//2，接收用户输入的目标文件路径</span><br>System.out.println(<span class="hljs-string">"请输入目标文件的路径"</span>);<br>String topath = key.nextLine();<br>File to = <span class="hljs-keyword">new</span> File(topath);<br><span class="hljs-comment">//3，调用指定方法完成复制</span><br><span class="hljs-comment">//copy(from,to);//使用字节流</span><br>copy2(from,to);<span class="hljs-comment">//使用字符流</span><br>key.close();<br><br>&#125;<br><br><span class="hljs-comment">//字节流复制方法--字节流--什么类型的数据都可以操作</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(File from,File to)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1，读取源文件from -- 字节流BufferedInputStream</span><br>InputStream in = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(from));<br><span class="hljs-comment">//2，写出到目标文件to中 -- 字节流BufferedOutputStream</span><br>OutputStream out = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(to));<br><span class="hljs-comment">//3，边读边写</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义变量,记录读取的数据</span><br><span class="hljs-keyword">while</span> ((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<br>out.write(b);<span class="hljs-comment">//把读到的数据一个字节一个字节的写出</span><br>&#125;<br><span class="hljs-comment">//4,释放资源</span><br>in.close();<br>out.close();<br>System.out.println(<span class="hljs-string">"恭喜您,文件已复制成功!"</span>);<br>&#125;<br><span class="hljs-comment">//字符流  --  真的只能操作 文本文件 ，不能操作 图片音频视频等类型的文件</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy2</span><span class="hljs-params">(File from,File to)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1，读取源文件from -- 字符流BufferedReader</span><br>Reader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(from));<br><span class="hljs-comment">//2，写出到目标文件to中 -- 字符流BufferedWriter</span><br>Writer out = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(to));<br><span class="hljs-comment">//3，边读边写</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义变量b,记录读取的数据</span><br><span class="hljs-keyword">while</span>((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<br>out.write(b);<span class="hljs-comment">//把读取的数据一个字符一个字符的写出</span><br>&#125;<br><span class="hljs-comment">//4,释放资源</span><br>in.close();<br>out.close();<br>System.out.println(<span class="hljs-string">"恭喜您,文件已复制成功!"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​    批量读写(高效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Copy2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 1，接收用户输入的 源文件 路径</span><br>Scanner key = <span class="hljs-keyword">new</span> Scanner(System.in);<br>System.out.println(<span class="hljs-string">"请输入源文件的路径:"</span>);<br>String frompath = key.nextLine();<br>File from = <span class="hljs-keyword">new</span> File(frompath);<br><span class="hljs-comment">// 2，接收用户输入的目标文件路径</span><br>System.out.println(<span class="hljs-string">"请输入目标文件的路径"</span>);<br>String topath = key.nextLine();<br>File to = <span class="hljs-keyword">new</span> File(topath);<br><span class="hljs-comment">// 3，调用指定方法完成复制</span><br><span class="hljs-comment">//copy(from,to);//使用字节流</span><br>copy2(from, to);<span class="hljs-comment">// 使用字符流</span><br>key.close();<br><br>&#125;<br><br><span class="hljs-comment">// 字节流复制方法--字节流--什么类型的数据都可以操作</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(File from, File to)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 1，读取源文件from -- 字节流BufferedInputStream</span><br>InputStream in = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(from));<br><span class="hljs-comment">// 2，写出到目标文件to中 -- 字节流BufferedOutputStream</span><br>OutputStream out = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(to));<br><span class="hljs-comment">// 3，边读边写</span><br><span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 为了优化字节流的单字节读写，可以改成批量读写，按照一个数组的容量去读写</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">// 定义变量,记录读取的数据</span><br><span class="hljs-keyword">while</span> ((b = in.read(buf)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// 优化了单字节读取效率</span><br>out.write(buf, <span class="hljs-number">0</span>, b);<span class="hljs-comment">// 优化了单字节写出效率</span><br>&#125;<br><span class="hljs-comment">// 4,释放资源</span><br>in.close();<br>out.close();<br>System.out.println(<span class="hljs-string">"恭喜您,文件已复制成功!"</span>);<br>&#125;<br><br><span class="hljs-comment">// 字符流 -- 真的只能操作 文本文件 ，不能操作 图片音频视频等类型的文件</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy2</span><span class="hljs-params">(File from, File to)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 1，读取源文件from -- 字符流BufferedReader</span><br>Reader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(from));<br><span class="hljs-comment">// 2，写出到目标文件to中 -- 字符流BufferedWriter</span><br>Writer out = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(to));<br><span class="hljs-comment">// 3，边读边写</span><br><span class="hljs-comment">//目前是一个字符一个字符的读写，为了优化单个字符的读写效率，我们也可以批量读写，如果是字符流，维护一个字符数组</span><br><span class="hljs-keyword">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">8</span> * <span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<span class="hljs-comment">// 定义变量b,记录读取的数据</span><br><span class="hljs-keyword">while</span> ((b = in.read(buf)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//优化成一个数组一个数组的读</span><br>out.write(buf, <span class="hljs-number">0</span>, b);<br><span class="hljs-comment">//第一个参数是指要写出哪个数组里的数据，</span><br><span class="hljs-comment">//第二参数是指从数组的哪个位置开始写出数据</span><br><span class="hljs-comment">//第三个参数是指要写出的数据长度</span><br>&#125;<br><span class="hljs-comment">// 4,释放资源</span><br>in.close();<br>out.close();<br>System.out.println(<span class="hljs-string">"恭喜您,文件已复制成功!"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化-反序列化："><a href="#序列化-反序列化：" class="headerlink" title="序列化 / 反序列化："></a>序列化 / 反序列化：</h2><p>常用于多台服务器之间进行java对象的数据传递</p><ol><li>序列化：是指把 程序中准备好的 java对象 永久的保存在磁盘中，这个过程其实是一个        out动作。<br><code>ObjectOutputStream</code>：通过在流中使用文件可以实现对象的持久存储。<br>创建对象<br><code>ObjectOutputStream(OutputStream out)</code><br>常用方法<br><code>void writeObject(Object obj)</code><br>将指定的对象写入 <code>ObjectOutputStream</code>。</li><li>反序列化：是指 把磁盘中已经序列化好的文件  读取到程序中，恢复成java对象的动作，是        一个in的过程。<br><code>ObjectInputStream</code>：对以前使用 <code>ObjectOutputStream</code> 写入的基本数据和对象进行反序列化。<br>创建对象<br><code>ObjectInputStream(InputStream in)</code><br>常用方法<br><code>Object readObject()</code><br>从 <code>ObjectInputStream</code> 读取对象。</li></ol><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">//测试序列化,反序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_ObjIn_ObjOut</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>seria();<span class="hljs-comment">// 序列化</span><br>deseria();<span class="hljs-comment">// 反序列化</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seria</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1，创建对象</span><br>ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"F:\\Downloads\\apps\\stu.txt"</span>));<br><span class="hljs-comment">//2，完成序列化-- java.io.NotSerializableException</span><br>Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"张三"</span>, <span class="hljs-number">20</span>);<br>out.writeObject(stu);<br><span class="hljs-comment">//3，释放资源</span><br>out.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deseria</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br><span class="hljs-comment">//1，创建对象</span><br>ObjectInputStream in = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"F:\\Downloads\\apps\\stu.txt"</span>));<br><span class="hljs-comment">//2，完成反序列化</span><br>Object obj = in.readObject();<br>System.out.println(obj);<br><span class="hljs-comment">//3，释放资源</span><br>in.close();<br>&#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 需要序列化的文件必须实现Serializable接口以启用其序列化功能</span><br><span class="hljs-comment"> * 不需要序列化的数据可以被修饰为static的，由于static属于类，不随对象被序列化输出。</span><br><span class="hljs-comment"> * 不需要序列化的数据也可以被修饰为transient临时的，只在程序运行期间，在内存中存在不会被序列化持久保存。</span><br><span class="hljs-comment"> * 在反序列化时，如果和序列化的版本号不一致时，无法完成反序列化。</span><br><span class="hljs-comment"> * 每个被序列化的文件都有一个唯一id，如果没有添加编译器会根据类的定义信息计算产生一个版本号。</span><br><span class="hljs-comment"> * 常用于服务器之间的数据传输，序列化成文件，反序列化读取数据。</span><br><span class="hljs-comment"> * 常用于使用套接字流在主机之间传递对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>String name;<br><span class="hljs-keyword">int</span> age;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"Student [name="</span> + name + <span class="hljs-string">", age="</span> + age + <span class="hljs-string">"]"</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编码转换流"><a href="#编码转换流" class="headerlink" title="编码转换流"></a>编码转换流</h2><ol><li>转换流  专门  用来  把字节流  转成  字符流。是一个字节和字符流的转换桥梁。</li><li><code>InputStreamReader</code>  –  把 字节读取流转成 字符读取流，继承自Reader。<br>创建对象<br><code>InputStreamReader(InputStream in)</code><br>`InputStreamReader(InputStream in, String charsetName) ``</li><li><code>OutputStreamWriter</code>  –  把 字节写出流转成 字符写出流，继承自Writer。<br>创建对象<br><code>OutputStreamWriter(OutputStream out)</code><br><code>OutputStreamWriter(OutputStream out, String charsetName)</code></li><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io_exercise;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_Encoding</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>out();<span class="hljs-comment">//测试 OutputStreamWriter</span><br>in();<span class="hljs-comment">//测试 InputStreamReader</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1， 创建对象  -- 参数是字节流InputStream类型</span><br>Reader in = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>));<br><span class="hljs-comment">//2，读取数据</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((b=in.read())!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(b);<br>&#125;<br><span class="hljs-comment">//3，释放资源</span><br>in.close();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1， 创建对象  -- 参数是字节流OutputStream类型</span><br><span class="hljs-comment">//Writer out = new OutputStreamWriter(  new FileOutputStream("F:\\Downloads\\apps\\git.txt")  );//使用了默认的平台码，编码表</span><br><span class="hljs-comment">//Writer out = new OutputStreamWriter(  new FileOutputStream("F:\\Downloads\\apps\\git.txt"),"ISO-8859-1"  );//乱码</span><br>Writer out = <span class="hljs-keyword">new</span> OutputStreamWriter(  <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"F:\\Downloads\\apps\\git.txt"</span>),<span class="hljs-string">"gbk"</span>  );<span class="hljs-comment">//解决乱码，修改编码</span><br><span class="hljs-comment">//2，写出数据</span><br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-number">97</span>);<br>out.write(<span class="hljs-string">"大家好"</span>);<br><span class="hljs-comment">//3，释放资源</span><br>out.close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> mind </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mind </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Class 反射</title>
      <link href="/2020/06/23/Reflect/"/>
      <url>/2020/06/23/Reflect/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Reflection(反射) 是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序对自身进行检查，或者说“自审”，也有称作“自省”。反射非常强大，它甚至能直接操作程序的私有属性。我们前面学习都有一个概念，private的只能类内部访问，外部是不行的，但这个规定被反射赤裸裸的打破了。</p><p>反射就像一面镜子，它可以在运行时获取一个类的所有信息，可以获取到任何定义的信息（包括成员变量，成员方法，构造器等），并且可以操纵类的字段、方法、构造器等部分。</p><h2 id="为什么需要反射"><a href="#为什么需要反射" class="headerlink" title="为什么需要反射"></a>为什么需要反射</h2><p>类不是你创建的，此时你要或得这个类的底层功能调用，就需要反射技术实现</p><a id="more"></a><h2 id="Class-Class"><a href="#Class-Class" class="headerlink" title="Class Class"></a>Class Class<T></T></h2><h3 id="继承自java-lang-Object，可以使用Object的所有方法"><a href="#继承自java-lang-Object，可以使用Object的所有方法" class="headerlink" title="继承自java.lang.Object，可以使用Object的所有方法"></a>继承自<code>java.lang.Object</code>，可以使用Object的所有方法</h3><p>Class类的类表示正在运行的Java应用程序中的类和接口。 枚举是一种类，一个注释是一种界面。 每个数组也属于一个反映为类对象的类，该对象由具有相同元素类型和维数的所有数组共享。 原始Java类型（ boolean ， byte ， char ， short ， int ， long ， float和double ），和关键字void也表示为类对象。 </p><h2 id="反射Class类对象"><a href="#反射Class类对象" class="headerlink" title="反射Class类对象"></a>反射Class类对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">Class.forName(“类的全路径”);<br>类名.class<br>对象.getClass();<br></code></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><font color="red">获得包名、类名</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">clazz.getPackage().getName()&#x2F;&#x2F;包名<br>clazz.getSimpleName()&#x2F;&#x2F;类名<br>clazz.getName()&#x2F;&#x2F;完整类名<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">   private static void method() throws ClassNotFoundException &#123;<br>       System.out.println(Class.forName(&quot;cn.tedu.day19.Student&quot;));<br>       System.out.println(Student.class);<br>       Student stu &#x3D; new Student();<br>       System.out.println(stu.getClass());<br>       System.out.println(Student.class.getPackage());&#x2F;&#x2F;获取包名<br>       System.out.println(Student.class.getSimpleName());&#x2F;&#x2F;获取类名<br>       System.out.println(stu.getClass().getName());&#x2F;&#x2F;获取全路径<br>       <br>   &#125;<br><br>&#x2F;&#x2F;打印结果是:<br>&#x2F;&#x2F;class cn.tedu.day19.Student<br>&#x2F;&#x2F;class cn.tedu.day19.Student<br>&#x2F;&#x2F;class cn.tedu.day19.Student<br>&#x2F;&#x2F;package cn.tedu.day19<br>&#x2F;&#x2F;Student<br>&#x2F;&#x2F;cn.tedu.day19.Student<br></code></pre></td></tr></table></figure><p><font color="red"><code>getClass()</code>的返回值是一个类&lt;?&gt;[]，每一个.class文件被jvm加载后，会在jvm中创建一个类型为Class类型的对象来表示这份字节码，你可以通过类名.class获取这个Class类型的对象，例如String.class，也可以通过类对象.getClass()方法来获取，例如obj.getClass（）</font></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> Reflect </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java API 基础1</title>
      <link href="/2020/06/22/Api/"/>
      <url>/2020/06/22/Api/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-API-基础1"><a href="#Java-API-基础1" class="headerlink" title="Java API 基础1"></a>Java API 基础1</h2><h3 id="本文中包含API相关思维导图和课堂笔记整理"><a href="#本文中包含API相关思维导图和课堂笔记整理" class="headerlink" title="本文中包含API相关思维导图和课堂笔记整理"></a>本文中包含API相关思维导图和课堂笔记整理</h3><a id="more"></a><h1 id="API思维导图"><a href="#API思维导图" class="headerlink" title="API思维导图"></a><center><strong>API思维导图</strong></center></h1><br><div class="row">    <embed src="APIse.pdf" width="100%" height="550" type="application/pdf"></div> <br><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ol><li>概念<br>类 Object 是类层次结构的根类。每个类都使用 Object 作为超类。所有对象（包括数组）都实现这个类的方法。</li><li>常用方法:见API手册<br><code>String toString()</code>返回该对象的字符串表示。<br><code>int hashCode()</code>返回该对象的哈希码值。<br><code>Class&lt;?&gt; getClass()</code> 返回此 Object 的运行时类。<br><code>boolean equals(Object obj)</code>指示其他某个对象是否与此对象“相等”。 </li><li>练习</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class Test_Object &#123;<br>    public static void main(String[] args) &#123;<br>        &#x2F;&#x2F;2, 创建Student对象<br>        Student s &#x3D; new Student(&quot;jack&quot;,20);<br>        System.out.println( s.getAge() );&#x2F;&#x2F;使用了自己的功能<br>        System.out.println( s.getName() );&#x2F;&#x2F;使用了自己的功能<br><br>        System.out.println(  s.hashCode() ); &#x2F;&#x2F;使用了父类Object的功能,计算对象在内存中的哈希码值1704856573<br>        System.out.println(  s.toString() ); &#x2F;&#x2F;使用了父类Object的功能,返回对象在内存中的地址值,cn.tedu.api.Student@659e0bfd<br><br>        &#x2F;&#x2F;3, 打印s时,你想显示地址值,而是想显示对象的属性值<br>        &#x2F;&#x2F;默认展示了地址值cn.tedu.api.Student@659e0bfd,为什么?--因为底层帮你调用了Object提供的toString(),Object就是打印地址值<br>        &#x2F;&#x2F;重写toString()  --- 就可以展示重写后的方法体.也就是可以展示属性值<br>        System.out.println(s);&#x2F;&#x2F;Student [name&#x3D;jack, age&#x3D;20]<br><br>        Class c &#x3D; s.getClass() ;<br>        System.out.println(c);&#x2F;&#x2F;class cn.tedu.api.Student<br><br>        Student s2 &#x3D; new Student(&quot;jack&quot;,20);<br>        &#x2F;&#x2F;4, 比较s对象和s2对象是否相等,默认使用了Object提供的equals()---使用&#x3D;&#x3D;比较<br>        &#x2F;&#x2F;&#x3D;&#x3D; 比较基本类型的变量时,直接比值本身. 比较引用类型的变量时,比的是地址值<br>        boolean flag &#x3D; s.equals(s2) ;<br>        System.out.println(flag);&#x2F;&#x2F;false,比较引用类型的变量时,比的是地址值<br><br>        &#x2F;&#x2F;5, 不要比较两个对象间的地址值,而是,比较两个对象间的属性值,<br>        &#x2F;&#x2F;如果属性都一样,让两个对象比较完是相等的,也就是让equals()返true--重写equals()<br>    &#125;<br>&#125;<br>&#x2F;&#x2F;1, 所有的类 , 都默认继承自Object , 也就是Object这个父类里的功能 , 可以被任何类使用 !!<br>class Student extends Object&#123;<br>    &#x2F;&#x2F;构造方法 source-倒数第三个-ok<br>    public Student() &#123;  &#125;<br>    public Student(String name, int age) &#123;<br>        super();<br>        this.name &#x3D; name;<br>        this.age &#x3D; age;<br>    &#125;<br>    &#x2F;&#x2F;封装属性<br>    private String name;<br>    private int age;<br><br>    &#x2F;&#x2F;set()&#x2F;get()  -  source-getters and setters-select all-ok<br>    public String getName() &#123;<br>        return name;<br>    &#125;<br>    public void setName(String name) &#123;<br>        this.name &#x3D; name;<br>    &#125;<br>    public int getAge() &#123;<br>        return age;<br>    &#125;<br>    public void setAge(int age) &#123;<br>        this.age &#x3D; age;<br>    &#125;<br>    &#x2F;&#x2F;4, Object里默认提供的toString() 的实现方式是显示对象的地址值,我不想要这个效果,想显示对象的属性值--重写toString()<br>    &#x2F;&#x2F;source- 倒数第四个-ok<br>    @Override<br>    public String toString() &#123;<br>        return &quot;Student [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age + &quot;]&quot;;<br>    &#125;<br>    &#x2F;&#x2F;5.1, 现在比较两个对象,是根据Object提供的默认的比较方式,也就是比较两个对象间的地址值.<br>    &#x2F;&#x2F;能不能按照对象间的属性值比较,如果两个对象的属性完全都一样,就让两个对象相等,让equals()返回true<br>    @Override<br>    public boolean equals(Object obj) &#123;<br>        &#x2F;&#x2F;不一样就返回false<br>        if (this &#x3D;&#x3D; obj)<br>            return true;<br>        if (obj &#x3D;&#x3D; null)<br>            return false;<br>        if (getClass() !&#x3D; obj.getClass())<br>            return false;<br>        &#x2F;&#x2F;目的就是拿着两个对象的属性值比较<br>        &#x2F;&#x2F;统一类型,如果参数是个学生类型,咱两比.不是同一类型的学生都没有可比性!!<br>        Student other &#x3D; (Student) obj;<br>        if (age !&#x3D; other.age)<br>            return false;<br>        if (name &#x3D;&#x3D; null) &#123;<br>            if (other.name !&#x3D; null)<br>                return false;<br>        &#125; else if (!name.equals(other.name))<br>            return false;<br>        &#x2F;&#x2F;如果属性一样,就返回true<br>        return true;<br>    &#125;<br>&#125;<br>测试结果：<br>20<br>jack<br>460141958<br>Student [name&#x3D;jack, age&#x3D;20]<br>Student [name&#x3D;jack, age&#x3D;20]<br>class cn.tedu.day16.Student<br>true<br></code></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>与基本类型的对应关系</p><table><thead><tr><th align="left">基本类型</th><th align="left">包装类型</th><th align="left">父类</th></tr></thead><tbody><tr><td align="left">int</td><td align="left">Integer</td><td align="left">java.long.Number</td></tr><tr><td align="left">long</td><td align="left">Long</td><td align="left">java.long.Number</td></tr><tr><td align="left">short</td><td align="left">Short</td><td align="left">java.long.Number</td></tr><tr><td align="left">float</td><td align="left">Float</td><td align="left">java.long.Number</td></tr><tr><td align="left">double</td><td align="left">Double</td><td align="left">java.long.Number</td></tr><tr><td align="left">byte</td><td align="left">Byte</td><td align="left">java.long.Number</td></tr><tr><td align="left">char</td><td align="left">Character</td><td align="left">java.long.Object</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td><td align="left">java.long.Object</td></tr></tbody></table><p>包装类是不可变类，在构造了包装类对象后，不允许改包装类在其中的值<br>包装类是final的，不能定义他们的子类<br>Number数字包装类的抽象父类。<br>子类：<br><img src="/2020/06/22/Api/image008.png" alt="子类"></p><p>常用的方法：</p><p>提供了各种获取值的方式，已经完成了强转。<br><img src="/2020/06/22/Api/image009.png" alt="method"></p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p>创建对象<br><code>new Integer(5)</code>;新建对象<br><code>Integer.valueOf(5);</code><br>在<code>Integer</code>类中，包含256个<code>Integer</code>缓存对象，范围是 -128到127。<br>使用<code>valueOf()</code>时，如果指定范围内的值，访问缓存对象，而不新建；如果指定范围外的值，直接新建对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">Integer a &#x3D; new Integer(5);&#x2F;&#x2F;创建对象<br>Integer b &#x3D; Integer.valueOf(5);&#x2F;&#x2F;读取缓存<br>Integer c &#x3D; Integer.valueOf(5);&#x2F;&#x2F;读取缓存<br>System.out.println(b&#x3D;&#x3D;c);&#x2F;&#x2F;true<br>System.out.println(a&#x3D;&#x3D;b);&#x2F;&#x2F;false<br>System.out.println(a.equals(b));&#x2F;&#x2F;true<br></code></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">parseInt();字符串转换成int<br>toBinaryString();把整数转换成2进制数据<br>toOctalString();把整数转换成8进制数据<br>toHexString();把整数转换成16进制数据<br></code></pre></td></tr></table></figure><h3 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h3><p>创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">new Double(3.14)<br>Double.valueOf(3.14)&#x2F;&#x2F;和 new 没有区别<br></code></pre></td></tr></table></figure><p>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Double.parseDouble();<br></code></pre></td></tr></table></figure><h2 id="String练习"><a href="#String练习" class="headerlink" title="String练习"></a>String练习</h2><ol><li>源码摘抄:</li></ol><ul><li>–String是最终的类,不能被继承<br><code>public final class String</code>  </li><li>–String底层维护一个char[],数组长度不能改.而且是final的,数组的值也不能被修改.— 也就是说字符串是个常量,一旦定义不能修改.<br><code>private final char value[];</code></li></ul><ol start="2"><li>创建对象<br><code>String(char[] value)</code><br>分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。</li><li>常用方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">char charAt(int index) <br>          返回指定索引处的 char 值。 <br>String concat(String str) <br>          将指定字符串连接到此字符串的结尾。 <br>boolean contains(CharSequence s) <br>          当且仅当此字符串包含指定的 char 值序列时，返回 true。 <br>boolean endsWith(String suffix) <br>          测试此字符串是否以指定的后缀结束。 <br>boolean equals(Object anObject) <br>          将此字符串与指定的对象比较。 <br>byte[] getBytes() <br>int indexOf(String str) <br> 返回指定子字符串在此字符串中第一次出现处的索引。<br>int lastIndexOf(String str) <br>          返回指定子字符串在此字符串中最右边出现处的索引。 <br>boolean isEmpty() <br>          当且仅当 length() 为 0 时返回 true。 <br>int length() <br>          返回此字符串的长度。<br>String replace(char oldChar, char newChar) <br>          返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 <br>String[] split(String regex) <br>          根据给定正则表达式的匹配拆分此字符串。 <br>boolean startsWith(String prefix) <br>          测试此字符串是否以指定的前缀开始。 <br>String substring(int beginIndex) <br>          返回一个新的字符串，它是此字符串的一个子字符串。 <br>String substring(int beginIndex, int endIndex) <br>          返回一个新字符串，它是此字符串的一个子字符串。 <br>char[] toCharArray() <br>          将此字符串转换为一个新的字符数组。 <br>String toLowerCase() <br>          使用默认语言环境的规则将此 String 中的所有字符都转换为小写。 <br>String toUpperCase() <br>          使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 <br>String trim() <br>          返回字符串的副本，忽略前导空白和尾部空白。<br>static String valueOf(int i) <br>          返回 int 参数的字符串表示形式。<br></code></pre></td></tr></table></figure><ol start="4"><li>练习</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs plain">    public static void main(String[] args) &#123;<br>        &#x2F;&#x2F;1, 字符串底层维护了一个char[]  , 而且是final的,也就是数组长度不能改,数组里的值也不能改,----字符串是一个常量 !!<br>        char[] c &#x3D; new char[]&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;;<br>        String s &#x3D; new String(c);  &#x2F;&#x2F;  触发char[]类型的含参构造--存在了堆内存中<br><br>        String str &#x3D; &quot;abc&quot;;  &#x2F;&#x2F;  直接赋值,存在堆内存中的常量池中--高效--因为常量池的相同数据,只会存一次<br>        String str2 &#x3D; &quot;abc&quot;;<br>        System.out.println(str2 &#x3D;&#x3D; str);&#x2F;&#x2F;true, 相同数据,拥有相同的存储空间,内存中就是相同的地址值<br>        System.out.println(s &#x3D;&#x3D; str);&#x2F;&#x2F;false, 在堆里的地址值,str在常量池的地址值,不相同<br><br>        &#x2F;&#x2F;2,常用方法<br>        System.out.println(s.charAt(1)); &#x2F;&#x2F; 根据下标获取对应的字符<br>        System.out.println(s.concat(&quot;123&quot;));&#x2F;&#x2F;在字符串的末尾处拼接自定字符串<br>        System.out.println(s.contains(&quot;bc&quot;));&#x2F;&#x2F;判断是否包含指定的字符串<br>        System.out.println(s.endsWith(&quot;c&quot;));&#x2F;&#x2F;判断字符串 是否以指定后缀 结尾<br>        System.out.println(s.equals(&quot;abc&quot;));&#x2F;&#x2F;判断字符是 是否 与指定的字符串  相等<br>        System.out.println(s.indexOf(&quot;a&quot;));&#x2F;&#x2F;获取指定字符串在s出现的第一次的下标值<br><br>        s &#x3D; &quot;abca&quot;;<br>        System.out.println(s.lastIndexOf(&quot;a&quot;));&#x2F;&#x2F;获取指定字符串在s出现的最后一次的下标值<br>        System.out.println(s.isEmpty());&#x2F;&#x2F;判断字符串是否为空<br>        System.out.println(s.length());&#x2F;&#x2F;获取字符串的长度<br>        System.out.println(s.replace(&#39;a&#39;, &#39;0&#39;));&#x2F;&#x2F;把旧字符用新字符替换 , 0bc0<br>        System.out.println(s.startsWith(&quot;ab&quot;));&#x2F;&#x2F;判断是否以指定字符串开始<br>        System.out.println(s.substring(1));&#x2F;&#x2F;从指定下标处开始,截取所有字符串<br>        System.out.println(s.substring(0, 2));&#x2F;&#x2F;从指定下标开始,到指定下标结束,截取中间段[0,2)--含头不含尾<br>        System.out.println(s.toLowerCase());&#x2F;&#x2F;自动转成小写<br>        System.out.println(s.toUpperCase());&#x2F;&#x2F;自动转成大写<br><br>        s &#x3D; &quot;   ab  ca    &quot;;<br>        System.out.println(s.trim());&#x2F;&#x2F;去除前导空格和后面空格<br><br>        String num &#x3D; String.valueOf(123);&#x2F;&#x2F;用来把各种类型的数据  转成 String类型<br>        System.out.println(num + 1);&#x2F;&#x2F;1231<br><br>        System.out.println(&quot;------字符串转数组------&quot;);<br>        byte[] bs &#x3D; s.getBytes();&#x2F;&#x2F;把字符串的数据放入byte[]里<br>        System.out.println(Arrays.toString(bs));<br><br>        char[] cs &#x3D; s.toCharArray(); &#x2F;&#x2F;把字符串的数据放入char[]里<br>        System.out.println(Arrays.toString(cs));<br><br>        s &#x3D; &quot;a0b0c0&quot;;<br>        String[] ss &#x3D; s.split(&quot;0&quot;);&#x2F;&#x2F;按照指定的规则切割字符串<br>        System.out.println(Arrays.toString(ss));&#x2F;&#x2F;[a, b, c]<br><br>    &#125;<br><br>测试结果：<br>true<br>false<br>b<br>abc123<br>true<br>true<br>true<br>0<br>3<br>false<br>4<br>0bc0<br>true<br>bca<br>ab<br>abca<br>ABCA<br>ab  ca<br>1231<br>------字符串转数组------<br>[32, 32, 32, 97, 98, 32, 32, 99, 97, 32, 32, 32, 32]<br>[ ,  ,  , a, b,  ,  , c, a,  ,  ,  ,  ]<br>[a, b, c]<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h2 id="StringBuilder-StringBuffer"><a href="#StringBuilder-StringBuffer" class="headerlink" title="StringBuilder/StringBuffer"></a>StringBuilder/StringBuffer</h2><ol><li>源码摘抄:</li></ol><ul><li>是<code>final</code>的类,不可以被继承<br><code>public final class StringBuilder</code></li><li>底层仍然像String一样,维护了一个char[] ,只不过值可以随时被修改<br><code>char[] value;</code></li></ul><ol start="2"><li>这两个工具类,专门用来优化  字符串的拼接 操作</li><li>创建对象<br><code>StringBuilder()</code><br>构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。</li><li>常用方法<br><code>StringBuilder append(String str)</code><br>将指定的字符串追加到此字符序列。</li><li>练习 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_StringBuffer</span> </span>&#123;<br>    <span class="hljs-comment">//测试 字符串拼接优化的工具类  StringBuilder /StringBuffer</span><br>    <span class="hljs-comment">//总结:</span><br>    <span class="hljs-comment">//1, String通过+拼接字符串效率低,但是就两三次无所谓</span><br>    <span class="hljs-comment">//2, 如果有大量的字符串拼接需求,建议使用工具类 StringBuilder /StringBuffer</span><br>    <span class="hljs-comment">//3, StringBuilder /StringBuffer 都是用来在原有数据基础上  追加指定的拼接内容 , 拼接内容的数据类型非常丰富</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method();//先用普通方式+拼接字符串</span><br>        method2();<span class="hljs-comment">//使用工具类优化拼接效率</span><br>    &#125;<br><br>    <span class="hljs-comment">//将指定的字符串拼接10000次</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        String s = <span class="hljs-string">"abcdefghijkmnopqrstuvwxyz"</span>;<br><br>        <span class="hljs-comment">//1,创建工具类对象</span><br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-comment">//StringBuilder sb = new StringBuilder();</span><br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<span class="hljs-comment">//获取系统时间,计时开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            sb.append(s); <span class="hljs-comment">//2, 工具 拼接字符串</span><br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<span class="hljs-comment">//计时结束</span><br><br>        System.out.println(end - start);<span class="hljs-comment">//时间差 1ms</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//将指定的字符串拼接10000次</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        String s = <span class="hljs-string">"abcdefghijkmnopqrstuvwxyz"</span>;<br>        String res = <span class="hljs-string">""</span>;<span class="hljs-comment">//定义变量,记录拼接的结果</span><br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<span class="hljs-comment">//获取系统时间,计时开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            res = res + s; <span class="hljs-comment">//+ 拼接字符串</span><br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<span class="hljs-comment">//计时结束</span><br><br>        System.out.println(end - start);<span class="hljs-comment">//时间差 2149ms</span><br>    &#125;<br>&#125;<br><br>测试结果<br>method用时很长<br>method使用了StringBuffer进行拼接，速度非常快<br></code></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="日期工具SimpleDateFormat"><a href="#日期工具SimpleDateFormat" class="headerlink" title="日期工具SimpleDateFormat"></a>日期工具SimpleDateFormat</h3><ol><li>SimpleDateFormat 是一个以与语言环境有关的方式来格式化和解析日期的具体类。它允许进行格式化（日期 -&gt;     文本）、解析（文本 -&gt; 日期）和规范化。 SimpleDateFormat 使得可以选择任何用户定义的日期-时间格式的    模式。</li><li>创建对象<br><code>SimpleDateFormat(String pattern)</code><br>用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat。</li><li>常用方法<br><code>String format(Date date)</code>把Date类型的日期格式化成文本类型<br><code>Date parse(String text )</code>解析字符串的文本，生成 Date</li><li>练习</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException, ParseException </span>&#123;<br><span class="hljs-comment">//生存XX天</span><br>        String birth = <span class="hljs-keyword">new</span> Scanner(System.in).nextLine();<span class="hljs-comment">//接收用户输入的字符串</span><br>        SimpleDateFormat s = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);<span class="hljs-comment">//创建SimpleDateFormat类型的对象使用有参构造，年月日</span><br>        Date date = s.parse(birth);<span class="hljs-comment">//把字符串类型的日期  转成  Date类型 y表示年 M表示月 d表示日</span><br>        <span class="hljs-keyword">long</span> birthday = date.getTime();<span class="hljs-comment">//获取到出生日期对应的毫秒值</span><br>        <span class="hljs-keyword">long</span> now = System.currentTimeMillis();<span class="hljs-comment">//获取当前的系统时间的毫秒值</span><br>        System.out.println((now - birthday) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>);<span class="hljs-comment">//计算存活天数  ms-&gt;天</span><br>    &#125;<br>测试结果：<br><span class="hljs-number">1992</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span><br><span class="hljs-number">10118</span><br></code></pre></td></tr></table></figure><p>BigDecimal/BigInteger</p><ol><li>BigDecimal常用来做浮点数运算不精确的解决方案.可以把以前的+-*/的运算,<br>优化成两个对象间的运算</li><li>创建对象<br><code>BigDecimal(double val)</code> – 有坑,别用<br><code>BigDecimal(String val)</code> – 建议使用这个</li><li>常用方法<br>加法运算–<code>BigDecimal add(BigDecimal augend)</code><br>减法运算–<code>BigDecimal subtract(BigDecimal subtrahend)</code><br>乘法运算–<code>BigDecimal multiply(BigDecimal multiplicand)</code><br>除法运算–<code>BigDecimal divide(BigDecimal divisor)</code><br><code>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code>除不尽的时候使用 </li><li>练习</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    method();<span class="hljs-comment">//暴露精确问题</span><br>    method2();<span class="hljs-comment">//BigDecimal解决精确问题</span><br>&#125;<br>    <span class="hljs-comment">//暴露精确问题</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1, 接收用户输入的两个小数</span><br>    <span class="hljs-keyword">double</span> a = <span class="hljs-keyword">new</span> Scanner(System.in).nextDouble();<br>    <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">new</span> Scanner(System.in).nextDouble();<br><br>    <span class="hljs-comment">//2, 做运算</span><br>    System.out.println(a + b);<span class="hljs-comment">//不精确</span><br>    System.out.println(a - b);<span class="hljs-comment">//不精确</span><br>    System.out.println(a * b);<span class="hljs-comment">//不精确</span><br>    System.out.println(a / b);<span class="hljs-comment">//不精确</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> a = <span class="hljs-keyword">new</span> Scanner(System.in).nextDouble();<br>    <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">new</span> Scanner(System.in).nextDouble();<br><br>    <span class="hljs-comment">//1, 创建对象</span><br>    BigDecimal bd1 = <span class="hljs-keyword">new</span> BigDecimal(a + <span class="hljs-string">""</span>);<br>    BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(b + <span class="hljs-string">""</span>);<br><br>    <span class="hljs-comment">//2, 优化运算过程</span><br>    BigDecimal bd3;<br><br>    bd3 = bd1.add(bd2);<span class="hljs-comment">//加法运算add</span><br>    System.out.println(bd3);<br><br>    bd3 = bd1.subtract(bd2);<span class="hljs-comment">//减法运算subtract</span><br>    System.out.println(bd3);<br><br>    bd3 = bd1.multiply(bd2);<span class="hljs-comment">//乘法运算multiply</span><br>    System.out.println(bd3);<br><br>    <span class="hljs-comment">//bd3 = bd1.divide(bd2) ;//除法运算divide,除不尽会抛出异常java.lang.ArithmeticException:</span><br>    <span class="hljs-comment">//第二个参数是保留的小数位数,第三个参数是舍入模式:四舍五入</span><br>    bd3 = bd1.divide(bd2, <span class="hljs-number">5</span>, BigDecimal.ROUND_HALF_UP);<br>    System.out.println(bd3);<br><br>&#125;<br><br>测试结果：<br><span class="hljs-comment">//method</span><br><span class="hljs-number">12.12</span><span class="hljs-comment">//输入double类型的小数</span><br><span class="hljs-number">21.21</span><span class="hljs-comment">//输入double类型的小数</span><br><span class="hljs-number">33.33</span><span class="hljs-comment">//加不精确</span><br>-<span class="hljs-number">9.090000000000002</span><span class="hljs-comment">//减不精确</span><br><span class="hljs-number">257.0652</span><span class="hljs-comment">//乘不精确</span><br><span class="hljs-number">0.5714285714285714</span><span class="hljs-comment">//乘除不精确</span><br><span class="hljs-comment">//method2</span><br><span class="hljs-number">12.12</span><span class="hljs-comment">//输入double类型的小数</span><br><span class="hljs-number">21.21</span><span class="hljs-comment">//输入double类型的小数</span><br><span class="hljs-number">33.33</span><span class="hljs-comment">//加</span><br>-<span class="hljs-number">9.09</span><span class="hljs-comment">//减</span><br><span class="hljs-number">257.0652</span><span class="hljs-comment">//乘</span><br><span class="hljs-number">0.57143</span><span class="hljs-comment">//乘保留小数点后5位四舍五入</span><br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> mind </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mind </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加访问统计</title>
      <link href="/2020/06/22/Statistic/"/>
      <url>/2020/06/22/Statistic/</url>
      
        <content type="html"><![CDATA[<h2 id="Tips-前导必备"><a href="#Tips-前导必备" class="headerlink" title="Tips:前导必备"></a>Tips:前导必备</h2><ul><li>注意备份所有修改过的文件</li><li>教程针对使用的是<code>yilia</code>主题</li><li>访问量统计使用<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a><a id="more"></a></li></ul><h2 id="1、配置是否开启不蒜子访问量统计功能"><a href="#1、配置是否开启不蒜子访问量统计功能" class="headerlink" title="1、配置是否开启不蒜子访问量统计功能"></a>1、配置是否开启不蒜子访问量统计功能</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>themes/yilia/_config.yml</code>添加属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 是否开启访问量统计功能(不蒜子)<br>busuanzi:<br> enable: true<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/config.jpg" alt="config"></p><h2 id="2、引入不蒜子并添加站点访问量"><a href="#2、引入不蒜子并添加站点访问量" class="headerlink" title="2、引入不蒜子并添加站点访问量"></a>2、引入不蒜子并添加站点访问量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在themes/yilia/layout/_partial/footer.ejs末尾添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;<br>        &lt;!-- 不蒜子统计 --&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;<br>                本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次<br>        &lt;&#x2F;span&gt;<br>        &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot; style&#x3D;&#39;display:none&#39;&gt;<br>                本站访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人<br>        &lt;&#x2F;span&gt;<br>        &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;<br>  &lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/footer.jpg" alt="footer"></p><h2 id="3、添加文章访问量"><a href="#3、添加文章访问量" class="headerlink" title="3、添加文章访问量"></a>3、添加文章访问量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>themes/yilia/layout/_partial/post/date.ejs</code>开头添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt;<br>        &lt;!-- 不蒜子统计 --&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:none&#39; class&#x3D;&quot;&lt;%&#x3D; class_name %&gt;&quot;&gt;<br>              &lt;i class&#x3D;&quot;icon-smile icon&quot;&gt;&lt;&#x2F;i&gt; 阅读数：&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;次<br>        &lt;&#x2F;span&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/date.jpg" alt="date"></p><ul><li>重启即可查看效果</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mind</title>
      <link href="/2020/06/22/Javaoop/"/>
      <url>/2020/06/22/Javaoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><a id="more"></a><h2 id="Java类及类的成员"><a href="#Java类及类的成员" class="headerlink" title="Java类及类的成员"></a>Java类及类的成员</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类和对象的使用：<br>创建类，设计类的成员<br>创建类的对象<br>通过“对象.属性”、”对象.方法”的方式调用</p><ul><li><p>类：对一类事物的描述，是抽象、概念上的定义</p><ul><li><p>可以通过final、abstract修饰</p><ul><li><p>final修饰</p><ul><li>final修饰的类不能被其他的类所继承（其中的方法全为final的方法）</li></ul></li><li><p>abstract修饰 </p><ul><li>此类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li></ul></li></ul></li></ul></li><li><p>对象：实际存在的该类事物的个体（实例）</p><p>面向对象的程序设计的重点就是设计类<br>设计类就是设计类的成员</p><ul><li>每一个实例haul的对象都独立的拥有一套类的属性，意味着我们修改一个对象的属性值a，不会影响另一个对象的a的值（static修饰的除外）</li><li>通过”对象.属性”、”对象.方法”的方式调用</li></ul></li></ul><h3 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h3><ul><li><p>属性</p><p>①默认初始化<br> ②显式初始化/⑤在代码块中赋值<br> ③构造器中初始化<br> ④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值<br>执行的先后顺序：① - ② / ⑤ - ③ - ④</p><p>显示初始化和代码块中赋值是同等地位的，谁先谁后就看在代码中的顺序关系了</p><ul><li><p>属性可以被final、static等修饰</p><ul><li><p>final修饰属性</p><ul><li>可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</li></ul></li><li><p>static修饰属性</p><ul><li>静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</li><li>静态变量的加载要早于对象的创建</li><li>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中</li><li>我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的</li></ul></li></ul></li><li><p>属性 vs 局部变量</p><ul><li><p>相同点</p><ul><li>格式：（看情况添加修饰）数据类型 变量名 = 变量值</li><li>先声明后使用（必须初始化后才能使用）</li><li>都有其对应的作用域</li></ul></li><li><p>不同点</p><ul><li><p>在类中声明位置不同</p><ul><li>属性直接定义在类的{}中</li><li>局部变量定义在方法体、构造器、形参、代码块</li></ul></li><li><p>关于权限修饰符的不同</p><ul><li>属性可以使用如public等的权限修饰符而局部变量不行</li></ul></li><li><p>默认初始化的情况</p><ul><li>属性：数值类型的默认初始化为0\0.0，boolean类型的为false，引用类型的为null</li><li>局部变量：没有默认初始化，意味着在使用前要显示初始化值</li></ul></li><li><p>在内存中加载的位置</p><ul><li>属性加载到堆区（非static），局部变量在栈区</li></ul></li><li><p>局部变量不能用static修饰</p></li></ul></li></ul></li></ul></li><li><p>方法</p><ul><li><p>格式：权限修饰符 （修饰词） 返回值类型（形参列表）方法名{ 方法体 }</p></li><li><p>方法可以被static、final、abstract修饰</p><ul><li><p>static修饰方法</p><ul><li>可以通过”类名.”的方式调用，也可通过对象调用</li><li>被static修饰是静态方法，随着类的加载而加载，在方法中只能调用static方法和属性，不能出现this、super关键字（因为这些都是和对象有关，而静态方法的加载早于对象的创建）</li></ul></li><li><p>final修饰的方法不能够被重写</p></li><li><p>abstract修饰方法 </p><ul><li>抽象方法只方法的声明，没方法体</li><li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的</li><li>若子类重写了父类中的所有的抽象方法后，此子类方可实例化 、若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li></ul></li></ul></li><li><p>方法的重载</p><ul><li>同一个类（或子类中）中允许存在一个及多个同名的方法，只要他们的参数列表不同（参数个数，参数类型不同），这些方法之间构成了重载</li><li>方法的签名（方法名和形参列表）要不同，和方法的权限修饰符、返回值类型、方法体、形参变量名无关</li><li>方法名—&gt;参数列表，可以确定一个方法</li></ul></li><li><p>方法的重写 </p><ul><li><p>子类继承父类后，可以在子类中定义与父类同名同参的方法进行覆盖操作（privat、static、final修饰的不行）</p></li><li><p>重写主要是为了多态，实现地址晚绑定的操作</p></li><li><p>重写的注意事项</p><ul><li>子类重写的方法的权限修饰符不小于父类中被重写的权限修饰符（子类不能重写父类中声明为private的方法）</li><li>父类中被重写的方法的返回值为void，则子类重写的方法的返回值类型也为void</li><li>父类中被重写的方法的返回值类型为A类型，则子类重写的方法的返回值类为A类型或者A类型的子类（子类是针对A类型是一个类类型而言的）</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li><li>子类和父类中同名同参的方法要么都是static或者都是非static的，非static的是重写，static的不是重写</li></ul></li></ul></li><li><p>Java中参数传递机制：值传递机制</p></li><li><p>递归方法</p><ul><li>一个方法体内，自己调用自己（一定要朝着已知方向递归，不然就会无穷递归）</li></ul></li></ul></li><li><p>构造器</p><ul><li><p>构造器的作用</p><ul><li>创建对象</li><li>初始化对象信息</li></ul></li><li><p>使用说明</p><ul><li>如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li><li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li><li>定义构造器的格式：权限修饰符  类名(形参列表){}</li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一个类中，至少会有一个构造器</li></ul></li><li><p>内部第一行为this(…)或super(…)</p><p>创建一个子类对象，必须先初始化父类对象（即先调用父类的构造器，这也是为什么this(…)和super(…)只能放在首行的原因）</p><p>当子类继承父类后，就继承了父类中所有的属性和方法，那么子类有必要知道父类如何为对象初始化！那就要先调用父类的构造器才行!</p><ul><li><p>this</p><ul><li>我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li><li>构造器中不能通过”this(形参列表)”方式调用自己（无穷递归了）</li><li>如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行，故只能有一个</li></ul></li><li><p>super</p><ul><li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li><li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li><li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</li><li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li><li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li></ul></li></ul></li></ul></li><li><p>代码块</p><ul><li><p>用来初始类和对象的信息</p></li><li><p>static代码块</p><ul><li>内部可以输出语句</li><li>随着类的加载而执行,而且只执行一次</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul></li><li><p>非static代码块</p><ul><li>内部可以输出语句</li><li>随着对象的创建而执行</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul></li><li><p>总结子类和父类中加载个模块的顺序：由父及子，静态先行</p></li></ul></li><li><p>内部类</p><ul><li><p>概述”：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</p></li><li><p>成员内部类</p><ul><li><p>static</p><ul><li><p>创建内部类的对象方式：外部类.内部类 引用名 = new 外部类.内部类()；</p><p>//创建静态的Dog内部类的实例(静态的成员内部类):<br>Person.Dog dog = new Person.Dog();</p></li><li><p>内部类内部调用外部类的结构</p><ul><li>内部类成员直接调，如在方法中有相同的名称的形参就可以加上this</li><li>外部类的成员 外部类名.this.的方式调用</li></ul></li></ul></li><li><p>非static</p><ul><li><p>因为是非static只能通过外部类的对象类创建：外部类.内部类 引用名 = 外部类对象.new 内部类() </p><p>//创建非静态的Bird内部类的实例(非静态的成员内部类):<br>//Person.Bird bird = new Person.Bird();//错误的<br>Person p = new Person();<br>Person.Bird bird = p.new Bird();</p></li><li><p>static只能调用外部类静态的结构，非static静态和非静态的都能调用</p></li></ul></li></ul></li><li><p>局部内部类</p><ul><li>主要的应用就是返回一个实现了一个接口的实现类的对象</li><li>某个方法中有内部类并且在内部类中方法中调用了该方法中的属性，则该属性为final修饰的</li></ul></li><li><p>成员内部类和局部内部类在编译以后都会生成字节码文件</p><p>格式：成员内部类：外部类$内部类名.class</p><pre><code>局部内部类：外部类$数字 内部类名.class</code></pre></li></ul></li></ul><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><ul><li><p>封装性的引入：隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想</p></li><li><p>简单的体现：讲类中的属性设置为private权限的并提供公共的(设置)setXxx和（获取）getXxx方法来操作该属性</p></li><li><p>灵活的使用四种权限修饰符来修饰属性、方法、构造器、内部类已达到隐藏的目的</p></li><li><p>单例模式（主要将构造器声明为private，使得外部不能创建对象，需要static配合）</p><ul><li><p>概述：所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</p></li><li><p>饿汉式1</p><ul><li>内部有一个静态的本类的对象并显示初始化了，并通过方法返回</li></ul></li><li><p>饿汉式2</p><ul><li>内部有一个静态的本类的对象放在静态代码块中初始化了，并通过方法返回</li></ul></li><li><p>懒汉式</p><ul><li>内部有一个静态的本类的对象并显示置为null，在返回的时候判定是否为空（空就创建），然后返回（线程不安全）</li></ul></li></ul></li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li><p>关键字extends</p></li><li><p>如果没有显示指定父类，默认继承与java.lang.Object类</p></li><li><p>好处</p><ul><li>减少代码的冗余，提高代码的复用性</li><li>便于功能的拓展</li><li>为之后多态性的使用，提供了前提</li></ul></li><li><p>格式：class A extends B{}</p></li><li><p>说明</p><ul><li>一旦子类继承了父类就继承了父类中的所有的属性和方法（构造器不能够被继承），由于权限的影响虽然继承了父类中private的方法，但是子类不能调用</li><li>子类继承父类后还可定义自己特定的结构，实现对父类功能的拓展</li><li>Java的单继承性：一个类只能有一个直接父类</li><li>子父类的概念是相对的</li><li>子类直接继承的称为直接父类，间接继承的称为间接父类</li><li>子类继承父类后所有的间接父类的属性和方法都会继承</li></ul></li><li><p>子类对象实例化全过程</p><ul><li>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用</li><li>创建一个子类对象，必须先初始化父类对象</li></ul></li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><ul><li><p>可以理解为一种事物的多种形态</p></li><li><p>多态性依赖于类的继承、方法的重写</p></li><li><p>多态性的使用：虚拟方法调用</p><ul><li><p>父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p></li><li><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><ul><li><p>向下转型</p><ul><li>当调用的方法是子类型中特有的，父类型中不存在，必须进行向下转换</li><li>为了解决编译时只能调用父类中有的结构，要使用向下转型（强制类型转换）</li><li>Father f1 = new Son();   // 这就叫 upcasting （向上转型)<br>// 现在 f1 引用指向一个Son对象</li></ul></li></ul></li></ul></li></ul><p>Son s1 = (Son)f1;   // 这就叫 downcasting (向下转型)<br>// 现在f1 还是指向 Son对象<br>            - instanceof 运算符，返回值是boolean类型，用于判断左边的对象与右边的类，当左边的对象是右边类或者子类所创建的对象时，返回值true，否则返回false<br>            - instanceof使用：new A()，赋给一个A或A的父类引用 x ，那么 x instanceof A及A的父类都是返回true</p><pre><code>- 编译看左边，运行看右边（适用于方法）- 对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</code></pre><ul><li><p>多态性的概念也可以被说成“一个接口，多个方法”。</p><ul><li>java实现运行时多态性的基础是动态方法调度</li><li>它是一种在运行时而不是在编译期调用重载方法的机制</li></ul></li></ul><h2 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h2><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul><li>使用在方法中</li><li>作用：结束方法；针对有返回值的方法，返回所要的数据</li><li>注意事项：在return后不能声明执行语句（因为不能被执行到，会报错）</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li><p>可以调用方法、属性、构造器</p><ul><li><p>通常情况下调用方法和属性都省略不写</p></li><li><p>属性</p><ul><li>主要是为了解决在方法和构造器中的形参和类的属性名同名，为了区分它们可以在类的属性前加this（非static）</li></ul></li><li><p>方法</p><ul><li>通常省略</li></ul></li><li><p>构造器</p><ul><li>详细见构造器中描述</li></ul></li></ul></li><li><p>this是非静态结构的隐式参数</p></li><li><p>this可以理解为：当前对象（非静态方法） 或 当前正在创建对象（构造器来说）</p></li></ul><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ul><li><p>使用说明</p><ul><li>JDK1.2开始不能使用以java开头命名的包</li><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用package声明类或接口所属的包，声明在源文件的首行</li><li>包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li><li>每”.”一次，就代表一层文件目录</li></ul></li><li><p>不同功能的类分包存放</p><ul><li>MVC设计模式</li></ul></li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li><p>为了方便使用写好的类（不导入就好写全名）</p></li><li><p>不同于C++的include（include是不包头文件怎么都不能用，Java不导入写全名也行）</p></li><li><p>使用说明</p><ul><li>在源文件中显式的使用import结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出即可</li><li>使用”xxx.*”方式表明可以调用xxx包下的所结构（这里指的是类，不包含子包下的类）。但是如果使用的是xxx子包下的结构，则仍需要显式导入</li><li>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</li><li>如果使用的类或接口是本包下定义的，则可以省略import结构</li><li>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示</li><li>import static:导入指定类或接口中的静态结构:属性或方法。 （类.*号的时候并不要求这个类中所有的方法全是静态的，只是会导入这个类中所有的静态方法）</li></ul></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li><p>可以调用属性、方法、构造器</p></li><li><p>当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性</p></li><li><p>当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法</p></li><li><p>调用构造器</p><ul><li>详细见构造器中</li></ul></li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>推荐这几篇博客：<br><a href="https://blog.csdn.net/yabay2208/article/details/71171207" target="_blank" rel="noopener">https://blog.csdn.net/yabay2208/article/details/71171207</a><br><a href="https://blog.csdn.net/qq_36522306/article/details/80584595?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_36522306/article/details/80584595?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>这个是JVM说类的加载，学了之后可以看看：<br><a href="https://github.com/LuVx21/doc/blob/master/source/_posts/03.Java/02.jvm/00.JVMClassLoader.md#%E5%8F%82%E8%80%83" target="_blank" rel="noopener">https://github.com/LuVx21/doc/blob/master/source/_posts/03.Java/02.jvm/00.JVMClassLoader.md#%E5%8F%82%E8%80%83</a></p><ul><li><p>可以修饰属性、方法、代码块、内部类</p><ul><li>详细见各个模块中</li></ul></li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li><p>可以修饰类、方法、变量（详细见各个模块）</p><ul><li>修饰类，该类不能被继承，类中的方法为final</li><li>修饰方法，该方法不能被重写</li><li>修饰后变成常量了，要初始化</li></ul></li></ul><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><ul><li>可以修饰类和方法（详细见各个模块）</li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><ul><li>详细见接口</li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="Object类是所有类的根父类"><a href="#Object类是所有类的根父类" class="headerlink" title="Object类是所有类的根父类"></a>Object类是所有类的根父类</h3><h3 id="如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类"><a href="#如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类" class="headerlink" title="如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类"></a>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</h3><h3 id="Object类中的功能（属性、方法）具有通用性"><a href="#Object类中的功能（属性、方法）具有通用性" class="headerlink" title="Object类中的功能（属性、方法）具有通用性"></a>Object类中的功能（属性、方法）具有通用性</h3><pre><code>属性：无方法：equals() / toString() / getClass() / hashCode() / clone() / finalize() / wait() / notify() / notifyAll()</code></pre><h3 id="Object类中只声明了一个空参的构造器"><a href="#Object类中只声明了一个空参的构造器" class="headerlink" title="Object类中只声明了一个空参的构造器"></a>Object类中只声明了一个空参的构造器</h3><h2 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h2><h3 id="为了使基本数据类型的变量具有类的特征，引入包装类"><a href="#为了使基本数据类型的变量具有类的特征，引入包装类" class="headerlink" title="为了使基本数据类型的变量具有类的特征，引入包装类"></a>为了使基本数据类型的变量具有类的特征，引入包装类</h3><h3 id="包装类和基本数据类型对应"><a href="#包装类和基本数据类型对应" class="headerlink" title="包装类和基本数据类型对应"></a>包装类和基本数据类型对应</h3><ul><li>Byte</li><li>Short</li><li>Integer</li><li>Long</li><li>Float</li><li>Double</li><li>Boolean</li><li>Character</li></ul><h3 id="基本数据类型、包装类、String三者转换"><a href="#基本数据类型、包装类、String三者转换" class="headerlink" title="基本数据类型、包装类、String三者转换"></a>基本数据类型、包装类、String三者转换</h3><ul><li>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱</li><li>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx) </li><li>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</li><li>转换时，可能会报NumberFormatException</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>Vector类中关于添加元素，只定义了形参为Object类型的方法：<br>v.addElement(Object obj);   //基本数据类型 —&gt;包装类 —&gt;使用多态</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="使用interface关键字定义"><a href="#使用interface关键字定义" class="headerlink" title="使用interface关键字定义"></a>使用interface关键字定义</h3><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul><li><p>Java中，接口和类是并列的两个结构</p></li><li><p>结构</p><ul><li><p>属性：用public static final修饰的</p></li><li><p>方法：public abstract修饰的</p></li><li><p>静态方法</p><ul><li>只能通过接口名调用</li></ul></li><li><p>默认方法</p><ul><li><p>实现类中可以调用接口中默认方法</p></li><li><p>一旦实现类重写了接口中默认方法，就会调用重写的方法</p></li><li><p>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则</p></li><li><p>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突（如果继承了父类中也有这个同名同参的方法，就不会冲突）</p></li><li><p>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p><ul><li>父类：super.</li><li>接口：接口名.super.</li></ul></li></ul></li></ul></li><li><p>接口中不能定义构造器的！意味着接口不可以实例化</p></li><li><p>Java开发中，接口通过让类去实现(implements)的方式来使用（类似抽象方法）</p></li><li><p>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</p><ul><li>格式：class AA extends BB implements CC,DD,EE</li></ul></li><li><p>接口与接口之间可以继承，而且可以多继承</p></li><li><p>接口的具体使用，体现多态性，接口实际上可以看成是一种规范</p></li></ul><h3 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h3><ul><li><p>接口使用上也满足多态性</p></li><li><p>接口，实际上就是定义了一种规范</p></li><li><p>开发中，体会面向接口编程！</p><ul><li>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个<br>数据库厂商的API</li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>代理模式</li><li>工厂的设计模式</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> mind </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人blog搭建教程</title>
      <link href="/2020/06/22/hexo/"/>
      <url>/2020/06/22/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。"><a href="#hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。" class="headerlink" title="hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。"></a>hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</h1><a id="more"></a><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><h2 id="Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。"><a href="#Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。" class="headerlink" title="Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</h2><h2 id="教程分三个部分，"><a href="#教程分三个部分，" class="headerlink" title="教程分三个部分，"></a>教程分三个部分，</h2><h3 id="第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。"><a href="#第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。" class="headerlink" title="第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。"></a>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</h3><h3 id="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流"><a href="#第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流" class="headerlink" title="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流"></a>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</h3><h3 id="第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。"><a href="#第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。" class="headerlink" title="第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。"></a>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</h3><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。"><a href="#hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。" class="headerlink" title="hexo的初级搭建还有部署到github page上，以及个人域名的绑定。"></a>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</h3><h2 id="Hexo简介-1"><a href="#Hexo简介-1" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li><font size="5">1. 安装Git</font></li><li><font size="5">2. 安装Node.js</font></li><li><font size="5">3. 安装Hexo</font></li><li><font size="5">4. GitHub创建个人仓库</font></li><li><font size="5">5. 生成SSH添加到GitHub</font></li><li><font size="5">6. 将hexo部署到GitHub</font></li><li><font size="5">7. 设置个人域名</font></li><li><font size="5">8. 发布文章</font></li></ul><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码<br>我这里使用的ubuntu18.04</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@VM-0-2-ubuntu:&#x2F;opt&#x2F;blog# cat &#x2F;proc&#x2F;version<br>Linux version 4.15.0-88-generic (buildd@lgw01-amd64-036) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)) #88-Ubuntu SMP Tue Feb 11 20:11:34 UTC 2020<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code>来查看一下版本</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2.安装nodejs"></a>2.安装nodejs</h2><p>Hexo是基于nodejs编写的，所以需要安装一下nodeJs和里面的npm工具。<br>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了。<br>linux系统可以通过nvm安装管理nodejs<br>nvm全名node.js version management，顾名思义是一个nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs<br>可以去<a href="https://github.com/nvm-sh/nvm#installation" target="_blank" rel="noopener">nvm官方介绍</a>了解详细<br><font size="4">1、安装</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.31.1&#x2F;install.sh | bash   (推荐)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.31.1&#x2F;install.sh | bash<br></code></pre></td></tr></table></figure><p>之后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;<br>[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot; # This loads nvm<br>source ~&#x2F;.bashrc(就可以立刻加载修改后的设置，使之生效。)<br></code></pre></td></tr></table></figure><p><font size="4" color="red">遇到的问题：</font><br>克隆github项目出现SSL connect error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone https:&#x2F;&#x2F;github.com&#x2F;creationix&#x2F;nvm     <br>Cloning into &#39;nvm&#39;...<br>fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;creationix&#x2F;nvm&#x2F;&#39;: SSL connect error<br></code></pre></td></tr></table></figure><p><font size="4">原因</font><br>ssl证书可能过期了，一般出现在contos较多<br><font size="4">解决办法</font><br>contos使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">yum update -y nss curl libcurl<br></code></pre></td></tr></table></figure><p><font size="4">2、安装node</font><br>用nvm安装node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">nvm install 12我这里选择了较新的版本，也可以选择相对稳定的10<br>nvm alias default 12.18.0设置默认版本<br>或者可以通过<br>nvm install stable安装较稳定的版本<br>nvm alias default [版本号]<br>node -v查看当前node版本<br>npm -v<br></code></pre></td></tr></table></figure><p>如果重新启动或者断开中断后无法使用node命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">nvm use [版本号]切换到相应版本 版本号不用写v<br>node -v再次查看是否正确<br>npm -v<br></code></pre></td></tr></table></figure><p>检查一下有没有安装成功<br>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。<br>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install -g hexo-cli全局安装hexo<br></code></pre></td></tr></table></figure><p>依旧用<code>hexo -v</code>查看一下版本<br>至此就全部安装完了。<br>接下来初始化一下hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo init myblog这里的myblog可以输入任意字符，就是为了建立一个文件夹放我们blog<br></code></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd myblog &#x2F;&#x2F;进入这个myblog文件夹<br>npm install&#x2F;&#x2F;安装 Node.js 所需依赖<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**<br><img src="/2020/06/22/hexo/dir.jpg" alt="目录截图"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g&#x2F;&#x2F;生成静态页面<br>hexo server开启hexo服务<br></code></pre></td></tr></table></figure>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。<br>大概长这样<br><img src="/2020/06/22/hexo/blog.jpg" alt="blog截图"><br>我这里是装了主题了:)<br>使用ctrl+c可以把服务关掉。<h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2></li></ul><p>首先，你先要有一个GitHub账户，去注册一个吧。<br>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img src="/2020/06/22/hexo/git1.jpg" alt="git"></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="/2020/06/22/hexo/git2.jpg" alt="git2"></p><p>点击create repository。</p><h2 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h2><p>回到你的git bash中，(终端或者打开git bash)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.name &quot;yourname&quot;&#x2F;&#x2F;你的github用户名<br>git config --global user.email &quot;youremail&quot;&#x2F;&#x2F;可以输入注册邮箱<br></code></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh-keygen -t rsa -C &quot;youremail&quot;&#x2F;&#x2F;一直回车<br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p><img src="/2020/06/22/hexo/sshkey.jpg" alt="ssh"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat id_rsa.pub<br></code></pre></td></tr></table></figure><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="/2020/06/22/hexo/sshkey2.jpg" alt="ssh"></p><p>在gitbash中，查看是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h2 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h2><p>虽然我们可以通过<code>hexo s</code>启动服务，通过IP访问，或者域名解析到IP，但是谁用一直占用这一台电脑24小时开着呢<br>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo clean<br>hexo generate<br>hexo deploy<br>这些我们都可以进行简写<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>其中:<br><code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code>顾名思义，生成静态文章，可以用<code>hexo g</code>缩写<br><code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。<br>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code>这个网站看到你的博客了！！</p><p><img src="/2020/06/22/hexo/git3.jpg" alt="git3"></p><h2 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7.设置个人域名"></a>7.设置个人域名</h2><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。<br>注册一个阿里云账户,在阿里云上买一个域名，我买的是<code>fate-seeker.com</code>，各个后缀的价格不太一样,看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p><img src="/2020/06/22/hexo/url.jpg" alt="url"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="/2020/06/22/hexo/url2.jpg" alt="url"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>最后，在gitbash中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new newpapername<br></code></pre></td></tr></table></figure><p>就可以看到更新了。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h1 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1.hexo基本配置"></a>1.hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方的配置</a>描述。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>title</code></td><td align="center">网站标题</td></tr><tr><td align="center"><code>subtitle</code></td><td align="center">网站副标题</td></tr><tr><td align="center"><code>description</code></td><td align="center">网站描述</td></tr><tr><td align="center"><code>author</code></td><td align="center">您的名字</td></tr><tr><td align="center"><code>language</code></td><td align="center">网站使用的语言</td></tr><tr><td align="center"><code>timezone</code></td><td align="center">网站副标题</td></tr><tr><td align="center"><code>subtitle</code></td><td align="center">网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>url</code></td><td align="center">网址</td></tr><tr><td align="center"><code>root</code></td><td align="center">文章的<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>格式</td></tr><tr><td align="center"><code>permalink</code></td><td align="center">网站描述</td></tr><tr><td align="center"><code>permalink_defaults</code></td><td align="center">永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。<br><code>permalink</code>，也就是你生成某个文章时的那个链接格式。<br>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。<br>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>。<br>| 参数 | 描述 |<br>| :—–:| :—–:|<br>| <code>:year/:month/:day/:title/</code> | 2013/07/14/hello-world |<br>| <code>:year-:month-:day-:title.html</code> | 2013-07-14-hello-world.html |<br>| <code>:category/:title</code> | foo/bar/hello-world |</p><p>再往下翻，中间这些都默认就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">theme: landscape<br><br># Deployment<br>## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html<br>deploy:<br>  type: git<br>  repo: &lt;repository url&gt;<br>  branch: [branch]<br></code></pre></td></tr></table></figure><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">title: Hello World<br>date: 2013&#x2F;7&#x2F;13 20:46:25<br>---<br></code></pre></td></tr></table></figure><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>layout</code></td><td align="center">布局</td></tr><tr><td align="center"><code>title</code></td><td align="center">标题</td></tr><tr><td align="center"><code>date</code></td><td align="center">建立日期</td></tr><tr><td align="center"><code>updated</code></td><td align="center">更新日期</td></tr><tr><td align="center"><code>comments</code></td><td align="center">开启文章的评论功能</td></tr><tr><td align="center"><code>tags</code></td><td align="center">标签（不适用于分页）</td></tr><tr><td align="center"><code>categories</code></td><td align="center">分类（不适用于分页）</td></tr><tr><td align="center"><code>permalink</code></td><td align="center">覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo,Bar</code> 不等于 <code>Bar,Foo</code>；而标签没有顺序和层次。</p><h2 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h2><p>当你每一次使用代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new paper<br></code></pre></td></tr></table></figure><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="center">布局</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center"><code>post</code></td><td align="center"><code>source/_posts</code></td></tr><tr><td align="center"><code>page</code></td><td align="center"><code>source</code></td></tr><tr><td align="center"><code>draft</code></td><td align="center"><code>source/_drafts</code></td></tr></tbody></table><p>而new这个命令其实是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>只不过这个layout默认是post罢了。</p><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><p>如果你想另起一页，那么可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new page board<br></code></pre></td></tr></table></figure><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>board</code>文件夹，以及<code>board</code>文件夹中的index.md，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h2 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h2><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new draft newpage<br></code></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo server --draft<br></code></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo publish draft newpage<br></code></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h1 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">戳我戳我</a><br>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>主题，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。<br>但是next总会用出问题（可能是不会用吧）<br>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下就行了，然后再在刚才说的配置文件中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题。<br>而后进入<code>theme</code>文件夹，可以看到里面也有一个配置文件<code>_config.xml</code>，貌似它默认是<code>_config.xml.example</code>，把它复制一份，重命名为<code>_config.xml</code>就可以了。这个配置文件是修改你整个主题的配置文件。</p><h2 id="menu（菜单栏）"><a href="#menu（菜单栏）" class="headerlink" title="menu（菜单栏）"></a>menu（菜单栏）</h2><p>也就是上面菜单栏上的这些东西。<br>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new page about<br></code></pre></td></tr></table></figure><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。<br>如果你想要自己再自定义一个菜单栏的选项，那么就</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new page yourdiy<br></code></pre></td></tr></table></figure><p>然后在主题配置文件的<code>menu</code>菜单栏添加一个<code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。</p><h2 id="customize-定制"><a href="#customize-定制" class="headerlink" title="customize(定制)"></a>customize(定制)</h2><p>在这里可以修改你的个人logo，在<code>source/css/images</code>文件夹中放入自己要的logo，再改一下<code>url</code>的链接名字就可以了。</p><p><code>favicon</code>是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p><code>social_links</code> ，可以显示你的社交链接，而且是有logo的。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h2><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中comment是评论系统，common是常规的布局，最常修改的在这里面，比如修改页面head和footer的内容。</li><li>scripts：js脚本，暂时没什么用(确实不会)</li><li>source：里面放了一些css的样式，以及图片</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周杰伦【官方MV】Mojito - 周杰伦</title>
      <link href="/2020/06/22/mv/"/>
      <url>/2020/06/22/mv/</url>
      
        <content type="html"><![CDATA[<h2 id="周杰伦【官方MV】Mojito-周杰伦"><a href="#周杰伦【官方MV】Mojito-周杰伦" class="headerlink" title="周杰伦【官方MV】Mojito - 周杰伦"></a>周杰伦【官方MV】Mojito - 周杰伦</h2><p>转自bilibili @大家的音乐姬</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=883409884&bvid=BV1PK4y1b7dt&cid=201056987&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> mv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第三天笔记</title>
      <link href="/2020/06/22/String/"/>
      <url>/2020/06/22/String/</url>
      
        <content type="html"><![CDATA[<h2 id="String类："><a href="#String类：" class="headerlink" title="String类："></a>String类：</h2><h3 id="String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。"><a href="#String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。" class="headerlink" title="String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。"></a>String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。</h3><a id="more"></a><p>String字符串变量的创建：</p><p>声明：    　String 变量名;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">　　　　　　　　　String str;<br></code></pre></td></tr></table></figure><p>声明并初始化：　　String 变量名=”初始值”;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str &#x3D; &quot;挨点博客&quot;;<br></code></pre></td></tr></table></figure><p>String常用方法：</p><p>　　1、int length();　　语法：字符串变量名.length();　　返回值为 int 类型。得到一个字符串的字符个数（中、英、空格、转义字符皆为字符，计入长度）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String a&#x3D;&quot;挨点aidian \t\n&quot;;<br>        int l &#x3D; a.length();<br>        System.out.println(l);<br><br>运行结果：11<br></code></pre></td></tr></table></figure><p>2、char charAt(值);　　语法 ：字符串名.charAt(值);　　返回值为 char 类型。从字符串中取出指定位置的字符 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　String str&#x3D;&quot;张三疯&quot;;<br>        char c &#x3D; str.charAt(2);  <br>        System.out.println(&quot;指定字符为：&quot; + c); <br><br>运行结果：指定字符为：疯<br></code></pre></td></tr></table></figure><p>3、char  toCharArray();　　语法 ：字符串名.toCharArray();　　返回值为 char 数组类型。将字符串变成一个字符数组 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str&#x3D;&quot;张三疯&quot;；<br>char c[] &#x3D; str.toCharArray(); <br>for (int i &#x3D; 0; i &lt; c.length; i++)<br>System.out.println(&quot;转为数组输出:&quot; + c[i]);<br><br>　　　　　　运行结果：<br><br>转为数组输出:张<br>转为数组输出:三<br>转为数组输出:疯<br></code></pre></td></tr></table></figure><p>　4、int indexOf(“字符”)　　语法 ：字符串名.indexOf(“字符”)；字符串名.indexOf(“字符”,值)；查找一个指定的字符串是否存在，返回的是字符串的位置，如果不存在，则返回-1 。 </p><p>　　　　in lastIndexOf(“字符”) 得到指定内容最后一次出现的下标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str&#x3D;&quot;只为挨你近一点&quot;;<br>int a1 &#x3D; str.indexOf(&quot;你&quot;);&#x2F;&#x2F; 查找字符你的位置 <br>int a2 &#x3D; str.indexOf(&quot;为&quot;, 2);&#x2F;&#x2F; 查找为的位置，从第3个开始查找<br>int a3 &#x3D; str.lastIndexOf(&quot;点&quot;); <br>System.out.println(&quot;你的位置为:&quot; + a1); <br>System.out.println(&quot;为的位置为:&quot; + a2);<br>System.out.println(&quot;点最后出现的位置为:&quot; + a3);<br><br>运行结果：<br><br>你的位置为:3<br><br>为的位置为:-1<br><br>点最后出现的位置为:7<br></code></pre></td></tr></table></figure><p>5、toUpperCase()；  toLowerCase()；字符串大小写的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str&#x3D;&quot;hello world&quot;;<br>System.out.println(&quot;将字符串转大写为：&quot; + str.toUpperCase());<br>System.out.println(&quot;将字符串转换成小写为：&quot; + str.toUpperCase().toLowerCase());<br><br>运算结果：<br><br>将字符串转大写为：HELLO WORLD<br>将字符串转换成小写为：hello world<br></code></pre></td></tr></table></figure><p>6、String[] split(“字符”)　　根据给定的正则表达式的匹配来拆分此字符串。形成一个新的String数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;boo:and:foo&quot;;<br>String[] arr1 &#x3D; str.split(&quot;:&quot;);<br>String[] arr2 &#x3D; str.split(&quot;o&quot;);<br>运行结果：<br>　　arr1　　&#x2F;&#x2F;&#123; &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; &#125;<br>　　arr2　　&#x2F;&#x2F;&#123; &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; &#125;<br></code></pre></td></tr></table></figure><p>7、boolean equals(Object anObject)　　语法 ：字符串变量名.wquals(字符串变量名);　　返回值为布尔类型。所以这里用 if 演示。比较两个字符串是否相等，返回布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　　　　　　　　　　　String str &#x3D; &quot;hello&quot;;<br>String str1&#x3D;&quot;world&quot;;  <br>if(str.equals(str1)) <br>&#123;  <br> System.out.println(&quot;这俩字符串值相等&quot;); <br>&#125;  <br>else<br>&#123;<br> System.out.println(&quot;这俩字符串值不相等&quot;);  <br>&#125;<br>　　　　　　运行结果：<br><br>　　　　　　　　　　这俩字符串值不相等<br></code></pre></td></tr></table></figure><p>8、trim();　　去掉字符串左右空格　　replace(char oldChar,char newChar);新字符替换旧字符，也可以达到去空格的效果一种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;       他们总说话呱         &quot;;  <br>System.out.println(&quot;去掉左右空格后:&quot; + str.trim());<br> <br>运行结果：<br><br>　　去掉左右空格后:他们总说话呱<br><br><br><br>第二种：<br>String str &#x3D; &quot;       大多时候我都机智的一笔         &quot;;  <br>System.out.println(&quot;去掉左右空格后:&quot; + str.replace(&quot; &quot;,&quot;&quot;)); <br><br>运行结果：<br><br>　　去掉左右空格后:大多时候我都机智的一笔<br></code></pre></td></tr></table></figure><p>9、String substring(int beginIndex,int endIndex)　　截取字符串　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　 String str &#x3D; &quot;123挨点博客456&quot;;  <br>System.out.println(&quot;截取后的字符为：&quot; + str.substring(0,3));&#x2F;&#x2F; 截取0-3个位置的内容   不含3 <br>System.out.println(&quot;截取后字符为：&quot; + str.substring(2));&#x2F;&#x2F; 从第3个位置开始截取    含2<br><br>　　运行结果：<br><br>　　　　截取后的字符为：123<br>　　　　截取后字符为：3挨点博客456<br></code></pre></td></tr></table></figure><p>10、boolean equalsIgnoreCase(String) 忽略大小写的比较两个字符串的值是否一模一样，返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;hello world&quot;;<br>        if(str.equalsIgnoreCase(str1))<br>        &#123;<br>            System.out.println(&quot;两个字符串相等&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;两个字符串不相等&quot;);<br>        &#125;<br><br>运行结果：<br><br>　　　　两个字符串相等<br></code></pre></td></tr></table></figure><p>11、boolean contains(String) 判断一个字符串里面是否包含指定的内容，返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;WO&quot;;<br>        if(str.contains(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在WO&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在WO<br></code></pre></td></tr></table></figure><p>12、boolean startsWith(String)　　测试此字符串是否以指定的前缀开始。返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　 String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;HE&quot;;<br>        if(str.startsWith(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在HE前缀开头&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在HE前缀开头<br></code></pre></td></tr></table></figure><p>13、boolean endsWith(String)　　测试此字符串是否以指定的后缀结束。返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String str &#x3D; &quot;你到底呱不呱&quot;;<br>        String str1 &#x3D; &quot;呱&quot;;<br>        if(str.endsWith(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在\&#39;呱\&#39;后缀结束&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在&#39;呱&#39;后缀结束<br></code></pre></td></tr></table></figure><p>14、上面提到了replace方法，接下继续补充一下  String replaceAll(String,String) 将某个内容全部替换成指定内容，　　 String repalceFirst(String,String) 将第一次出现的某个内容替换成指定的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;，，，，，，大多时候我都机智的一笔，，，，， &quot;;  <br>System.out.println(&quot;改变后：&quot; + str.replaceAll(&quot;，&quot;,&quot;a&quot;));<br><br>运行结果：改变后：a，，，，，大多时候我都机智的一笔，，，，， <br><br><br>String str &#x3D; &quot;，，，，，，大多时候我都机智的一笔，，，，， &quot;;  <br>System.out.println(&quot;改变后：&quot; + str.replaceFirst(&quot;帅吗&quot;,&quot;很帅哦&quot;));<br><br>运行结果：改变后：，，，，，，大多时候我都机智的一笔，，，，，<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mind</title>
      <link href="/2020/06/20/mind/"/>
      <url>/2020/06/20/mind/</url>
      
        <content type="html"><![CDATA[<h1 id="Xmind思维导图"><a href="#Xmind思维导图" class="headerlink" title="Xmind思维导图"></a>Xmind思维导图</h1><a id="more"></a><pre><code>java基础篇</code></pre><h2 id="java基础篇1"><a href="#java基础篇1" class="headerlink" title="java基础篇1"></a><center><strong>java基础篇1</strong></center></h2><br><div class="row">    <embed src="JAVAse1.pdf" width="100%" height="550" type="application/pdf"></div> <br><h2 id="java基础篇2"><a href="#java基础篇2" class="headerlink" title="java基础篇2"></a><center><strong>java基础篇2</strong></center></h2><br><div class="row">    <embed src="Javase2.pdf" width="100%" height="550" type="application/pdf"></div> <br><h2 id="java面向对象"><a href="#java面向对象" class="headerlink" title="java面向对象"></a><center><strong>java面向对象</strong></center></h2><br><div class="row">    <embed src="Javaoop.pdf" width="100%" height="550" type="application/pdf"></div> <br><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> mind </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第五天笔记</title>
      <link href="/2020/06/18/day05/"/>
      <url>/2020/06/18/day05/</url>
      
        <content type="html"><![CDATA[<h2 id="一-方法"><a href="#一-方法" class="headerlink" title="一,方法"></a>一,方法</h2><a id="more"></a><pre><code>--1,语法    方法的修饰符 方法的返回值 方法名([参数列表]){        方法体/java代码    }--2,方法调用</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法调用<br>public class Test1_Method &#123;<br>public static void main(String[] args) &#123;<br>System.out.println(1);<br>System.out.println(2);<br>System.out.println(3);<br><br>method();<br><br>System.out.println(4);<br>System.out.println(5);<br>&#125;<br>&#x2F;&#x2F;创建method():方法的修饰符 方法的返回值 方法名([参数列表])&#123;  &#125;<br>public static void method() &#123;<br>System.out.println(9);<br>System.out.println(8);<br>System.out.println(7);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,方法参数</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法传参<br>public class Test2_Method2 &#123;<br>public static void main(String[] args) &#123;<br><br>method(5);&#x2F;&#x2F;调用指定的方法<br>method2(&quot;jack&quot;);<br>method3(5,&quot;jack&quot;);<br>method4(10,5);<br><br>int m &#x3D; 10 ; <br>String n&#x3D;&quot;rose&quot;;<br>method5(n,m);<br><br>&#125;<br>&#x2F;&#x2F;5,创建方法时method5(n,m),类型必须匹配,多个参数逗号隔开<br>public static void method5(String a,int b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;4,创建方法时method4(10,5),类型必须匹配,多个参数逗号隔开<br>public static void method4(int a,int b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;3,创建方法时method3(5,&quot;jack&quot;),类型必须匹配,多个参数逗号隔开<br>public static void method3(int a,String b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;2,创建方法时method2(&quot;jack&quot;),匹配传递过来的参数--参数类型 参数名--类型必须匹配<br>public static void method2(String b) &#123;<br>System.out.println(b);<br>&#125;<br><br><br>&#x2F;&#x2F;1,创建方法时method(5),匹配传递过来的参数--参数类型 参数名--类型必须匹配<br>public static void method(int a) &#123;<br>System.out.println(a);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,方法返回值</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法返回值<br>public class Test3_Method3 &#123;<br>public static void main(String[] args) &#123;<br><br>&#x2F;&#x2F;3,接收方法返回来的值,交给sum保存<br>int sum &#x3D; function(10);<br>System.out.println(sum);<br><br>int sum2 &#x3D; function2(5,10);<br>System.out.println(sum2);<br><br>String sum3 &#x3D; function3(&quot;jack&quot;,10,5);<br>System.out.println(sum3);&#x2F;&#x2F;jack105<br><br>String sum4 &#x3D; function4(10,5,&quot;jack&quot;);<br>System.out.println(sum4);&#x2F;&#x2F;15jack<br>&#125;<br>&#x2F;&#x2F;创建function4(10,5,&quot;jack&quot;)<br>public static String function4(int a,int b,String c) &#123;<br>&#x2F;&#x2F;5,  +号:数字间做加法运算,只要和字符串+就是拼接字符串<br>returna+b+c;<br>&#125;<br>&#x2F;&#x2F;创建function3(&quot;jack&quot;,10,5)<br>public static String function3(String a,int b,int c) &#123;<br>&#x2F;&#x2F;4,字符串和什么数据 进行+ 都是在拼串!!!<br>return a+b+c;<br>&#125;<br>&#x2F;&#x2F;创建function2(5,10)<br>public static int function2(int a,int b) &#123;<br>return a+b ; &#x2F;&#x2F;2,通过return关键字把值返回给 sum2保存<br>&#125;<br>&#x2F;&#x2F;1,创建function(10)--需要写明方法返回值的  类型<br>public static int function(int x) &#123;<br>&#x2F;&#x2F;2,通过return关键字,把方法返回值返回给调用位置<br>return x ;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-方法重载"><a href="#二-方法重载" class="headerlink" title="二,方法重载"></a>二,方法重载</h2><pre><code>--1,概述    在一个类中发生的现象.方法名都一样,但是参数列表不一样(个数或者类型)的现象.--2,练习：数字求和</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法重载overload:在一个类里,都是同名的方法,但是,参数列表不同.<br>&#x2F;&#x2F;好处:对于程序员而言,需要记忆的方法名很简单.只需要记同一个名字的方法即可<br>&#x2F;&#x2F;方法的参数可以很灵活的传入.<br>public class Test4_Overload &#123;<br>public static void main(String[] args) &#123;<br>add(1,2);<br>add(1,2,3);<br>add(&quot;jack&quot;,1,2);<br>add(1,2,&quot;jack&quot;);<br>&#125;<br>&#x2F;&#x2F;提供重载的add(1,2,&quot;jack&quot;)<br>public static void add(int a,int b,String c) &#123;<br>&#x2F;&#x2F;第一个+用来做加法运算,第二个+用来拼接字符串<br>System.out.println(a+b+c);&#x2F;&#x2F;3jack<br>&#125;<br>&#x2F;&#x2F;提供重载的add(&quot;jack&quot;,1,2)<br>public static void add(String a,int b,int c) &#123;<br>System.out.println(a+b+c);&#x2F;&#x2F;jack12<br>&#125;<br>&#x2F;&#x2F;提供重载的add(1,2,3)<br>public static void add(int a,int b,int c) &#123;<br>System.out.println(a+b+c);&#x2F;&#x2F;+加法运算<br>&#125;<br>&#x2F;&#x2F;提供add(1,2)<br>public static void add(int a,int b) &#123;<br>System.out.println(a+b);&#x2F;&#x2F;+加法运算<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习：数据的打印</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法重载overload:在一个类里,都是同名的方法,但是,参数列表不同.<br>public class Test5_Overload2 &#123;<br>public static void main(String[] args) &#123;<br>print(10);<br>print(2.2);<br>print(true);<br>print(&quot;jack&quot;);<br>&#125;<br>&#x2F;&#x2F;提供了重载形式的print()<br>public static void print(int a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(double a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(boolean a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(String a) &#123;<br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-数组"><a href="#三-数组" class="headerlink" title="三,数组"></a>三,数组</h2><pre><code>--1,概念    英文名字叫Array,标志是[]    作用是用来存储多个  相同类型的  数据.--2,特点    数组中的每个元素,都有下标,默认从0开始.    数组一旦创建，长度不可变.--3,创建数组:  数组类型  数组名 = 数组对象;    --一般分为动态初始化和静态初始化    --动态初始化        `int[] a = new int[5];`    --静态初始化        `int[] b = new int[]{9,8,7,6,5};`        `int[] c = {9,8,7,6,5};`--4,练习:数组中存入hello</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.array;<br>&#x2F;&#x2F;测试数组<br>public class Test6_Array &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,静态创建数组<br>char[] a &#x3D; new char[]&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;<br>char[] b &#x3D; &#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;<br><br>&#x2F;&#x2F;2,动态创建数组<br>char[] c &#x3D; new char[5];&#x2F;&#x2F;有数据,是默认值\u0000<br>c[0] &#x3D; &#39;h&#39; ; &#x2F;&#x2F;修改下标为0的元素<br>c[1] &#x3D; &#39;e&#39; ; &#x2F;&#x2F;修改下标为1的元素<br>c[2] &#x3D; &#39;l&#39; ; &#x2F;&#x2F;修改下标为2的元素<br>c[3] &#x3D; &#39;l&#39; ; &#x2F;&#x2F;修改下标为3的元素<br>c[4] &#x3D; &#39;o&#39; ; &#x2F;&#x2F;修改下标为4的元素<br><br>&#x2F;&#x2F;数组长度才是5,下标是从0开始的,下标最大值也就是4,根本就不存在5下标<br>&#x2F;&#x2F;数组下标越界:java.lang.ArrayIndexOutOfBoundsException: 5<br>&#x2F;&#x2F;System.out.println( c[5] );<br><br>System.out.println(a);<br>System.out.println(b);<br>System.out.println(c);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,获取数组的长度:length属性直接获取,例如:a.length--6,练习:输出每个月的天数</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.array;<br>&#x2F;&#x2F;测试数组练习<br>public class Test7_Array2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;输出每个月的天数<br>&#x2F;&#x2F;1,静态  -- 创建数组<br>int[] a &#x3D; &#123;31,28,31,30,31,30,31,31,30,31,30,31&#125; ;<br><br>&#x2F;&#x2F;2,遍历数组&#x2F;循环数组--获取每个元素<br>&#x2F;&#x2F;int i &#x3D; 0 ;是指从下标为0的元素开始 ,向后遍历.i代表下标<br>&#x2F;&#x2F;i &lt;&#x3D; a.length-1 ;表示下标i可以取到的最大值是  数组长度-1<br>&#x2F;&#x2F;i++; 下标的更改方式,从0开始依次递增<br>for( int i &#x3D; 0 ; i &lt;&#x3D; a.length-1  ; i++ ) &#123;<br>&#x2F;&#x2F;a[i] 是指根据下标i获取a数组中存着的元素  并打印<br>&#x2F;&#x2F;System.out.println(&quot;1月有31天&quot;);<br>System.out.println(i+1+&quot;月有&quot;+a[i]+&quot;天&quot;);<br>&#125;<br><br>&#x2F;&#x2F;遍历数组，存入1到10<br>&#x2F;&#x2F;1,动态  -- 创建数组<br>int[] b &#x3D; new int[10];&#x2F;&#x2F;默认值0<br><br>&#x2F;&#x2F;2,遍历数组,把默认值改为1-10<br>for(int i &#x3D; 0 ; i &lt;&#x3D; b.length-1 ; i++) &#123;<br>b[i] &#x3D; i+1 ; &#x2F;&#x2F;修改每个元素的默认值,改成0-10 <br>&#125;<br><br>&#x2F;&#x2F;3,查看数组里的元素<br>for(int i &#x3D; 0 ; i &lt;&#x3D; b.length-1 ; i++) &#123;<br>System.out.println(b[i]);&#x2F;&#x2F;根据下标i获取元素<br>&#125;<br><br>&#x2F;&#x2F;TODO 创建数组,并存入随机<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第四天笔记</title>
      <link href="/2020/06/18/day04/"/>
      <url>/2020/06/18/day04/</url>
      
        <content type="html"><![CDATA[<h2 id="一-嵌套for循环"><a href="#一-嵌套for循环" class="headerlink" title="一,嵌套for循环"></a>一,嵌套for循环</h2><a id="more"></a><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">for(开始位置;判断条件;更改条件)&#123;&#x2F;&#x2F;外循环<br>循环体<br>for(开始位置;判断条件;更改条件)&#123;&#x2F;&#x2F;内循环<br>循环体<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--2,特点    --外循环执行1次，内循环执行多次    --外循环控制行，内循环控制列--3,入门案例</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br><br>&#x2F;&#x2F;测试嵌套for<br>public class Test1_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1, 总结:外循环执行1次，内循环执行多次<br>&#x2F;&#x2F; 当i&#x3D;1时,输出外循环i的值1,输出内循环j的所有值1 2 3 4 5<br>&#x2F;&#x2F; 当i&#x3D;2时,输出外循环i的值2,输出内循环j的所有值1 2 3 4 5<br>&#x2F;&#x2F; 当i&#x3D;3时,输出外循环i的值3,输出内循环j的所有值1 2 3 4 5<br>for(int i &#x3D; 1 ; i &lt;&#x3D; 3 ; i++ ) &#123;&#x2F;&#x2F; 外循环,执行3次<br>System.out.println(i);<br><br>for(int j &#x3D; 1 ; j &lt;&#x3D; 5; j++) &#123;&#x2F;&#x2F; 内循环,执行5次<br>System.out.println(j);<br>&#125;<br><br>&#125;<br><br>&#x2F;&#x2F;2, 外循环控制行，内循环控制列<br>&#x2F;&#x2F;第一轮i&#x3D;1时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第二轮i&#x3D;2时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第三轮i&#x3D;3时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第四轮i&#x3D;4时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第五轮i&#x3D;5时,内循环:同一行展示*****,回车换行<br>for(int i &#x3D; 1 ; i &lt; 6 ; i++) &#123; &#x2F;&#x2F; 外循环,执行5次<br>for(int j &#x3D; 1 ; j &lt; 6 ; j++) &#123; &#x2F;&#x2F; 内循环,执行5次<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示<br>&#125;<br><br>System.out.println();&#x2F;&#x2F;换行符<br>&#125;<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:打印左直角三角形</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;测试嵌套for<br>public class Test2_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,打印左直角三角形<br>&#x2F;&#x2F;第一轮,i&#x3D;1时,内循环:j&#x3D;1,j&lt;&#x3D;1;此时,满足条件的j有一次,同一行展示*,回车换行<br>&#x2F;&#x2F;第二轮,i&#x3D;2时,内循环:j&#x3D;1,j&lt;&#x3D;2;此时,满足条件的j有两次,同一行展示**,回车换行<br>&#x2F;&#x2F;第三轮,i&#x3D;3时,内循环:j&#x3D;1,j&lt;&#x3D;3;此时,满足条件的j有三次,同一行展示***,回车换行<br>&#x2F;&#x2F;第四轮,i&#x3D;4时,内循环:j&#x3D;1,j&lt;&#x3D;4;此时,满足条件的j有四次,同一行展示****,回车换行<br>&#x2F;&#x2F;第五轮,i&#x3D;5时,内循环:j&#x3D;1,j&lt;&#x3D;5;此时,满足条件的j有五次,同一行展示*****,回车换行<br>for(int i &#x3D; 1; i &lt;&#x3D; 5 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,练习:打印99乘法表</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;测试嵌套for<br>public class Test2_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,打印左直角三角形<br>&#x2F;&#x2F;第一轮,i&#x3D;1时,内循环:j&#x3D;1,j&lt;&#x3D;1;此时,满足条件的j有一次,同一行展示*,回车换行<br>&#x2F;&#x2F;第二轮,i&#x3D;2时,内循环:j&#x3D;1,j&lt;&#x3D;2;此时,满足条件的j有两次,同一行展示**,回车换行<br>&#x2F;&#x2F;第三轮,i&#x3D;3时,内循环:j&#x3D;1,j&lt;&#x3D;3;此时,满足条件的j有三次,同一行展示***,回车换行<br>&#x2F;&#x2F;第四轮,i&#x3D;4时,内循环:j&#x3D;1,j&lt;&#x3D;4;此时,满足条件的j有四次,同一行展示****,回车换行<br>&#x2F;&#x2F;第五轮,i&#x3D;5时,内循环:j&#x3D;1,j&lt;&#x3D;5;此时,满足条件的j有五次,同一行展示*****,回车换行<br>for(int i &#x3D; 1; i &lt;&#x3D; 5 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br>&#x2F;&#x2F; 打印99乘法表<br>for(int i &#x3D; 1; i &lt;&#x3D; 9 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>&#x2F;&#x2F;System.out.print(&quot;5*2&#x3D;10&quot;);&#x2F;&#x2F;同行展示*<br>&#x2F;&#x2F;System.out.print(&quot;行*列&#x3D;积&quot;);&#x2F;&#x2F;同行展示*<br>System.out.print(i+&quot;*&quot;+j+&quot;&#x3D;&quot;+i*j+&quot;&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-break和continue"><a href="#二-break和continue" class="headerlink" title="二,break和continue"></a>二,break和continue</h2><pre><code>--1,都是用来结束循环    --`break`用来立刻结束    --`continue`用来结束当前这一次循环还能继续--2,练习：找数字88    --需求:接收用户输入的100次数字</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.breakdemo;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试break<br>public class Test3_Break &#123;<br>public static void main(String[] args) &#123;<br><br>for (int i &#x3D; 0; i &lt; 100 ; i++) &#123;<br>&#x2F;&#x2F;用户输入的数字<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;判断<br>if(input &#x3D;&#x3D; 88) &#123;&#x2F;&#x2F;是88<br>System.out.println(&quot;中了&quot;);<br>break;&#x2F;&#x2F;1,结束程序,程序立刻结束<br><br>&#x2F;&#x2F;3,break 和 continue之后就不要再出现代码了,否则都是不可到达的代码<br>&#x2F;&#x2F;System.out.println(123);<br>&#125;else if(input !&#x3D; 88) &#123;&#x2F;&#x2F;不是88<br>continue;&#x2F;&#x2F;2,继续输入,还能有下次循环的机会<br>&#x2F;&#x2F;System.out.println(123);<br>&#125;<br><br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-循环结构-while–先判断后执行"><a href="#三-循环结构-while–先判断后执行" class="headerlink" title="三,循环结构:while–先判断后执行"></a>三,循环结构:<code>while</code>–先判断后执行</h2><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">while(判断条件)&#123;<br>循环体<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--2, 练习：猜数字    --需求:产生一个随机数，和用户一直在输入的数字比较</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.whiledemo;<br><br>import java.util.Random;<br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试 while<br>public class Test4_While &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,让程序产生随机数 -- 产生n以内的随机数,默认从0开始<br>int random &#x3D; new Random().nextInt(100);<br>System.out.println(random);<br><br>&#x2F;&#x2F;for形式的死循环!! -- 必须设置程序的出口!!<br>&#x2F;&#x2F;for(int i &#x3D; 1; i &gt;&#x3D; 1 ; i++) &#123;<br>&#x2F;&#x2F;for(;;) &#123;<br>&#x2F;&#x2F;死循环!!--必须设置程序的出口!!<br>&#x2F;&#x2F;while(true) &#123;&#x2F;&#x2F;条件永远成立,一直接收,根本不停<br>while(random&gt;50) &#123;&#x2F;&#x2F;先判断再执行的循环结构<br>&#x2F;&#x2F;2,让用户一直输入<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;3,一直比较<br>if(input &gt; random) &#123;<br>System.out.println(&quot;大了&quot;);<br>&#125;else if(input &lt; random) &#123;<br>System.out.println(&quot;小了&quot;);<br>&#125;else if(input &#x3D;&#x3D; random) &#123;<br>System.out.println(&quot;中了&quot;);<br>break ;&#x2F;&#x2F;死循环的出口!!<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-循环结构-do…while–先执行后判断"><a href="#四-循环结构-do…while–先执行后判断" class="headerlink" title="四,循环结构:do…while–先执行后判断"></a>四,循环结构:do…while–先执行后判断</h2><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">do&#123;<br>循环体<br>&#125;while(判断条件);<br></code></pre></td></tr></table></figure><pre><code>--2,改造猜数字</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.whiledemo;<br><br>import java.util.Random;<br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试 while<br>public class Test4_While &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,让程序产生随机数 -- 产生n以内的随机数,默认从0开始<br>int random &#x3D; new Random().nextInt(100);<br>System.out.println(random);<br><br>&#x2F;&#x2F;for形式的死循环!! -- 必须设置程序的出口!!<br>&#x2F;&#x2F;for(int i &#x3D; 1; i &gt;&#x3D; 1 ; i++) &#123;<br>&#x2F;&#x2F;for(;;) &#123;<br>&#x2F;&#x2F;死循环!!--必须设置程序的出口!!<br>&#x2F;&#x2F;while(true) &#123;&#x2F;&#x2F;条件永远成立,一直接收,根本不停<br>do &#123;&#x2F;&#x2F;先判断再执行的循环结构<br>&#x2F;&#x2F;2,让用户一直输入<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;3,一直比较<br>if(input &gt; random) &#123;<br>System.out.println(&quot;大了&quot;);<br>&#125;else if(input &lt; random) &#123;<br>System.out.println(&quot;小了&quot;);<br>&#125;else if(input &#x3D;&#x3D; random) &#123;<br>System.out.println(&quot;中了&quot;);<br>break ;&#x2F;&#x2F;死循环的出口!!<br>&#125;<br>&#125;while(random&gt;50);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-总结三种循环的异同-–可以互相替换"><a href="#五-总结三种循环的异同-–可以互相替换" class="headerlink" title="五,总结三种循环的异同:–可以互相替换"></a>五,总结三种循环的异同:–可以互相替换</h2><pre><code>--相同点:都是为了解决程序中,需要重复的做相同的事情的需求--不同点:    --`for`:知道循环的开始位置,知道循环的次数        `for`(开始位置;循环条件;更条件){循环体}    --`while`:可以不知道开始位置,可以不知道数据的规律        `while(循环条件){循环体}`    --`do...while`:可以不知道开始位置,可以不知道数据的规律                 可以保证循环体最少执行1次.        `do...while(循环条件){循环体}`</code></pre><h2 id="六-练习"><a href="#六-练习" class="headerlink" title="六,练习:"></a>六,练习:</h2><pre><code>--求【0,100】中，奇数的个数--求【0,100】中，偶数的和--代码</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br><br>&#x2F;&#x2F;测试for循环练习<br>public class Test5 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;--求【1,100】中，偶数的和<br>int sum &#x3D; 0 ;&#x2F;&#x2F;定义变量,用来存和<br>for (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;<br>&#x2F;&#x2F;判断,i是偶数吗<br>if(i % 2 &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;偶数<br>sum &#x3D; sum + i ;&#x2F;&#x2F;修改sum的值<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的偶数和是:&quot;+sum);<br><br>&#x2F;&#x2F;--求【1,100】中，奇数的个数<br>int count &#x3D; 0 ;&#x2F;&#x2F;定义变量,用来存个数<br>for (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;<br>&#x2F;&#x2F;判断,i是奇数吗<br>if(i % 2 &#x3D;&#x3D; 1) &#123;&#x2F;&#x2F;奇数<br>count++;&#x2F;&#x2F;统计每个奇数的个数<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的奇数个数是:&quot;+count);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七-变量"><a href="#七-变量" class="headerlink" title="七,变量:"></a>七,变量:</h2><pre><code>--1,变量的使用原则：就近原则。--2,变量出现的位置不同,名字和作用都不同.    出现在成员位置(类里方法外)的变量叫成员变量.    出现在局部位置(方法里)的变量叫局部变量.--3,局部变量:在方法里+必须手动初始化+作用范围就是在方法里+方    法运行完毕局部变量将释放内存--4,成员变量:在类里方法外+有默认值不用手动初始化+作用范围就是整个类    里+类消失成员变量才释放内存--5,测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.variable;<br><br>import org.junit.Test;<br><br>&#x2F;&#x2F;测试 变量的使用<br>public class Test6_Variable &#123;<br>&#x2F;&#x2F;TODO 测试其他类型 的默认值<br><br>&#x2F;&#x2F;2,成员变量:位置是在类里方法外  +  有默认值 + 作用范围是整个类里<br>double count ;<br><br>&#x2F;&#x2F;3,就近原则---前提是---当成员变量 和 局部变量同名时,你使用的一定是局部变量<br>int sum &#x3D; 20 ;<br><br>&#x2F;&#x2F;单元测试junit :要求方法要有标志@Test + 方法必须是public的 + 方法返回值是void<br>@Test<br>public void show() &#123;<br>&#x2F;&#x2F;1,局部变量:位置是在方法里 + 必须初始化  + 作用范围是方法里<br>int sum &#x3D; 10;<br>System.out.println(sum);&#x2F;&#x2F;10,就近原则<br>System.out.println(count);&#x2F;&#x2F;0.0<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第三天笔记</title>
      <link href="/2020/06/18/day03/"/>
      <url>/2020/06/18/day03/</url>
      
        <content type="html"><![CDATA[<p>一,运算符</p><a id="more"></a><pre><code>--1,算数运算符: +-*/ ++ -- %(模)--2,比较运算符(结果是boolean类型):== != --3,逻辑运算符(结果是boolean类型):+ !(取反) &amp; |--4,三元运算符: 1 ? 2 : 3        --结果是2或者是3,到底是2还是3要看1的结果了,1如果描述的成立,结果是2.1如果描述不成立,结果是3.--5,赋值运算符: = += -= *= /=--6,逻辑运算符 &amp; |     --逻辑&amp;:表示并且关系        1 &amp; 2 :如果最终运算的结果,想要是true,要求1和2,必须都是true    --短路与/双与&amp;&amp;:表示并且关系 -- 高效        1 &amp;&amp; 2 :            2的位置可能会发生短路,当1的位置判断完得到false时,结果就已经注定了是false,此时2可以不参与运算(发生短路).可以提高效率.    --逻辑|:表示或者关系        1 | 2 :如果最终运算的结果,想要是true,要求1和2中,有一个true就行    --短路或/双或||:表示或者关系  -- 高效            1 || 2 :            2的位置可能会发生短路,当1的位置判断完得到true时,结果早都注定了是true,此时2可以不参与运算(发生短路).用来提高效率.--7,练习：自增自减</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 自增++   自减--<br>public class Test1_ZIzeng &#123;<br>public static void main(String[] args) &#123;<br>int a &#x3D; 1;<br>&#x2F;&#x2F;符号在后,先使用再变化<br>System.out.println(a++);&#x2F;&#x2F;1<br><br>int b &#x3D; 1;<br>&#x2F;&#x2F;符号在前,先变化再使用<br>System.out.println(++b);&#x2F;&#x2F;2<br><br>System.out.println(++b+b+a++);&#x2F;&#x2F;3+3+2&#x3D;8<br><br>int c &#x3D; 1;<br>&#x2F;&#x2F;符号在后,先使用再变化<br>System.out.println(c--);&#x2F;&#x2F;1<br><br>int d &#x3D; 1;<br>&#x2F;&#x2F;符号在前,先变化再使用<br>System.out.println(--d);&#x2F;&#x2F;0<br><br>System.out.println(--c-c-d--);&#x2F;&#x2F;-1-(-1)-0&#x3D;0<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--8,练习：求两个数里的大值    </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试 三元运算符<br>public class Test2_MaxValue &#123;<br>public static void main(String[] args) &#123;<br>int a &#x3D; new Scanner(System.in).nextInt();<br>int b &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F; 两个数里的大值:max记录的值可能是a也可能是b,到底是a还是b呢?--要看a&gt;b判断成立不<br>int max &#x3D; a &gt; b ? a : b;<br>System.out.println(&quot;a b里的大值是:&quot; + max);<br><br>&#x2F;&#x2F; 三个数里的大值:<br>int c &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;res记录着max和c里的大值<br>int res &#x3D; max  &gt; c ? max : c ;<br>System.out.println(&quot;a b c里的大值是:&quot;+res);<br><br>&#x2F;&#x2F;TODO 优化:一步到位<br>&#x2F;&#x2F;int res &#x3D; a &gt; b ? 2 : 3 ;<br>&#x2F;&#x2F;int res &#x3D; a &gt; b ? a大 : b大 ;<br>int res &#x3D; a &gt; b ? ( a &gt; c ? a : c ) : ( b &gt; c ? b : c ) ;<br>System.out.println(&quot;a b c里的大值是:&quot;+res);<br><br><br>&#125;<br><br>&#125;<br><br><br>--9,练习：平年闰年<br>--需求:1、能被4整除，并且不能被100整除<br>2、或者能被400整除<br><br>package cn.tedu.basic;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 平年闰年<br>public class Test3_Runnian &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收键盘输入的年号<br>int year &#x3D; new Scanner(System.in).nextInt();<br><br>String desc &#x3D; &quot;平年&quot;;&#x2F;&#x2F;设置默认值<br>&#x2F;&#x2F;2,判断   : if(判断条件)&#123;满足条件的代码&#125;<br>&#x2F;&#x2F;条件1、能被4整除，并且不能被100整除    ||    条件2、能被400整除<br>&#x2F;&#x2F;能被4整除    &amp;&amp;    不能被100整除    ||   能被400整除<br>&#x2F;&#x2F;if(判断条件)&#123;满足条件的代码&#125;<br>&#x2F;&#x2F;if(能被4整除    &amp;&amp;  不能被100整除    ||  能被400整除)&#123;满足条件的代码&#125;<br>if( year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0 || year % 400 &#x3D;&#x3D; 0 )&#123;<br>desc &#x3D; &quot;闰年&quot;;&#x2F;&#x2F;修改desc的值是闰年<br>&#125;<br><br>&#x2F;&#x2F;System.out.println(&quot;2020年是闰年&quot;);<br>System.out.println(year+&quot;年是&quot;+desc);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>二,!!!分支结构：if<br>    –1,概述<br>        分支结构是相对于顺序结构而言的.顺序结构只能一行一行顺序的从上往下执行.但是无法完成先判断再执行的需求.<br>    –2,语法<br>        单分支:<br>        if(判断条件){<br>            满足了条件代码<br>        }<br>        多分支:<br>        if(判断条件){<br>            满足了条件代码<br>        }else{<br>            不满足了条件代码<br>        }<br>        嵌套分支:<br>        if(判断条件1){<br>            满足了条件代码1<br>        }else if(判断条件2){<br>            满足了条件代码2<br>        }else if(判断条件3){<br>            满足了条件代码3<br>        }else{<br>            上面的谁都不满足才要执行的代码4<br>        }<br>    –3,练习:商品打折<br>        –版本1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test4_IF &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收用户输入的原价<br>double price &#x3D; new Scanner(System.in).nextDouble();<br><br>double discount &#x3D; price;&#x2F;&#x2F;定义变量,记录折后价<br>&#x2F;&#x2F;2,开始计算折后价,并输出<br>if(price &gt;&#x3D; 5000) &#123;&#x2F;&#x2F;满5000打5折<br>discount &#x3D; price * 0.5 ;<br>&#125;else if(price &gt;&#x3D; 2000) &#123;&#x2F;&#x2F;满2000打8折<br>discount &#x3D; price * 0.8 ;<br>&#125;else if(price &gt;&#x3D; 1000) &#123;&#x2F;&#x2F;满1000打9折<br>discount &#x3D; price * 0.9 ;<br>&#125;<br>&#x2F;&#x2F;3,输出<br>System.out.println(&quot;原价是:&quot;+price+&quot;,折后价是:&quot;+discount);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--版本2:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test4_IF &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收用户输入的原价<br>double price &#x3D; new Scanner(System.in).nextDouble();<br><br>&#x2F;&#x2F;double discount &#x3D; price;&#x2F;&#x2F;定义变量,记录折后价<br><br>&#x2F;&#x2F;2,开始计算折后价,并输出<br>if(price &gt;&#x3D; 5000) &#123;&#x2F;&#x2F;满5000打5折<br>&#x2F;&#x2F;price &#x3D; price * 0.5 ;<br><br>price *&#x3D; 0.5 ;&#x2F;&#x2F;等效于:price&#x3D;price*0.5;相当于是一种简写形式.<br><br>&#125;else if(price &gt;&#x3D; 2000) &#123;&#x2F;&#x2F;满2000打8折<br>&#x2F;&#x2F;price &#x3D; price * 0.8 ;<br>price *&#x3D; 0.8 ;<br>&#125;else if(price &gt;&#x3D; 1000) &#123;&#x2F;&#x2F;满1000打9折<br>&#x2F;&#x2F;price &#x3D; price * 0.9 ;<br>price *&#x3D; 0.9 ;<br>&#125;<br>&#x2F;&#x2F;3,输出<br>&#x2F;&#x2F;System.out.println(&quot;原价是:&quot;+price+&quot;,折后价是:&quot;+discount);<br>System.out.println(&quot;折后价是:&quot;+price);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:统计学员得分</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test5_If2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F; 1,接收用户输入的分数<br>int score &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F; 为了增强程序的健壮性.设置上限100和下限0<br>if (score &gt; 100 || score &lt; 0) &#123;<br>System.out.println(&quot;请您输入有效的分数!&quot;);<br>return;&#x2F;&#x2F; 结束程序<br>&#125;<br>&#x2F;&#x2F; 2,判断<br>if (score &gt;&#x3D; 90) &#123;&#x2F;&#x2F; 90分以上 优秀<br>System.out.println(&quot;优秀&quot;);<br>&#125; else if (score &gt;&#x3D; 80 &amp;&amp; score &lt;&#x3D; 89) &#123;&#x2F;&#x2F; 80~89 良好<br>System.out.println(&quot;良好&quot;);<br>&#125; else if (score &gt;&#x3D; 70 &amp;&amp; score &lt;&#x3D; 79) &#123;&#x2F;&#x2F; 70~79 中等<br>System.out.println(&quot;中等&quot;);<br>&#125; else if (score &gt;&#x3D; 60 &amp;&amp; score &lt;&#x3D; 69) &#123;&#x2F;&#x2F; 60~69 及格<br>System.out.println(&quot;及格&quot;);<br>&#125; else if (score &lt; 60) &#123;&#x2F;&#x2F; 60分以下 不及格<br>System.out.println(&quot;不及格&quot;);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>三,分支结构：switch<br>    –1,概述<br>        也可以完成先判断再执行的需求.<br>    –2,语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">switch(判断条件)&#123;<br>case 0 : syso(0) ;break;<br>case 1 : syso(1) ;<br>case &#39;x&#39; : syso(2) ;<br>case &quot;java&quot; : syso(3) ; <br><br>default:syso(100) ;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>&#x2F;&#x2F;这个类用来测试  switch<br>public class Test6_Switch &#123;<br>public static void main(String[] args) &#123;<br><br>int sum  &#x3D; 2 ;<br>&#x2F;&#x2F;1,判断条件:可以转化为int类型的表达式.<br>&#x2F;&#x2F;可以是byte short char int类型.jdk7以后,支持String类型.<br>switch(sum) &#123;<br>case 1 : System.out.println(1);<br>&#x2F;&#x2F;2,自从成功匹配了case后,会继续向后穿透所有case包括default<br>case 2 : System.out.println(2);break ;&#x2F;&#x2F;3,立刻结束<br>case &#39;2&#39; : System.out.println(&#39;2&#39;);break ;<br>case &#39;x&#39; : System.out.println(&#39;x&#39;);break ;<br>case 100 : System.out.println(100);break ;<br><br>default :System.out.println(666);<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>四,循环结构：<code>for</code><br>    –1,概述<br>        是指在程序中,需要重复执行很多次的某些功能.<br>    –2,语法<br>        for(循环的开始位置;循环的判断条件;循环的更改条件){循环体}<br>    –3,练习：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;这个类用来测试 for循环<br>public class Test7_For &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;int i &#x3D; 0 循环的开始位置<br>&#x2F;&#x2F;i &lt;&#x3D; 10 循环的判断条件<br>&#x2F;&#x2F;i++ 循环的更改条件,使i不断自增<br>&#x2F;&#x2F;i 就表示每次获取到的数据<br>for(int i &#x3D; 0; i &lt;&#x3D; 10 ; i++ )&#123;&#x2F;&#x2F;练习：打印0到10<br>System.out.println(i);&#x2F;&#x2F;打印当前i的值<br>&#125;<br><br>&#x2F;&#x2F;练习：打印10到0<br>for(int i &#x3D; 10 ; i &gt;&#x3D; 0  ; i-- ) &#123;<br>System.out.println(i);<br>&#125;<br><br>&#x2F;&#x2F;TODO 打印8,88,888,8888<br>&#x2F;&#x2F;TODO 画流程图!!<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>[练习] 求【0,100】中，奇数的个数<br>[练习] 求【0,100】中，偶数的和    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">package com.seeker.exercise;<br><br>import org.junit.Test;<br><br>&#x2F;&#x2F;1-100偶数和<br>public class For &#123;<br>@Test<br>public void Oshuhe() &#123;<br>int sum &#x3D; 0;<br>for (int i &#x3D; 1; i &lt;&#x3D;100; i++) &#123;<br>if (i%2&#x3D;&#x3D;0) &#123;<br>sum+&#x3D;i;<br>&#125;<br>&#125;<br>System.out.println(&quot;1-100的偶数和是&quot; +sum);<br>&#125;<br>&#x2F;&#x2F;1-100奇数个数<br>@Test<br>public void Jshuge() &#123;<br>int i&#x3D;0;<br>for (int j &#x3D; 1; j &lt;&#x3D;100; j++) &#123;<br>if (j%2!&#x3D;0) &#123;<br>++i;<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的奇数个数为&quot; +i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第二天笔记</title>
      <link href="/2020/06/18/day02/"/>
      <url>/2020/06/18/day02/</url>
      
        <content type="html"><![CDATA[<h2 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一,数据类型"></a>一,数据类型</h2><a id="more"></a><pre><code>--1,基本类型 八种    --整数:`byte` `short` `int` `long`    --小数:`float` `double`    --布尔:`boolean`    --字符:`char`  --2,练习:最大值最小值</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>&#x2F;&#x2F;这个类用来测试  取值范围<br>&#x2F;&#x2F;总结:<br>&#x2F;&#x2F;1,变量定义的三要素: 变量类型  变量名 &#x3D; 变量值<br>&#x2F;&#x2F;2,基本类型对应的工具类:<br>&#x2F;&#x2F;基本类型: byte short int     long float double char      boolean<br>&#x2F;&#x2F;工具类:  Byte Short Integer Long  Float Double Character Boolean<br>&#x2F;&#x2F;3,通过点.来调用工具类的功能<br>&#x2F;&#x2F;4,打印变量时,千万不要用双引号<br>public class Test1_Scope &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,整数类型的取值范围 byte short int long<br>&#x2F;&#x2F;创建变量,记录最大值:变量类型  变量名 变量值<br>byte max &#x3D; Byte.MAX_VALUE ;<br>&#x2F;&#x2F;System.out.println(&quot;max&quot;);&#x2F;&#x2F;指定了打印固定的数据--max这个单词!!!<br>System.out.println(max);&#x2F;&#x2F;127,打印max变量的值<br>&#x2F;&#x2F;创建变量,记录最小值<br>byte min &#x3D; Byte.MIN_VALUE ;<br>System.out.println(min);&#x2F;&#x2F;-128,打印min变量的值<br><br>short max2 &#x3D; Short.MAX_VALUE ;<br>short min2 &#x3D; Short.MIN_VALUE ;<br>System.out.println(max2);&#x2F;&#x2F;32767<br>System.out.println(min2);&#x2F;&#x2F;-32768<br><br>&#x2F;&#x2F;int--Integer long--Long  <br>int max3 &#x3D; Integer.MAX_VALUE ;<br>int min3 &#x3D; Integer.MIN_VALUE ;<br>System.out.println(max3);&#x2F;&#x2F;2147483647<br>System.out.println(min3);&#x2F;&#x2F;-2147483648<br><br>long max4 &#x3D; Long.MAX_VALUE ;<br>long min4 &#x3D; Long.MIN_VALUE ;<br>System.out.println(max4);&#x2F;&#x2F;9223372036854775807<br>System.out.println(min4);&#x2F;&#x2F;-9223372036854775808<br><br>&#x2F;&#x2F;float--Float double--Double <br>&#x2F;&#x2F;区别:float是单精度,对小数位运算不精确<br>&#x2F;&#x2F;区别:double是单精度,对小数位运算非常精确<br>float max5 &#x3D; Float.MAX_VALUE ;<br>float min5 &#x3D; Float.MIN_VALUE ;<br>System.out.println(max5);&#x2F;&#x2F;3.4028235E38<br>System.out.println(min5);&#x2F;&#x2F;1.4E-45<br><br>double max6 &#x3D; Double.MAX_VALUE ;<br>double min6 &#x3D; Double.MIN_VALUE ;<br>System.out.println(max6);&#x2F;&#x2F;1.7976931348623157E308<br>System.out.println(min6);&#x2F;&#x2F;4.9E-324<br><br>&#x2F;&#x2F;boolean--Boolean  char--Character<br>boolean b &#x3D; true; <br>boolean b2 &#x3D; false; <br><br>&#x2F;&#x2F;char--字符型 --一个字符<br>char c &#x3D; &#39;a&#39; ;&#x2F;&#x2F;一个字母<br>char c2 &#x3D; &#39;1&#39; ;&#x2F;&#x2F;一个数字<br>char c3 &#x3D; &#39;中&#39; ;&#x2F;&#x2F;char类型能不能存一个中文汉字?  --  可以<br>char c4 &#x3D; 126 ;&#x2F;&#x2F;可以直接存数字<br><br>System.out.println(c);<br>System.out.println(c2);<br>System.out.println(c3);<br>&#x2F;&#x2F;char类型是字符型,允许你直接存入一个数字本身.但是,使用时还是要用字符的.<br>&#x2F;&#x2F;使用时,底层会去查询ascii码表,数字对应的字符是啥,然后用字符本身.<br>&#x2F;&#x2F;ascii码表里,规定了0~127数字对应的字符,char类型的取值范围是0~65535.<br>&#x2F;&#x2F;自从128~65535默认对应的字符是?.<br>System.out.println(c4);&#x2F;&#x2F;~<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习:输入个人信息</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>&#x2F;&#x2F;这个类用来测试  个人信息<br>public class Test2_Info &#123;<br>public static void main(String[] args) &#123;<br>String name &#x3D; &quot;渣渣辉&quot; ;<br><br>&#x2F;&#x2F;通过 + 拼接字符串<br>&#x2F;&#x2F;System.out.println(&quot;大家好,我叫渣渣辉&quot;);<br>System.out.println(&quot;大家好,我叫&quot;+name);<br><br>&#x2F;&#x2F;System.out.println(&quot;渣渣辉,你好&quot;);<br>System.out.println(name+&quot;,你好&quot;);<br><br>&#x2F;&#x2F;动态拼接字符串  &quot;+??+&quot;<br>&#x2F;&#x2F;System.out.println(&quot;大家好,我叫渣渣辉!&quot;);<br>System.out.println(&quot;大家好,我叫&quot;+name+&quot;!&quot;);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:圆形面积</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试  圆形面积<br>&#x2F;&#x2F;总结<br>&#x2F;&#x2F;1,修改变量的值,既然被定义成了变量,他的值就可以一直被修改<br>&#x2F;&#x2F;2,变量的值为了写的更加灵活,可以动态接收键盘输入的值<br>&#x2F;&#x2F;3,拿着变量的值,带入公式,运算结果,并交给area&#x2F;zhouchang去保存<br>&#x2F;&#x2F;4,动态拼接字符串,用+完成<br>public class Test3_Area &#123;<br>public static void main(String[] args) &#123;<br>double r &#x3D; 5.5 ;&#x2F;&#x2F;定义变量,记录圆的半径<br><br>&#x2F;&#x2F;动态的接收键盘输入的值<br>r &#x3D; new Scanner(System.in).nextDouble() ;&#x2F;&#x2F;修改变量的值<br><br>double area &#x3D; 3.14 *r *r ;&#x2F;&#x2F;圆形面积:3.14 *r *r<br>System.out.println(&quot;圆的面积是:&quot;+area);&#x2F;&#x2F;打印面积<br><br>&#x2F;&#x2F;TODO 圆的周长<br>double zhouchang &#x3D; 2*3.14*r ;<br>System.out.println(&quot;圆的周长是:&quot;+zhouchang);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,练习:变量交换</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试  变量值交换<br>public class Test4_Exchange &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,创建变量a和b<br>int a &#x3D; new Scanner(System.in).nextInt() ;<br>int b &#x3D; new Scanner(System.in).nextInt() ;<br>&#x2F;&#x2F;System.out.println(&quot;交换前:a&#x3D;1,b&#x3D;2&quot;);<br>System.out.println(&quot;交换前:a&#x3D;&quot;+a+&quot;,b&#x3D;&quot;+b);<br><br>&#x2F;&#x2F;2,交换值<br>int c &#x3D; a ;&#x2F;&#x2F;把a的值交给c保存<br>a &#x3D; b ;&#x2F;&#x2F;把b的值交给a保存<br>b &#x3D; c ; &#x2F;&#x2F;把c的值交给b保存<br><br>&#x2F;&#x2F;TODO 3,打印<br>System.out.println(&quot;交换后:a&#x3D;&quot;+a+&quot;,b&#x3D;&quot;+b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--6,引用类型--数组/OOP ...</code></pre><h2 id="二-基本类型的字面值（5条）"><a href="#二-基本类型的字面值（5条）" class="headerlink" title="二,基本类型的字面值（5条）"></a>二,基本类型的字面值（5条）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 字面值<br>public class Test5 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,java里整数有4种类型,那么,我们写的整数到底字面值是什么类型呢?--int<br>int a &#x3D; 1000 ;<br><br>&#x2F;&#x2F;2,在取值范围内,可以直接赋值<br>byte m &#x3D; 123 ;<br>&#x2F;&#x2F;byte n &#x3D; 128 ;&#x2F;&#x2F;报错,右侧是int类型,左侧的byte类型根本就存不下<br>&#x2F;&#x2F;char o &#x3D; 65536 ;&#x2F;&#x2F;报错,右侧是int类型,左侧的char类型根本就存不下<br><br>&#x2F;&#x2F;3,java里小数有2种类型,那么,我们写的小数到底字面值是什么类型呢?--double<br>double x &#x3D; 9.9 ;<br><br>&#x2F;&#x2F;4,字面值的后缀lfd ,  l-long  f-float  d-double  <br>&#x2F;&#x2F;报错,因为有右侧字面值是int类型,但是,超出了int范围!!--加后缀L变成long类型<br>long b &#x3D; 10000000000L;<br>&#x2F;&#x2F;报错,右侧是double类型8字节,左侧是float类型4字节,存不下!!--加后缀f变成float类型<br>float y &#x3D; 9.9f ;<br>double z &#x3D; 3d;&#x2F;&#x2F;右侧就从字面值int类型转成了double类型<br>System.out.println(z);&#x2F;&#x2F;3.0<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-基本类型的类型转换"><a href="#三-基本类型的类型转换" class="headerlink" title="三,基本类型的类型转换"></a>三,基本类型的类型转换</h2><pre><code>--1,从小到大:拿着小类型给大类型赋值--隐式转换--2,从大到小:拿着大类型给小类型赋值--显式转换--3,测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 转换<br>public class Test6 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;从小到大(隐式转换) byte小类型 -- long大类型<br>byte a &#x3D; 10 ;<br>&#x2F;&#x2F;拿着右侧的小类型a,给左侧的大类型b去赋值 --可以直接赋值!!<br>long b &#x3D; a ;<br><br>&#x2F;&#x2F;从大到小(显式转换) double-int<br>double m &#x3D; 10;<br>&#x2F;&#x2F;拿着右侧的大类型m,给左侧的小类型n去赋值--不可以!!需要强转<br>int n &#x3D; (int) m ;<br><br>&#x2F;&#x2F;练习:小转大long-float<br>long x &#x3D; 10 ;<br>float y &#x3D; x ;&#x2F;&#x2F;隐式转换<br><br>&#x2F;&#x2F;大转小:double-float<br>double o &#x3D; 9 ;<br>float p &#x3D; (float)o ;&#x2F;&#x2F;显示转换<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-运算规则（5条）"><a href="#四-运算规则（5条）" class="headerlink" title="四,运算规则（5条）"></a>四,运算规则（5条）</h2><pre><code>package cn.tedu.basic;//这个类用来测试 运算规则public class Test7 {    public static void main(String[] args) {        //1,计算结果的数据类型，与最大类型一致        System.out.println(3/2); //1 , int/int-&gt;int        System.out.println(3d/2); //1.5 , double/int -&gt; double        System.out.println(3.14*10);//31.4 , double*int -&gt; double        //2,byte,short,char三种比int小的整数，运算时会先自动转换成int        byte a = 1;        byte b = 2;        //右侧拿着两个byte类型的值,做运算时,会变成大类型int类型--需要强转        byte c = (byte) (a*b);        //3,整数运算溢出  -- 因为在运算时已经超出了int的范围!!--需要加后缀L扩大范围        //光速运行一年的运行是多少米?--3亿m/s        System.out.println( 300000000L * 60 * 60 * 24 * 365   );        //4,浮点数的特殊值--由于小数运算中,出现了不应该出现的现象:分子或者分母为0了!!        System.out.println( 3.14/0 );//Infinity         System.out.println( 0/0.0  );//NaN    }}</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java课程第一天笔记</title>
      <link href="/2020/06/17/day01/"/>
      <url>/2020/06/17/day01/</url>
      
        <content type="html"><![CDATA[<h2 id="认识JAVA，常用开发工具"><a href="#认识JAVA，常用开发工具" class="headerlink" title="认识JAVA，常用开发工具"></a>认识JAVA，常用开发工具</h2><a id="more"></a><p>  &lt;java从入门到精通&gt; &lt;java核心技术卷I II&gt;</p><p>一,学习资料的下载<br>    –网址:<a href="http://code.tarena.com.cn" target="_blank" rel="noopener">http://code.tarena.com.cn</a><br>    –用户名:tarenacode<br>    –密码:code_2017<br>二,jdk<br>    –1,java开发的核心就是jdk.jdk是简称,全称是,java开发工具包<br>    –2,需要下载 安装  配置 和检验<br>    –3,检验jdk是否成功?<br>        – 运行dos命令: java -version<br>        – C:\Users\Administrator&gt;java -version<br>           java version “1.8.0_45”<br>三,eclipse<br>    –1,用来做java开发的工具.工具有很多,比如:Myeclipse是收费的,    IDEA有收费版和免费体验版.<br>    –2,需要自己指定workspace,来保存你的代码.<br>    –3,使用eclipse开发,对于目录的要求非常严格<br>    –4,把代码放入相应的目录.工程/项目 – 包 – 类<br>四,使用eclipse<br>    –1,创建工程<br>        -右键-new-project-java project-next-输入工程名称-finish<br>    –2,创建包<br>        -选中src-右键-new-package-输入包名-finish<br>    –3,创建类<br>        -选中包-右键-new-class-输入类名-finish<br>    –4,说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;单行注释<br>&#x2F;* 多行注释 *&#x2F;<br><br>&#x2F;*<br> * 用来定义一个包<br> * package --是关键字 ,专门定义包<br> * cn.tedu.hello  --包名 ,  全小写+公司域名倒着写<br> * ; --Java语句结束符 <br> *&#x2F;<br>package cn.tedu.hello;<br>&#x2F;*<br> * 定义类<br> * public --是java的关键字,专门用来描述类的访问权限<br> * class  --是java的关键字,专门用来定义类<br> * HelloWorld  --类名,符合驼峰命名法<br> * &#123; java代码    &#125;<br> *&#x2F;<br>public class HelloWorld &#123;<br>&#x2F;*<br> *   定义主函数&#x2F;主方法&#x2F;main方法....用来作为程序的入口<br> * public --是java的关键字, 用来描述主方法的 访问权限<br> * static --是java的关键字,用来描述主方法是静态的<br> * void --是java的关键字,用来描述主方法是 没有返回值的<br> * main --是方法名<br> * ()  -- 看做是方法的标志<br> * String[] args -- 方法的参数<br> * &#123;  java代码  &#x2F;  方法体      &#125;<br> *&#x2F;<br>public static void main(String[] args) &#123;<br>&#x2F;*<br> * 指定输出的数据( syso + alt + &#x2F; )<br> * System -- 是让程序发出一个系统指令<br> * .   -- 调用系统的功能<br> * out    --向外输出的动作<br> * println --打印后换行<br> * ()  -- 方法的标志<br> * &quot;hello java123~&quot;  -- 方法的参数<br> * ;  --java语句的结束符<br> *&#x2F;<br>System.out.println(&quot;hello java123~&quot;);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/17/hello-world/"/>
      <url>/2020/06/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
