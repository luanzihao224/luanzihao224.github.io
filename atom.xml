<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啃java</title>
  
  <subtitle>累不行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.fate-seeker.com/"/>
  <updated>2020-06-22T14:09:37.811Z</updated>
  <id>https://blog.fate-seeker.com/</id>
  
  <author>
    <name>xiaohei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo添加访问统计</title>
    <link href="https://blog.fate-seeker.com/2020/06/22/Statistic/"/>
    <id>https://blog.fate-seeker.com/2020/06/22/Statistic/</id>
    <published>2020-06-22T14:03:17.000Z</published>
    <updated>2020-06-22T14:09:37.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tips-前导必备"><a href="#Tips-前导必备" class="headerlink" title="Tips:前导必备"></a>Tips:前导必备</h2><ul><li>注意备份所有修改过的文件</li><li>教程针对使用的是<code>yilia</code>主题</li><li>访问量统计使用<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a><a id="more"></a></li></ul><h2 id="1、配置是否开启不蒜子访问量统计功能"><a href="#1、配置是否开启不蒜子访问量统计功能" class="headerlink" title="1、配置是否开启不蒜子访问量统计功能"></a>1、配置是否开启不蒜子访问量统计功能</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>themes/yilia/_config.yml</code>添加属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 是否开启访问量统计功能(不蒜子)<br>busuanzi:<br> enable: true<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/config.jpg" alt="config"></p><h2 id="2、引入不蒜子并添加站点访问量"><a href="#2、引入不蒜子并添加站点访问量" class="headerlink" title="2、引入不蒜子并添加站点访问量"></a>2、引入不蒜子并添加站点访问量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在themes/yilia/layout/_partial/footer.ejs末尾添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;<br>        &lt;!-- 不蒜子统计 --&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;<br>                本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次<br>        &lt;&#x2F;span&gt;<br>        &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot; style&#x3D;&#39;display:none&#39;&gt;<br>                本站访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人<br>        &lt;&#x2F;span&gt;<br>        &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;<br>  &lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/footer.jpg" alt="footer"></p><h2 id="3、添加文章访问量"><a href="#3、添加文章访问量" class="headerlink" title="3、添加文章访问量"></a>3、添加文章访问量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>themes/yilia/layout/_partial/post/date.ejs</code>开头添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt;<br>        &lt;!-- 不蒜子统计 --&gt;<br>        &lt;span id&#x3D;&quot;busuanzi_container_page_pv&quot; style&#x3D;&#39;display:none&#39; class&#x3D;&quot;&lt;%&#x3D; class_name %&gt;&quot;&gt;<br>              &lt;i class&#x3D;&quot;icon-smile icon&quot;&gt;&lt;&#x2F;i&gt; 阅读数：&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;次<br>        &lt;&#x2F;span&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p><img src="/2020/06/22/Statistic/date.jpg" alt="date"></p><ul><li>重启即可查看效果</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tips-前导必备&quot;&gt;&lt;a href=&quot;#Tips-前导必备&quot; class=&quot;headerlink&quot; title=&quot;Tips:前导必备&quot;&gt;&lt;/a&gt;Tips:前导必备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意备份所有修改过的文件&lt;/li&gt;
&lt;li&gt;教程针对使用的是&lt;code&gt;yilia&lt;/code&gt;主题&lt;/li&gt;
&lt;li&gt;访问量统计使用&lt;a href=&quot;http://busuanzi.ibruce.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不蒜子&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.fate-seeker.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.fate-seeker.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>mind</title>
    <link href="https://blog.fate-seeker.com/2020/06/22/Javaoop/"/>
    <id>https://blog.fate-seeker.com/2020/06/22/Javaoop/</id>
    <published>2020-06-22T12:35:41.000Z</published>
    <updated>2020-06-22T13:03:00.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><a id="more"></a><h2 id="Java类及类的成员"><a href="#Java类及类的成员" class="headerlink" title="Java类及类的成员"></a>Java类及类的成员</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类和对象的使用：<br>创建类，设计类的成员<br>创建类的对象<br>通过“对象.属性”、”对象.方法”的方式调用</p><ul><li><p>类：对一类事物的描述，是抽象、概念上的定义</p><ul><li><p>可以通过final、abstract修饰</p><ul><li><p>final修饰</p><ul><li>final修饰的类不能被其他的类所继承（其中的方法全为final的方法）</li></ul></li><li><p>abstract修饰 </p><ul><li>此类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li></ul></li></ul></li></ul></li><li><p>对象：实际存在的该类事物的个体（实例）</p><p>面向对象的程序设计的重点就是设计类<br>设计类就是设计类的成员</p><ul><li>每一个实例haul的对象都独立的拥有一套类的属性，意味着我们修改一个对象的属性值a，不会影响另一个对象的a的值（static修饰的除外）</li><li>通过”对象.属性”、”对象.方法”的方式调用</li></ul></li></ul><h3 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h3><ul><li><p>属性</p><p>①默认初始化<br> ②显式初始化/⑤在代码块中赋值<br> ③构造器中初始化<br> ④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值<br>执行的先后顺序：① - ② / ⑤ - ③ - ④</p><p>显示初始化和代码块中赋值是同等地位的，谁先谁后就看在代码中的顺序关系了</p><ul><li><p>属性可以被final、static等修饰</p><ul><li><p>final修饰属性</p><ul><li>可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</li></ul></li><li><p>static修饰属性</p><ul><li>静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</li><li>静态变量的加载要早于对象的创建</li><li>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中</li><li>我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的</li></ul></li></ul></li><li><p>属性 vs 局部变量</p><ul><li><p>相同点</p><ul><li>格式：（看情况添加修饰）数据类型 变量名 = 变量值</li><li>先声明后使用（必须初始化后才能使用）</li><li>都有其对应的作用域</li></ul></li><li><p>不同点</p><ul><li><p>在类中声明位置不同</p><ul><li>属性直接定义在类的{}中</li><li>局部变量定义在方法体、构造器、形参、代码块</li></ul></li><li><p>关于权限修饰符的不同</p><ul><li>属性可以使用如public等的权限修饰符而局部变量不行</li></ul></li><li><p>默认初始化的情况</p><ul><li>属性：数值类型的默认初始化为0\0.0，boolean类型的为false，引用类型的为null</li><li>局部变量：没有默认初始化，意味着在使用前要显示初始化值</li></ul></li><li><p>在内存中加载的位置</p><ul><li>属性加载到堆区（非static），局部变量在栈区</li></ul></li><li><p>局部变量不能用static修饰</p></li></ul></li></ul></li></ul></li><li><p>方法</p><ul><li><p>格式：权限修饰符 （修饰词） 返回值类型（形参列表）方法名{ 方法体 }</p></li><li><p>方法可以被static、final、abstract修饰</p><ul><li><p>static修饰方法</p><ul><li>可以通过”类名.”的方式调用，也可通过对象调用</li><li>被static修饰是静态方法，随着类的加载而加载，在方法中只能调用static方法和属性，不能出现this、super关键字（因为这些都是和对象有关，而静态方法的加载早于对象的创建）</li></ul></li><li><p>final修饰的方法不能够被重写</p></li><li><p>abstract修饰方法 </p><ul><li>抽象方法只方法的声明，没方法体</li><li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的</li><li>若子类重写了父类中的所有的抽象方法后，此子类方可实例化 、若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li></ul></li></ul></li><li><p>方法的重载</p><ul><li>同一个类（或子类中）中允许存在一个及多个同名的方法，只要他们的参数列表不同（参数个数，参数类型不同），这些方法之间构成了重载</li><li>方法的签名（方法名和形参列表）要不同，和方法的权限修饰符、返回值类型、方法体、形参变量名无关</li><li>方法名—&gt;参数列表，可以确定一个方法</li></ul></li><li><p>方法的重写 </p><ul><li><p>子类继承父类后，可以在子类中定义与父类同名同参的方法进行覆盖操作（privat、static、final修饰的不行）</p></li><li><p>重写主要是为了多态，实现地址晚绑定的操作</p></li><li><p>重写的注意事项</p><ul><li>子类重写的方法的权限修饰符不小于父类中被重写的权限修饰符（子类不能重写父类中声明为private的方法）</li><li>父类中被重写的方法的返回值为void，则子类重写的方法的返回值类型也为void</li><li>父类中被重写的方法的返回值类型为A类型，则子类重写的方法的返回值类为A类型或者A类型的子类（子类是针对A类型是一个类类型而言的）</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li><li>子类和父类中同名同参的方法要么都是static或者都是非static的，非static的是重写，static的不是重写</li></ul></li></ul></li><li><p>Java中参数传递机制：值传递机制</p></li><li><p>递归方法</p><ul><li>一个方法体内，自己调用自己（一定要朝着已知方向递归，不然就会无穷递归）</li></ul></li></ul></li><li><p>构造器</p><ul><li><p>构造器的作用</p><ul><li>创建对象</li><li>初始化对象信息</li></ul></li><li><p>使用说明</p><ul><li>如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li><li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li><li>定义构造器的格式：权限修饰符  类名(形参列表){}</li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一个类中，至少会有一个构造器</li></ul></li><li><p>内部第一行为this(…)或super(…)</p><p>创建一个子类对象，必须先初始化父类对象（即先调用父类的构造器，这也是为什么this(…)和super(…)只能放在首行的原因）</p><p>当子类继承父类后，就继承了父类中所有的属性和方法，那么子类有必要知道父类如何为对象初始化！那就要先调用父类的构造器才行!</p><ul><li><p>this</p><ul><li>我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li><li>构造器中不能通过”this(形参列表)”方式调用自己（无穷递归了）</li><li>如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行，故只能有一个</li></ul></li><li><p>super</p><ul><li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li><li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li><li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</li><li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li><li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li></ul></li></ul></li></ul></li><li><p>代码块</p><ul><li><p>用来初始类和对象的信息</p></li><li><p>static代码块</p><ul><li>内部可以输出语句</li><li>随着类的加载而执行,而且只执行一次</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul></li><li><p>非static代码块</p><ul><li>内部可以输出语句</li><li>随着对象的创建而执行</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul></li><li><p>总结子类和父类中加载个模块的顺序：由父及子，静态先行</p></li></ul></li><li><p>内部类</p><ul><li><p>概述”：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</p></li><li><p>成员内部类</p><ul><li><p>static</p><ul><li><p>创建内部类的对象方式：外部类.内部类 引用名 = new 外部类.内部类()；</p><p>//创建静态的Dog内部类的实例(静态的成员内部类):<br>Person.Dog dog = new Person.Dog();</p></li><li><p>内部类内部调用外部类的结构</p><ul><li>内部类成员直接调，如在方法中有相同的名称的形参就可以加上this</li><li>外部类的成员 外部类名.this.的方式调用</li></ul></li></ul></li><li><p>非static</p><ul><li><p>因为是非static只能通过外部类的对象类创建：外部类.内部类 引用名 = 外部类对象.new 内部类() </p><p>//创建非静态的Bird内部类的实例(非静态的成员内部类):<br>//Person.Bird bird = new Person.Bird();//错误的<br>Person p = new Person();<br>Person.Bird bird = p.new Bird();</p></li><li><p>static只能调用外部类静态的结构，非static静态和非静态的都能调用</p></li></ul></li></ul></li><li><p>局部内部类</p><ul><li>主要的应用就是返回一个实现了一个接口的实现类的对象</li><li>某个方法中有内部类并且在内部类中方法中调用了该方法中的属性，则该属性为final修饰的</li></ul></li><li><p>成员内部类和局部内部类在编译以后都会生成字节码文件</p><p>格式：成员内部类：外部类$内部类名.class</p><pre><code>局部内部类：外部类$数字 内部类名.class</code></pre></li></ul></li></ul><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><ul><li><p>封装性的引入：隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想</p></li><li><p>简单的体现：讲类中的属性设置为private权限的并提供公共的(设置)setXxx和（获取）getXxx方法来操作该属性</p></li><li><p>灵活的使用四种权限修饰符来修饰属性、方法、构造器、内部类已达到隐藏的目的</p></li><li><p>单例模式（主要将构造器声明为private，使得外部不能创建对象，需要static配合）</p><ul><li><p>概述：所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</p></li><li><p>饿汉式1</p><ul><li>内部有一个静态的本类的对象并显示初始化了，并通过方法返回</li></ul></li><li><p>饿汉式2</p><ul><li>内部有一个静态的本类的对象放在静态代码块中初始化了，并通过方法返回</li></ul></li><li><p>懒汉式</p><ul><li>内部有一个静态的本类的对象并显示置为null，在返回的时候判定是否为空（空就创建），然后返回（线程不安全）</li></ul></li></ul></li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li><p>关键字extends</p></li><li><p>如果没有显示指定父类，默认继承与java.lang.Object类</p></li><li><p>好处</p><ul><li>减少代码的冗余，提高代码的复用性</li><li>便于功能的拓展</li><li>为之后多态性的使用，提供了前提</li></ul></li><li><p>格式：class A extends B{}</p></li><li><p>说明</p><ul><li>一旦子类继承了父类就继承了父类中的所有的属性和方法（构造器不能够被继承），由于权限的影响虽然继承了父类中private的方法，但是子类不能调用</li><li>子类继承父类后还可定义自己特定的结构，实现对父类功能的拓展</li><li>Java的单继承性：一个类只能有一个直接父类</li><li>子父类的概念是相对的</li><li>子类直接继承的称为直接父类，间接继承的称为间接父类</li><li>子类继承父类后所有的间接父类的属性和方法都会继承</li></ul></li><li><p>子类对象实例化全过程</p><ul><li>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用</li><li>创建一个子类对象，必须先初始化父类对象</li></ul></li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><ul><li><p>可以理解为一种事物的多种形态</p></li><li><p>多态性依赖于类的继承、方法的重写</p></li><li><p>多态性的使用：虚拟方法调用</p><ul><li><p>父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p></li><li><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><ul><li><p>向下转型</p><ul><li>当调用的方法是子类型中特有的，父类型中不存在，必须进行向下转换</li><li>为了解决编译时只能调用父类中有的结构，要使用向下转型（强制类型转换）</li><li>Father f1 = new Son();   // 这就叫 upcasting （向上转型)<br>// 现在 f1 引用指向一个Son对象</li></ul></li></ul></li></ul></li></ul><p>Son s1 = (Son)f1;   // 这就叫 downcasting (向下转型)<br>// 现在f1 还是指向 Son对象<br>            - instanceof 运算符，返回值是boolean类型，用于判断左边的对象与右边的类，当左边的对象是右边类或者子类所创建的对象时，返回值true，否则返回false<br>            - instanceof使用：new A()，赋给一个A或A的父类引用 x ，那么 x instanceof A及A的父类都是返回true</p><pre><code>- 编译看左边，运行看右边（适用于方法）- 对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</code></pre><ul><li><p>多态性的概念也可以被说成“一个接口，多个方法”。</p><ul><li>java实现运行时多态性的基础是动态方法调度</li><li>它是一种在运行时而不是在编译期调用重载方法的机制</li></ul></li></ul><h2 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h2><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul><li>使用在方法中</li><li>作用：结束方法；针对有返回值的方法，返回所要的数据</li><li>注意事项：在return后不能声明执行语句（因为不能被执行到，会报错）</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li><p>可以调用方法、属性、构造器</p><ul><li><p>通常情况下调用方法和属性都省略不写</p></li><li><p>属性</p><ul><li>主要是为了解决在方法和构造器中的形参和类的属性名同名，为了区分它们可以在类的属性前加this（非static）</li></ul></li><li><p>方法</p><ul><li>通常省略</li></ul></li><li><p>构造器</p><ul><li>详细见构造器中描述</li></ul></li></ul></li><li><p>this是非静态结构的隐式参数</p></li><li><p>this可以理解为：当前对象（非静态方法） 或 当前正在创建对象（构造器来说）</p></li></ul><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ul><li><p>使用说明</p><ul><li>JDK1.2开始不能使用以java开头命名的包</li><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用package声明类或接口所属的包，声明在源文件的首行</li><li>包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li><li>每”.”一次，就代表一层文件目录</li></ul></li><li><p>不同功能的类分包存放</p><ul><li>MVC设计模式</li></ul></li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li><p>为了方便使用写好的类（不导入就好写全名）</p></li><li><p>不同于C++的include（include是不包头文件怎么都不能用，Java不导入写全名也行）</p></li><li><p>使用说明</p><ul><li>在源文件中显式的使用import结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出即可</li><li>使用”xxx.*”方式表明可以调用xxx包下的所结构（这里指的是类，不包含子包下的类）。但是如果使用的是xxx子包下的结构，则仍需要显式导入</li><li>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</li><li>如果使用的类或接口是本包下定义的，则可以省略import结构</li><li>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示</li><li>import static:导入指定类或接口中的静态结构:属性或方法。 （类.*号的时候并不要求这个类中所有的方法全是静态的，只是会导入这个类中所有的静态方法）</li></ul></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li><p>可以调用属性、方法、构造器</p></li><li><p>当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性</p></li><li><p>当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法</p></li><li><p>调用构造器</p><ul><li>详细见构造器中</li></ul></li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>推荐这几篇博客：<br><a href="https://blog.csdn.net/yabay2208/article/details/71171207" target="_blank" rel="noopener">https://blog.csdn.net/yabay2208/article/details/71171207</a><br><a href="https://blog.csdn.net/qq_36522306/article/details/80584595?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_36522306/article/details/80584595?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>这个是JVM说类的加载，学了之后可以看看：<br><a href="https://github.com/LuVx21/doc/blob/master/source/_posts/03.Java/02.jvm/00.JVMClassLoader.md#%E5%8F%82%E8%80%83" target="_blank" rel="noopener">https://github.com/LuVx21/doc/blob/master/source/_posts/03.Java/02.jvm/00.JVMClassLoader.md#%E5%8F%82%E8%80%83</a></p><ul><li><p>可以修饰属性、方法、代码块、内部类</p><ul><li>详细见各个模块中</li></ul></li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li><p>可以修饰类、方法、变量（详细见各个模块）</p><ul><li>修饰类，该类不能被继承，类中的方法为final</li><li>修饰方法，该方法不能被重写</li><li>修饰后变成常量了，要初始化</li></ul></li></ul><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><ul><li>可以修饰类和方法（详细见各个模块）</li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><ul><li>详细见接口</li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="Object类是所有类的根父类"><a href="#Object类是所有类的根父类" class="headerlink" title="Object类是所有类的根父类"></a>Object类是所有类的根父类</h3><h3 id="如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类"><a href="#如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类" class="headerlink" title="如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类"></a>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</h3><h3 id="Object类中的功能（属性、方法）具有通用性"><a href="#Object类中的功能（属性、方法）具有通用性" class="headerlink" title="Object类中的功能（属性、方法）具有通用性"></a>Object类中的功能（属性、方法）具有通用性</h3><pre><code>属性：无方法：equals() / toString() / getClass() / hashCode() / clone() / finalize() / wait() / notify() / notifyAll()</code></pre><h3 id="Object类中只声明了一个空参的构造器"><a href="#Object类中只声明了一个空参的构造器" class="headerlink" title="Object类中只声明了一个空参的构造器"></a>Object类中只声明了一个空参的构造器</h3><h2 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h2><h3 id="为了使基本数据类型的变量具有类的特征，引入包装类"><a href="#为了使基本数据类型的变量具有类的特征，引入包装类" class="headerlink" title="为了使基本数据类型的变量具有类的特征，引入包装类"></a>为了使基本数据类型的变量具有类的特征，引入包装类</h3><h3 id="包装类和基本数据类型对应"><a href="#包装类和基本数据类型对应" class="headerlink" title="包装类和基本数据类型对应"></a>包装类和基本数据类型对应</h3><ul><li>Byte</li><li>Short</li><li>Integer</li><li>Long</li><li>Float</li><li>Double</li><li>Boolean</li><li>Character</li></ul><h3 id="基本数据类型、包装类、String三者转换"><a href="#基本数据类型、包装类、String三者转换" class="headerlink" title="基本数据类型、包装类、String三者转换"></a>基本数据类型、包装类、String三者转换</h3><ul><li>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱</li><li>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx) </li><li>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</li><li>转换时，可能会报NumberFormatException</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>Vector类中关于添加元素，只定义了形参为Object类型的方法：<br>v.addElement(Object obj);   //基本数据类型 —&gt;包装类 —&gt;使用多态</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="使用interface关键字定义"><a href="#使用interface关键字定义" class="headerlink" title="使用interface关键字定义"></a>使用interface关键字定义</h3><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul><li><p>Java中，接口和类是并列的两个结构</p></li><li><p>结构</p><ul><li><p>属性：用public static final修饰的</p></li><li><p>方法：public abstract修饰的</p></li><li><p>静态方法</p><ul><li>只能通过接口名调用</li></ul></li><li><p>默认方法</p><ul><li><p>实现类中可以调用接口中默认方法</p></li><li><p>一旦实现类重写了接口中默认方法，就会调用重写的方法</p></li><li><p>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则</p></li><li><p>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突（如果继承了父类中也有这个同名同参的方法，就不会冲突）</p></li><li><p>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p><ul><li>父类：super.</li><li>接口：接口名.super.</li></ul></li></ul></li></ul></li><li><p>接口中不能定义构造器的！意味着接口不可以实例化</p></li><li><p>Java开发中，接口通过让类去实现(implements)的方式来使用（类似抽象方法）</p></li><li><p>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</p><ul><li>格式：class AA extends BB implements CC,DD,EE</li></ul></li><li><p>接口与接口之间可以继承，而且可以多继承</p></li><li><p>接口的具体使用，体现多态性，接口实际上可以看成是一种规范</p></li></ul><h3 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h3><ul><li><p>接口使用上也满足多态性</p></li><li><p>接口，实际上就是定义了一种规范</p></li><li><p>开发中，体会面向接口编程！</p><ul><li>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个<br>数据库厂商的API</li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>代理模式</li><li>工厂的设计模式</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java面向对象&quot;&gt;&lt;a href=&quot;#Java面向对象&quot; class=&quot;headerlink&quot; title=&quot;Java面向对象&quot;&gt;&lt;/a&gt;Java面向对象&lt;/h1&gt;
    
    </summary>
    
    
      <category term="mind" scheme="https://blog.fate-seeker.com/categories/mind/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人blog搭建教程</title>
    <link href="https://blog.fate-seeker.com/2020/06/22/hexo/"/>
    <id>https://blog.fate-seeker.com/2020/06/22/hexo/</id>
    <published>2020-06-22T02:26:17.000Z</published>
    <updated>2020-06-22T14:11:04.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。"><a href="#hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。" class="headerlink" title="hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。"></a>hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</h1><a id="more"></a><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><h2 id="Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。"><a href="#Hexo是一款基于Node-js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。" class="headerlink" title="Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</h2><h2 id="教程分三个部分，"><a href="#教程分三个部分，" class="headerlink" title="教程分三个部分，"></a>教程分三个部分，</h2><h3 id="第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。"><a href="#第一部分：hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。" class="headerlink" title="第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。"></a>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</h3><h3 id="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流"><a href="#第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding-page部署实现国内外分流" class="headerlink" title="第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流"></a>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</h3><h3 id="第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。"><a href="#第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。" class="headerlink" title="第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。"></a>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</h3><hr><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。"><a href="#hexo的初级搭建还有部署到github-page上，以及个人域名的绑定。" class="headerlink" title="hexo的初级搭建还有部署到github page上，以及个人域名的绑定。"></a>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</h3><h2 id="Hexo简介-1"><a href="#Hexo简介-1" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li><font size="5">1. 安装Git</font></li><li><font size="5">2. 安装Node.js</font></li><li><font size="5">3. 安装Hexo</font></li><li><font size="5">4. GitHub创建个人仓库</font></li><li><font size="5">5. 生成SSH添加到GitHub</font></li><li><font size="5">6. 将hexo部署到GitHub</font></li><li><font size="5">7. 设置个人域名</font></li><li><font size="5">8. 发布文章</font></li></ul><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码<br>我这里使用的ubuntu18.04</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@VM-0-2-ubuntu:&#x2F;opt&#x2F;blog# cat &#x2F;proc&#x2F;version<br>Linux version 4.15.0-88-generic (buildd@lgw01-amd64-036) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)) #88-Ubuntu SMP Tue Feb 11 20:11:34 UTC 2020<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code>来查看一下版本</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2.安装nodejs"></a>2.安装nodejs</h2><p>Hexo是基于nodejs编写的，所以需要安装一下nodeJs和里面的npm工具。<br>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了。<br>linux系统可以通过nvm安装管理nodejs<br>nvm全名node.js version management，顾名思义是一个nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs<br>可以去<a href="https://github.com/nvm-sh/nvm#installation" target="_blank" rel="noopener">nvm官方介绍</a>了解详细<br><font size="4">1、安装</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.31.1&#x2F;install.sh | bash   (推荐)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.31.1&#x2F;install.sh | bash<br></code></pre></td></tr></table></figure><p>之后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;<br>[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot; # This loads nvm<br>source ~&#x2F;.bashrc(就可以立刻加载修改后的设置，使之生效。)<br></code></pre></td></tr></table></figure><p><font size="4" color="red">遇到的问题：</font><br>克隆github项目出现SSL connect error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone https:&#x2F;&#x2F;github.com&#x2F;creationix&#x2F;nvm     <br>Cloning into &#39;nvm&#39;...<br>fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;creationix&#x2F;nvm&#x2F;&#39;: SSL connect error<br></code></pre></td></tr></table></figure><p><font size="4">原因</font><br>ssl证书可能过期了，一般出现在contos较多<br><font size="4">解决办法</font><br>contos使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">yum update -y nss curl libcurl<br></code></pre></td></tr></table></figure><p><font size="4">2、安装node</font><br>用nvm安装node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">nvm install 12我这里选择了较新的版本，也可以选择相对稳定的10<br>nvm alias default 12.18.0设置默认版本<br>或者可以通过<br>nvm install stable安装较稳定的版本<br>nvm alias default [版本号]<br>node -v查看当前node版本<br>npm -v<br></code></pre></td></tr></table></figure><p>如果重新启动或者断开中断后无法使用node命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">nvm use [版本号]切换到相应版本 版本号不用写v<br>node -v再次查看是否正确<br>npm -v<br></code></pre></td></tr></table></figure><p>检查一下有没有安装成功<br>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。<br>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install -g hexo-cli全局安装hexo<br></code></pre></td></tr></table></figure><p>依旧用<code>hexo -v</code>查看一下版本<br>至此就全部安装完了。<br>接下来初始化一下hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo init myblog这里的myblog可以输入任意字符，就是为了建立一个文件夹放我们blog<br></code></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd myblog &#x2F;&#x2F;进入这个myblog文件夹<br>npm install&#x2F;&#x2F;安装 Node.js 所需依赖<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**<br><img src="/2020/06/22/hexo/dir.jpg" alt="目录截图"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo g&#x2F;&#x2F;生成静态页面<br>hexo server开启hexo服务<br></code></pre></td></tr></table></figure>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。<br>大概长这样<br><img src="/2020/06/22/hexo/blog.jpg" alt="blog截图"><br>我这里是装了主题了:)<br>使用ctrl+c可以把服务关掉。<h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2></li></ul><p>首先，你先要有一个GitHub账户，去注册一个吧。<br>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img src="/2020/06/22/hexo/git1.jpg" alt="git"></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="/2020/06/22/hexo/git2.jpg" alt="git2"></p><p>点击create repository。</p><h2 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h2><p>回到你的git bash中，(终端或者打开git bash)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.name &quot;yourname&quot;&#x2F;&#x2F;你的github用户名<br>git config --global user.email &quot;youremail&quot;&#x2F;&#x2F;可以输入注册邮箱<br></code></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh-keygen -t rsa -C &quot;youremail&quot;&#x2F;&#x2F;一直回车<br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p><img src="/2020/06/22/hexo/sshkey.jpg" alt="ssh"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat id_rsa.pub<br></code></pre></td></tr></table></figure><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="/2020/06/22/hexo/sshkey2.jpg" alt="ssh"></p><p>在gitbash中，查看是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h2 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h2><p>虽然我们可以通过<code>hexo s</code>启动服务，通过IP访问，或者域名解析到IP，但是谁用一直占用这一台电脑24小时开着呢<br>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo clean<br>hexo generate<br>hexo deploy<br>这些我们都可以进行简写<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>其中:<br><code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code>顾名思义，生成静态文章，可以用<code>hexo g</code>缩写<br><code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。<br>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code>这个网站看到你的博客了！！</p><p><img src="/2020/06/22/hexo/git3.jpg" alt="git3"></p><h2 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7.设置个人域名"></a>7.设置个人域名</h2><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。<br>注册一个阿里云账户,在阿里云上买一个域名，我买的是<code>fate-seeker.com</code>，各个后缀的价格不太一样,看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p><img src="/2020/06/22/hexo/url.jpg" alt="url"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="/2020/06/22/hexo/url2.jpg" alt="url"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>最后，在gitbash中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hexo new newpapername<br></code></pre></td></tr></table></figure><p>就可以看到更新了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。&quot;&gt;&lt;a href=&quot;#hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。&quot; class=&quot;headerlink&quot; title=&quot;hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。&quot;&gt;&lt;/a&gt;hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。&lt;/h1&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.fate-seeker.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.fate-seeker.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>周杰伦【官方MV】Mojito - 周杰伦</title>
    <link href="https://blog.fate-seeker.com/2020/06/22/mv/"/>
    <id>https://blog.fate-seeker.com/2020/06/22/mv/</id>
    <published>2020-06-22T02:26:17.000Z</published>
    <updated>2020-06-22T12:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="周杰伦【官方MV】Mojito-周杰伦"><a href="#周杰伦【官方MV】Mojito-周杰伦" class="headerlink" title="周杰伦【官方MV】Mojito - 周杰伦"></a>周杰伦【官方MV】Mojito - 周杰伦</h2><p>转自bilibili @大家的音乐姬</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=883409884&bvid=BV1PK4y1b7dt&cid=201056987&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;周杰伦【官方MV】Mojito-周杰伦&quot;&gt;&lt;a href=&quot;#周杰伦【官方MV】Mojito-周杰伦&quot; class=&quot;headerlink&quot; title=&quot;周杰伦【官方MV】Mojito - 周杰伦&quot;&gt;&lt;/a&gt;周杰伦【官方MV】Mojito - 周杰伦&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="mv" scheme="https://blog.fate-seeker.com/categories/mv/"/>
    
    
      <category term="mv" scheme="https://blog.fate-seeker.com/tags/mv/"/>
    
  </entry>
  
  <entry>
    <title>java课程第三天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/22/String/"/>
    <id>https://blog.fate-seeker.com/2020/06/22/String/</id>
    <published>2020-06-21T16:26:17.000Z</published>
    <updated>2020-06-22T01:23:40.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String类："><a href="#String类：" class="headerlink" title="String类："></a>String类：</h2><h3 id="String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。"><a href="#String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。" class="headerlink" title="String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。"></a>String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。</h3><a id="more"></a><p>String字符串变量的创建：</p><p>声明：    　String 变量名;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">　　　　　　　　　String str;<br></code></pre></td></tr></table></figure><p>声明并初始化：　　String 变量名=”初始值”;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str &#x3D; &quot;挨点博客&quot;;<br></code></pre></td></tr></table></figure><p>String常用方法：</p><p>　　1、int length();　　语法：字符串变量名.length();　　返回值为 int 类型。得到一个字符串的字符个数（中、英、空格、转义字符皆为字符，计入长度）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String a&#x3D;&quot;挨点aidian \t\n&quot;;<br>        int l &#x3D; a.length();<br>        System.out.println(l);<br><br>运行结果：11<br></code></pre></td></tr></table></figure><p>2、char charAt(值);　　语法 ：字符串名.charAt(值);　　返回值为 char 类型。从字符串中取出指定位置的字符 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　String str&#x3D;&quot;张三疯&quot;;<br>        char c &#x3D; str.charAt(2);  <br>        System.out.println(&quot;指定字符为：&quot; + c); <br><br>运行结果：指定字符为：疯<br></code></pre></td></tr></table></figure><p>3、char  toCharArray();　　语法 ：字符串名.toCharArray();　　返回值为 char 数组类型。将字符串变成一个字符数组 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str&#x3D;&quot;张三疯&quot;；<br>char c[] &#x3D; str.toCharArray(); <br>for (int i &#x3D; 0; i &lt; c.length; i++)<br>System.out.println(&quot;转为数组输出:&quot; + c[i]);<br><br>　　　　　　运行结果：<br><br>转为数组输出:张<br>转为数组输出:三<br>转为数组输出:疯<br></code></pre></td></tr></table></figure><p>　4、int indexOf(“字符”)　　语法 ：字符串名.indexOf(“字符”)；字符串名.indexOf(“字符”,值)；查找一个指定的字符串是否存在，返回的是字符串的位置，如果不存在，则返回-1 。 </p><p>　　　　in lastIndexOf(“字符”) 得到指定内容最后一次出现的下标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str&#x3D;&quot;只为挨你近一点&quot;;<br>int a1 &#x3D; str.indexOf(&quot;你&quot;);&#x2F;&#x2F; 查找字符你的位置 <br>int a2 &#x3D; str.indexOf(&quot;为&quot;, 2);&#x2F;&#x2F; 查找为的位置，从第3个开始查找<br>int a3 &#x3D; str.lastIndexOf(&quot;点&quot;); <br>System.out.println(&quot;你的位置为:&quot; + a1); <br>System.out.println(&quot;为的位置为:&quot; + a2);<br>System.out.println(&quot;点最后出现的位置为:&quot; + a3);<br><br>运行结果：<br><br>你的位置为:3<br><br>为的位置为:-1<br><br>点最后出现的位置为:7<br></code></pre></td></tr></table></figure><p>5、toUpperCase()；  toLowerCase()；字符串大小写的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">String str&#x3D;&quot;hello world&quot;;<br>System.out.println(&quot;将字符串转大写为：&quot; + str.toUpperCase());<br>System.out.println(&quot;将字符串转换成小写为：&quot; + str.toUpperCase().toLowerCase());<br><br>运算结果：<br><br>将字符串转大写为：HELLO WORLD<br>将字符串转换成小写为：hello world<br></code></pre></td></tr></table></figure><p>6、String[] split(“字符”)　　根据给定的正则表达式的匹配来拆分此字符串。形成一个新的String数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;boo:and:foo&quot;;<br>String[] arr1 &#x3D; str.split(&quot;:&quot;);<br>String[] arr2 &#x3D; str.split(&quot;o&quot;);<br>运行结果：<br>　　arr1　　&#x2F;&#x2F;&#123; &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; &#125;<br>　　arr2　　&#x2F;&#x2F;&#123; &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; &#125;<br></code></pre></td></tr></table></figure><p>7、boolean equals(Object anObject)　　语法 ：字符串变量名.wquals(字符串变量名);　　返回值为布尔类型。所以这里用 if 演示。比较两个字符串是否相等，返回布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　　　　　　　　　　　String str &#x3D; &quot;hello&quot;;<br>String str1&#x3D;&quot;world&quot;;  <br>if(str.equals(str1)) <br>&#123;  <br> System.out.println(&quot;这俩字符串值相等&quot;); <br>&#125;  <br>else<br>&#123;<br> System.out.println(&quot;这俩字符串值不相等&quot;);  <br>&#125;<br>　　　　　　运行结果：<br><br>　　　　　　　　　　这俩字符串值不相等<br></code></pre></td></tr></table></figure><p>8、trim();　　去掉字符串左右空格　　replace(char oldChar,char newChar);新字符替换旧字符，也可以达到去空格的效果一种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;       他们总说话呱         &quot;;  <br>System.out.println(&quot;去掉左右空格后:&quot; + str.trim());<br> <br>运行结果：<br><br>　　去掉左右空格后:他们总说话呱<br><br><br><br>第二种：<br>String str &#x3D; &quot;       大多时候我都机智的一笔         &quot;;  <br>System.out.println(&quot;去掉左右空格后:&quot; + str.replace(&quot; &quot;,&quot;&quot;)); <br><br>运行结果：<br><br>　　去掉左右空格后:大多时候我都机智的一笔<br></code></pre></td></tr></table></figure><p>9、String substring(int beginIndex,int endIndex)　　截取字符串　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　 String str &#x3D; &quot;123挨点博客456&quot;;  <br>System.out.println(&quot;截取后的字符为：&quot; + str.substring(0,3));&#x2F;&#x2F; 截取0-3个位置的内容   不含3 <br>System.out.println(&quot;截取后字符为：&quot; + str.substring(2));&#x2F;&#x2F; 从第3个位置开始截取    含2<br><br>　　运行结果：<br><br>　　　　截取后的字符为：123<br>　　　　截取后字符为：3挨点博客456<br></code></pre></td></tr></table></figure><p>10、boolean equalsIgnoreCase(String) 忽略大小写的比较两个字符串的值是否一模一样，返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　　String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;hello world&quot;;<br>        if(str.equalsIgnoreCase(str1))<br>        &#123;<br>            System.out.println(&quot;两个字符串相等&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;两个字符串不相等&quot;);<br>        &#125;<br><br>运行结果：<br><br>　　　　两个字符串相等<br></code></pre></td></tr></table></figure><p>11、boolean contains(String) 判断一个字符串里面是否包含指定的内容，返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;WO&quot;;<br>        if(str.contains(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在WO&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在WO<br></code></pre></td></tr></table></figure><p>12、boolean startsWith(String)　　测试此字符串是否以指定的前缀开始。返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>　　　　 String str &#x3D; &quot;HELLO WORLd&quot;;<br>        String str1 &#x3D; &quot;HE&quot;;<br>        if(str.startsWith(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在HE前缀开头&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在HE前缀开头<br></code></pre></td></tr></table></figure><p>13、boolean endsWith(String)　　测试此字符串是否以指定的后缀结束。返回一个布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>        String str &#x3D; &quot;你到底呱不呱&quot;;<br>        String str1 &#x3D; &quot;呱&quot;;<br>        if(str.endsWith(str1))<br>        &#123;<br>            System.out.println(&quot;str内容中存在\&#39;呱\&#39;后缀结束&quot;);<br>        &#125;<br>        else<br>        &#123;<br>            System.out.println(&quot;抱歉没找着&quot;);<br>        &#125;<br>运行结果：<br><br>　　str内容中存在&#39;呱&#39;后缀结束<br></code></pre></td></tr></table></figure><p>14、上面提到了replace方法，接下继续补充一下  String replaceAll(String,String) 将某个内容全部替换成指定内容，　　 String repalceFirst(String,String) 将第一次出现的某个内容替换成指定的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>String str &#x3D; &quot;，，，，，，大多时候我都机智的一笔，，，，， &quot;;  <br>System.out.println(&quot;改变后：&quot; + str.replaceAll(&quot;，&quot;,&quot;a&quot;));<br><br>运行结果：改变后：a，，，，，大多时候我都机智的一笔，，，，， <br><br><br>String str &#x3D; &quot;，，，，，，大多时候我都机智的一笔，，，，， &quot;;  <br>System.out.println(&quot;改变后：&quot; + str.replaceFirst(&quot;帅吗&quot;,&quot;很帅哦&quot;));<br><br>运行结果：改变后：，，，，，，大多时候我都机智的一笔，，，，，<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;String类：&quot;&gt;&lt;a href=&quot;#String类：&quot; class=&quot;headerlink&quot; title=&quot;String类：&quot;&gt;&lt;/a&gt;String类：&lt;/h2&gt;&lt;h3 id=&quot;String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。&quot;&gt;&lt;a href=&quot;#String类在java-lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer-amp-StringBuilder-类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。-详情解释请点击-包含在一对双引号之间。&quot; class=&quot;headerlink&quot; title=&quot;String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp;amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。&quot;&gt;&lt;/a&gt;String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，StringBuffer &amp;amp; StringBuilder 类。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 详情解释请点击    包含在一对双引号之间。&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mind</title>
    <link href="https://blog.fate-seeker.com/2020/06/20/mind/"/>
    <id>https://blog.fate-seeker.com/2020/06/20/mind/</id>
    <published>2020-06-20T14:35:41.000Z</published>
    <updated>2020-06-22T02:01:55.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xmind思维导图"><a href="#Xmind思维导图" class="headerlink" title="Xmind思维导图"></a>Xmind思维导图</h1><a id="more"></a><pre><code>java基础篇</code></pre><h2 id="java基础篇1"><a href="#java基础篇1" class="headerlink" title="java基础篇1"></a><center><strong>java基础篇1</strong></center></h2><br><div class="row">    <embed src="JAVAse1.pdf" width="100%" height="550" type="application/pdf"></div> <br><h2 id="java基础篇2"><a href="#java基础篇2" class="headerlink" title="java基础篇2"></a><center><strong>java基础篇2</strong></center></h2><br><div class="row">    <embed src="Javase2.pdf" width="100%" height="550" type="application/pdf"></div> <br><h2 id="java面向对象"><a href="#java面向对象" class="headerlink" title="java面向对象"></a><center><strong>java面向对象</strong></center></h2><br><div class="row">    <embed src="Javaoop.pdf" width="100%" height="550" type="application/pdf"></div> <br><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Xmind思维导图&quot;&gt;&lt;a href=&quot;#Xmind思维导图&quot; class=&quot;headerlink&quot; title=&quot;Xmind思维导图&quot;&gt;&lt;/a&gt;Xmind思维导图&lt;/h1&gt;
    
    </summary>
    
    
      <category term="mind" scheme="https://blog.fate-seeker.com/categories/mind/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java课程第五天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/18/day05/"/>
    <id>https://blog.fate-seeker.com/2020/06/18/day05/</id>
    <published>2020-06-18T02:18:17.000Z</published>
    <updated>2020-06-22T02:00:52.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-方法"><a href="#一-方法" class="headerlink" title="一,方法"></a>一,方法</h2><a id="more"></a><pre><code>--1,语法    方法的修饰符 方法的返回值 方法名([参数列表]){        方法体/java代码    }--2,方法调用</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法调用<br>public class Test1_Method &#123;<br>public static void main(String[] args) &#123;<br>System.out.println(1);<br>System.out.println(2);<br>System.out.println(3);<br><br>method();<br><br>System.out.println(4);<br>System.out.println(5);<br>&#125;<br>&#x2F;&#x2F;创建method():方法的修饰符 方法的返回值 方法名([参数列表])&#123;  &#125;<br>public static void method() &#123;<br>System.out.println(9);<br>System.out.println(8);<br>System.out.println(7);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,方法参数</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法传参<br>public class Test2_Method2 &#123;<br>public static void main(String[] args) &#123;<br><br>method(5);&#x2F;&#x2F;调用指定的方法<br>method2(&quot;jack&quot;);<br>method3(5,&quot;jack&quot;);<br>method4(10,5);<br><br>int m &#x3D; 10 ; <br>String n&#x3D;&quot;rose&quot;;<br>method5(n,m);<br><br>&#125;<br>&#x2F;&#x2F;5,创建方法时method5(n,m),类型必须匹配,多个参数逗号隔开<br>public static void method5(String a,int b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;4,创建方法时method4(10,5),类型必须匹配,多个参数逗号隔开<br>public static void method4(int a,int b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;3,创建方法时method3(5,&quot;jack&quot;),类型必须匹配,多个参数逗号隔开<br>public static void method3(int a,String b) &#123;<br>System.out.println(a);<br>System.out.println(b);<br>&#125;<br><br>&#x2F;&#x2F;2,创建方法时method2(&quot;jack&quot;),匹配传递过来的参数--参数类型 参数名--类型必须匹配<br>public static void method2(String b) &#123;<br>System.out.println(b);<br>&#125;<br><br><br>&#x2F;&#x2F;1,创建方法时method(5),匹配传递过来的参数--参数类型 参数名--类型必须匹配<br>public static void method(int a) &#123;<br>System.out.println(a);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,方法返回值</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法返回值<br>public class Test3_Method3 &#123;<br>public static void main(String[] args) &#123;<br><br>&#x2F;&#x2F;3,接收方法返回来的值,交给sum保存<br>int sum &#x3D; function(10);<br>System.out.println(sum);<br><br>int sum2 &#x3D; function2(5,10);<br>System.out.println(sum2);<br><br>String sum3 &#x3D; function3(&quot;jack&quot;,10,5);<br>System.out.println(sum3);&#x2F;&#x2F;jack105<br><br>String sum4 &#x3D; function4(10,5,&quot;jack&quot;);<br>System.out.println(sum4);&#x2F;&#x2F;15jack<br>&#125;<br>&#x2F;&#x2F;创建function4(10,5,&quot;jack&quot;)<br>public static String function4(int a,int b,String c) &#123;<br>&#x2F;&#x2F;5,  +号:数字间做加法运算,只要和字符串+就是拼接字符串<br>returna+b+c;<br>&#125;<br>&#x2F;&#x2F;创建function3(&quot;jack&quot;,10,5)<br>public static String function3(String a,int b,int c) &#123;<br>&#x2F;&#x2F;4,字符串和什么数据 进行+ 都是在拼串!!!<br>return a+b+c;<br>&#125;<br>&#x2F;&#x2F;创建function2(5,10)<br>public static int function2(int a,int b) &#123;<br>return a+b ; &#x2F;&#x2F;2,通过return关键字把值返回给 sum2保存<br>&#125;<br>&#x2F;&#x2F;1,创建function(10)--需要写明方法返回值的  类型<br>public static int function(int x) &#123;<br>&#x2F;&#x2F;2,通过return关键字,把方法返回值返回给调用位置<br>return x ;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-方法重载"><a href="#二-方法重载" class="headerlink" title="二,方法重载"></a>二,方法重载</h2><pre><code>--1,概述    在一个类中发生的现象.方法名都一样,但是参数列表不一样(个数或者类型)的现象.--2,练习：数字求和</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法重载overload:在一个类里,都是同名的方法,但是,参数列表不同.<br>&#x2F;&#x2F;好处:对于程序员而言,需要记忆的方法名很简单.只需要记同一个名字的方法即可<br>&#x2F;&#x2F;方法的参数可以很灵活的传入.<br>public class Test4_Overload &#123;<br>public static void main(String[] args) &#123;<br>add(1,2);<br>add(1,2,3);<br>add(&quot;jack&quot;,1,2);<br>add(1,2,&quot;jack&quot;);<br>&#125;<br>&#x2F;&#x2F;提供重载的add(1,2,&quot;jack&quot;)<br>public static void add(int a,int b,String c) &#123;<br>&#x2F;&#x2F;第一个+用来做加法运算,第二个+用来拼接字符串<br>System.out.println(a+b+c);&#x2F;&#x2F;3jack<br>&#125;<br>&#x2F;&#x2F;提供重载的add(&quot;jack&quot;,1,2)<br>public static void add(String a,int b,int c) &#123;<br>System.out.println(a+b+c);&#x2F;&#x2F;jack12<br>&#125;<br>&#x2F;&#x2F;提供重载的add(1,2,3)<br>public static void add(int a,int b,int c) &#123;<br>System.out.println(a+b+c);&#x2F;&#x2F;+加法运算<br>&#125;<br>&#x2F;&#x2F;提供add(1,2)<br>public static void add(int a,int b) &#123;<br>System.out.println(a+b);&#x2F;&#x2F;+加法运算<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习：数据的打印</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.method;<br>&#x2F;&#x2F;测试方法重载overload:在一个类里,都是同名的方法,但是,参数列表不同.<br>public class Test5_Overload2 &#123;<br>public static void main(String[] args) &#123;<br>print(10);<br>print(2.2);<br>print(true);<br>print(&quot;jack&quot;);<br>&#125;<br>&#x2F;&#x2F;提供了重载形式的print()<br>public static void print(int a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(double a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(boolean a) &#123;<br>System.out.println(a);<br>&#125;<br>public static void print(String a) &#123;<br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-数组"><a href="#三-数组" class="headerlink" title="三,数组"></a>三,数组</h2><pre><code>--1,概念    英文名字叫Array,标志是[]    作用是用来存储多个  相同类型的  数据.--2,特点    数组中的每个元素,都有下标,默认从0开始.    数组一旦创建，长度不可变.--3,创建数组:  数组类型  数组名 = 数组对象;    --一般分为动态初始化和静态初始化    --动态初始化        `int[] a = new int[5];`    --静态初始化        `int[] b = new int[]{9,8,7,6,5};`        `int[] c = {9,8,7,6,5};`--4,练习:数组中存入hello</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.array;<br>&#x2F;&#x2F;测试数组<br>public class Test6_Array &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,静态创建数组<br>char[] a &#x3D; new char[]&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;<br>char[] b &#x3D; &#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;<br><br>&#x2F;&#x2F;2,动态创建数组<br>char[] c &#x3D; new char[5];&#x2F;&#x2F;有数据,是默认值\u0000<br>c[0] &#x3D; &#39;h&#39; ; &#x2F;&#x2F;修改下标为0的元素<br>c[1] &#x3D; &#39;e&#39; ; &#x2F;&#x2F;修改下标为1的元素<br>c[2] &#x3D; &#39;l&#39; ; &#x2F;&#x2F;修改下标为2的元素<br>c[3] &#x3D; &#39;l&#39; ; &#x2F;&#x2F;修改下标为3的元素<br>c[4] &#x3D; &#39;o&#39; ; &#x2F;&#x2F;修改下标为4的元素<br><br>&#x2F;&#x2F;数组长度才是5,下标是从0开始的,下标最大值也就是4,根本就不存在5下标<br>&#x2F;&#x2F;数组下标越界:java.lang.ArrayIndexOutOfBoundsException: 5<br>&#x2F;&#x2F;System.out.println( c[5] );<br><br>System.out.println(a);<br>System.out.println(b);<br>System.out.println(c);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,获取数组的长度:length属性直接获取,例如:a.length--6,练习:输出每个月的天数</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.array;<br>&#x2F;&#x2F;测试数组练习<br>public class Test7_Array2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;输出每个月的天数<br>&#x2F;&#x2F;1,静态  -- 创建数组<br>int[] a &#x3D; &#123;31,28,31,30,31,30,31,31,30,31,30,31&#125; ;<br><br>&#x2F;&#x2F;2,遍历数组&#x2F;循环数组--获取每个元素<br>&#x2F;&#x2F;int i &#x3D; 0 ;是指从下标为0的元素开始 ,向后遍历.i代表下标<br>&#x2F;&#x2F;i &lt;&#x3D; a.length-1 ;表示下标i可以取到的最大值是  数组长度-1<br>&#x2F;&#x2F;i++; 下标的更改方式,从0开始依次递增<br>for( int i &#x3D; 0 ; i &lt;&#x3D; a.length-1  ; i++ ) &#123;<br>&#x2F;&#x2F;a[i] 是指根据下标i获取a数组中存着的元素  并打印<br>&#x2F;&#x2F;System.out.println(&quot;1月有31天&quot;);<br>System.out.println(i+1+&quot;月有&quot;+a[i]+&quot;天&quot;);<br>&#125;<br><br>&#x2F;&#x2F;遍历数组，存入1到10<br>&#x2F;&#x2F;1,动态  -- 创建数组<br>int[] b &#x3D; new int[10];&#x2F;&#x2F;默认值0<br><br>&#x2F;&#x2F;2,遍历数组,把默认值改为1-10<br>for(int i &#x3D; 0 ; i &lt;&#x3D; b.length-1 ; i++) &#123;<br>b[i] &#x3D; i+1 ; &#x2F;&#x2F;修改每个元素的默认值,改成0-10 <br>&#125;<br><br>&#x2F;&#x2F;3,查看数组里的元素<br>for(int i &#x3D; 0 ; i &lt;&#x3D; b.length-1 ; i++) &#123;<br>System.out.println(b[i]);&#x2F;&#x2F;根据下标i获取元素<br>&#125;<br><br>&#x2F;&#x2F;TODO 创建数组,并存入随机<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-方法&quot;&gt;&lt;a href=&quot;#一-方法&quot; class=&quot;headerlink&quot; title=&quot;一,方法&quot;&gt;&lt;/a&gt;一,方法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java课程第四天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/18/day04/"/>
    <id>https://blog.fate-seeker.com/2020/06/18/day04/</id>
    <published>2020-06-18T02:16:17.000Z</published>
    <updated>2020-06-22T01:55:43.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-嵌套for循环"><a href="#一-嵌套for循环" class="headerlink" title="一,嵌套for循环"></a>一,嵌套for循环</h2><a id="more"></a><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">for(开始位置;判断条件;更改条件)&#123;&#x2F;&#x2F;外循环<br>循环体<br>for(开始位置;判断条件;更改条件)&#123;&#x2F;&#x2F;内循环<br>循环体<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--2,特点    --外循环执行1次，内循环执行多次    --外循环控制行，内循环控制列--3,入门案例</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br><br>&#x2F;&#x2F;测试嵌套for<br>public class Test1_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1, 总结:外循环执行1次，内循环执行多次<br>&#x2F;&#x2F; 当i&#x3D;1时,输出外循环i的值1,输出内循环j的所有值1 2 3 4 5<br>&#x2F;&#x2F; 当i&#x3D;2时,输出外循环i的值2,输出内循环j的所有值1 2 3 4 5<br>&#x2F;&#x2F; 当i&#x3D;3时,输出外循环i的值3,输出内循环j的所有值1 2 3 4 5<br>for(int i &#x3D; 1 ; i &lt;&#x3D; 3 ; i++ ) &#123;&#x2F;&#x2F; 外循环,执行3次<br>System.out.println(i);<br><br>for(int j &#x3D; 1 ; j &lt;&#x3D; 5; j++) &#123;&#x2F;&#x2F; 内循环,执行5次<br>System.out.println(j);<br>&#125;<br><br>&#125;<br><br>&#x2F;&#x2F;2, 外循环控制行，内循环控制列<br>&#x2F;&#x2F;第一轮i&#x3D;1时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第二轮i&#x3D;2时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第三轮i&#x3D;3时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第四轮i&#x3D;4时,内循环:同一行展示*****,回车换行<br>&#x2F;&#x2F;第五轮i&#x3D;5时,内循环:同一行展示*****,回车换行<br>for(int i &#x3D; 1 ; i &lt; 6 ; i++) &#123; &#x2F;&#x2F; 外循环,执行5次<br>for(int j &#x3D; 1 ; j &lt; 6 ; j++) &#123; &#x2F;&#x2F; 内循环,执行5次<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示<br>&#125;<br><br>System.out.println();&#x2F;&#x2F;换行符<br>&#125;<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:打印左直角三角形</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;测试嵌套for<br>public class Test2_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,打印左直角三角形<br>&#x2F;&#x2F;第一轮,i&#x3D;1时,内循环:j&#x3D;1,j&lt;&#x3D;1;此时,满足条件的j有一次,同一行展示*,回车换行<br>&#x2F;&#x2F;第二轮,i&#x3D;2时,内循环:j&#x3D;1,j&lt;&#x3D;2;此时,满足条件的j有两次,同一行展示**,回车换行<br>&#x2F;&#x2F;第三轮,i&#x3D;3时,内循环:j&#x3D;1,j&lt;&#x3D;3;此时,满足条件的j有三次,同一行展示***,回车换行<br>&#x2F;&#x2F;第四轮,i&#x3D;4时,内循环:j&#x3D;1,j&lt;&#x3D;4;此时,满足条件的j有四次,同一行展示****,回车换行<br>&#x2F;&#x2F;第五轮,i&#x3D;5时,内循环:j&#x3D;1,j&lt;&#x3D;5;此时,满足条件的j有五次,同一行展示*****,回车换行<br>for(int i &#x3D; 1; i &lt;&#x3D; 5 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,练习:打印99乘法表</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;测试嵌套for<br>public class Test2_For2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,打印左直角三角形<br>&#x2F;&#x2F;第一轮,i&#x3D;1时,内循环:j&#x3D;1,j&lt;&#x3D;1;此时,满足条件的j有一次,同一行展示*,回车换行<br>&#x2F;&#x2F;第二轮,i&#x3D;2时,内循环:j&#x3D;1,j&lt;&#x3D;2;此时,满足条件的j有两次,同一行展示**,回车换行<br>&#x2F;&#x2F;第三轮,i&#x3D;3时,内循环:j&#x3D;1,j&lt;&#x3D;3;此时,满足条件的j有三次,同一行展示***,回车换行<br>&#x2F;&#x2F;第四轮,i&#x3D;4时,内循环:j&#x3D;1,j&lt;&#x3D;4;此时,满足条件的j有四次,同一行展示****,回车换行<br>&#x2F;&#x2F;第五轮,i&#x3D;5时,内循环:j&#x3D;1,j&lt;&#x3D;5;此时,满足条件的j有五次,同一行展示*****,回车换行<br>for(int i &#x3D; 1; i &lt;&#x3D; 5 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>System.out.print(&quot;*&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br>&#x2F;&#x2F; 打印99乘法表<br>for(int i &#x3D; 1; i &lt;&#x3D; 9 ; i++) &#123;&#x2F;&#x2F;外循环控制行,执行5次,打印5行<br>for(int j &#x3D; 1 ; j &lt;&#x3D; i ; j++) &#123;&#x2F;&#x2F;内循环控制列,但是列数不能写死,要变<br>&#x2F;&#x2F;System.out.print(&quot;5*2&#x3D;10&quot;);&#x2F;&#x2F;同行展示*<br>&#x2F;&#x2F;System.out.print(&quot;行*列&#x3D;积&quot;);&#x2F;&#x2F;同行展示*<br>System.out.print(i+&quot;*&quot;+j+&quot;&#x3D;&quot;+i*j+&quot;&quot;);&#x2F;&#x2F;同行展示*<br>&#125;<br>System.out.println();&#x2F;&#x2F;换行<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-break和continue"><a href="#二-break和continue" class="headerlink" title="二,break和continue"></a>二,break和continue</h2><pre><code>--1,都是用来结束循环    --`break`用来立刻结束    --`continue`用来结束当前这一次循环还能继续--2,练习：找数字88    --需求:接收用户输入的100次数字</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.breakdemo;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试break<br>public class Test3_Break &#123;<br>public static void main(String[] args) &#123;<br><br>for (int i &#x3D; 0; i &lt; 100 ; i++) &#123;<br>&#x2F;&#x2F;用户输入的数字<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;判断<br>if(input &#x3D;&#x3D; 88) &#123;&#x2F;&#x2F;是88<br>System.out.println(&quot;中了&quot;);<br>break;&#x2F;&#x2F;1,结束程序,程序立刻结束<br><br>&#x2F;&#x2F;3,break 和 continue之后就不要再出现代码了,否则都是不可到达的代码<br>&#x2F;&#x2F;System.out.println(123);<br>&#125;else if(input !&#x3D; 88) &#123;&#x2F;&#x2F;不是88<br>continue;&#x2F;&#x2F;2,继续输入,还能有下次循环的机会<br>&#x2F;&#x2F;System.out.println(123);<br>&#125;<br><br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-循环结构-while–先判断后执行"><a href="#三-循环结构-while–先判断后执行" class="headerlink" title="三,循环结构:while–先判断后执行"></a>三,循环结构:<code>while</code>–先判断后执行</h2><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">while(判断条件)&#123;<br>循环体<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--2, 练习：猜数字    --需求:产生一个随机数，和用户一直在输入的数字比较</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.whiledemo;<br><br>import java.util.Random;<br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试 while<br>public class Test4_While &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,让程序产生随机数 -- 产生n以内的随机数,默认从0开始<br>int random &#x3D; new Random().nextInt(100);<br>System.out.println(random);<br><br>&#x2F;&#x2F;for形式的死循环!! -- 必须设置程序的出口!!<br>&#x2F;&#x2F;for(int i &#x3D; 1; i &gt;&#x3D; 1 ; i++) &#123;<br>&#x2F;&#x2F;for(;;) &#123;<br>&#x2F;&#x2F;死循环!!--必须设置程序的出口!!<br>&#x2F;&#x2F;while(true) &#123;&#x2F;&#x2F;条件永远成立,一直接收,根本不停<br>while(random&gt;50) &#123;&#x2F;&#x2F;先判断再执行的循环结构<br>&#x2F;&#x2F;2,让用户一直输入<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;3,一直比较<br>if(input &gt; random) &#123;<br>System.out.println(&quot;大了&quot;);<br>&#125;else if(input &lt; random) &#123;<br>System.out.println(&quot;小了&quot;);<br>&#125;else if(input &#x3D;&#x3D; random) &#123;<br>System.out.println(&quot;中了&quot;);<br>break ;&#x2F;&#x2F;死循环的出口!!<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-循环结构-do…while–先执行后判断"><a href="#四-循环结构-do…while–先执行后判断" class="headerlink" title="四,循环结构:do…while–先执行后判断"></a>四,循环结构:do…while–先执行后判断</h2><pre><code>--1,语法</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">do&#123;<br>循环体<br>&#125;while(判断条件);<br></code></pre></td></tr></table></figure><pre><code>--2,改造猜数字</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.whiledemo;<br><br>import java.util.Random;<br>import java.util.Scanner;<br><br>&#x2F;&#x2F;测试 while<br>public class Test4_While &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,让程序产生随机数 -- 产生n以内的随机数,默认从0开始<br>int random &#x3D; new Random().nextInt(100);<br>System.out.println(random);<br><br>&#x2F;&#x2F;for形式的死循环!! -- 必须设置程序的出口!!<br>&#x2F;&#x2F;for(int i &#x3D; 1; i &gt;&#x3D; 1 ; i++) &#123;<br>&#x2F;&#x2F;for(;;) &#123;<br>&#x2F;&#x2F;死循环!!--必须设置程序的出口!!<br>&#x2F;&#x2F;while(true) &#123;&#x2F;&#x2F;条件永远成立,一直接收,根本不停<br>do &#123;&#x2F;&#x2F;先判断再执行的循环结构<br>&#x2F;&#x2F;2,让用户一直输入<br>int input &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;3,一直比较<br>if(input &gt; random) &#123;<br>System.out.println(&quot;大了&quot;);<br>&#125;else if(input &lt; random) &#123;<br>System.out.println(&quot;小了&quot;);<br>&#125;else if(input &#x3D;&#x3D; random) &#123;<br>System.out.println(&quot;中了&quot;);<br>break ;&#x2F;&#x2F;死循环的出口!!<br>&#125;<br>&#125;while(random&gt;50);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-总结三种循环的异同-–可以互相替换"><a href="#五-总结三种循环的异同-–可以互相替换" class="headerlink" title="五,总结三种循环的异同:–可以互相替换"></a>五,总结三种循环的异同:–可以互相替换</h2><pre><code>--相同点:都是为了解决程序中,需要重复的做相同的事情的需求--不同点:    --`for`:知道循环的开始位置,知道循环的次数        `for`(开始位置;循环条件;更条件){循环体}    --`while`:可以不知道开始位置,可以不知道数据的规律        `while(循环条件){循环体}`    --`do...while`:可以不知道开始位置,可以不知道数据的规律                 可以保证循环体最少执行1次.        `do...while(循环条件){循环体}`</code></pre><h2 id="六-练习"><a href="#六-练习" class="headerlink" title="六,练习:"></a>六,练习:</h2><pre><code>--求【0,100】中，奇数的个数--求【0,100】中，偶数的和--代码</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br><br>&#x2F;&#x2F;测试for循环练习<br>public class Test5 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;--求【1,100】中，偶数的和<br>int sum &#x3D; 0 ;&#x2F;&#x2F;定义变量,用来存和<br>for (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;<br>&#x2F;&#x2F;判断,i是偶数吗<br>if(i % 2 &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;偶数<br>sum &#x3D; sum + i ;&#x2F;&#x2F;修改sum的值<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的偶数和是:&quot;+sum);<br><br>&#x2F;&#x2F;--求【1,100】中，奇数的个数<br>int count &#x3D; 0 ;&#x2F;&#x2F;定义变量,用来存个数<br>for (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;<br>&#x2F;&#x2F;判断,i是奇数吗<br>if(i % 2 &#x3D;&#x3D; 1) &#123;&#x2F;&#x2F;奇数<br>count++;&#x2F;&#x2F;统计每个奇数的个数<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的奇数个数是:&quot;+count);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七-变量"><a href="#七-变量" class="headerlink" title="七,变量:"></a>七,变量:</h2><pre><code>--1,变量的使用原则：就近原则。--2,变量出现的位置不同,名字和作用都不同.    出现在成员位置(类里方法外)的变量叫成员变量.    出现在局部位置(方法里)的变量叫局部变量.--3,局部变量:在方法里+必须手动初始化+作用范围就是在方法里+方    法运行完毕局部变量将释放内存--4,成员变量:在类里方法外+有默认值不用手动初始化+作用范围就是整个类    里+类消失成员变量才释放内存--5,测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.variable;<br><br>import org.junit.Test;<br><br>&#x2F;&#x2F;测试 变量的使用<br>public class Test6_Variable &#123;<br>&#x2F;&#x2F;TODO 测试其他类型 的默认值<br><br>&#x2F;&#x2F;2,成员变量:位置是在类里方法外  +  有默认值 + 作用范围是整个类里<br>double count ;<br><br>&#x2F;&#x2F;3,就近原则---前提是---当成员变量 和 局部变量同名时,你使用的一定是局部变量<br>int sum &#x3D; 20 ;<br><br>&#x2F;&#x2F;单元测试junit :要求方法要有标志@Test + 方法必须是public的 + 方法返回值是void<br>@Test<br>public void show() &#123;<br>&#x2F;&#x2F;1,局部变量:位置是在方法里 + 必须初始化  + 作用范围是方法里<br>int sum &#x3D; 10;<br>System.out.println(sum);&#x2F;&#x2F;10,就近原则<br>System.out.println(count);&#x2F;&#x2F;0.0<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-嵌套for循环&quot;&gt;&lt;a href=&quot;#一-嵌套for循环&quot; class=&quot;headerlink&quot; title=&quot;一,嵌套for循环&quot;&gt;&lt;/a&gt;一,嵌套for循环&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java课程第三天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/18/day03/"/>
    <id>https://blog.fate-seeker.com/2020/06/18/day03/</id>
    <published>2020-06-17T16:26:17.000Z</published>
    <updated>2020-06-22T02:00:30.617Z</updated>
    
    <content type="html"><![CDATA[<p>一,运算符</p><a id="more"></a><pre><code>--1,算数运算符: +-*/ ++ -- %(模)--2,比较运算符(结果是boolean类型):== != --3,逻辑运算符(结果是boolean类型):+ !(取反) &amp; |--4,三元运算符: 1 ? 2 : 3        --结果是2或者是3,到底是2还是3要看1的结果了,1如果描述的成立,结果是2.1如果描述不成立,结果是3.--5,赋值运算符: = += -= *= /=--6,逻辑运算符 &amp; |     --逻辑&amp;:表示并且关系        1 &amp; 2 :如果最终运算的结果,想要是true,要求1和2,必须都是true    --短路与/双与&amp;&amp;:表示并且关系 -- 高效        1 &amp;&amp; 2 :            2的位置可能会发生短路,当1的位置判断完得到false时,结果就已经注定了是false,此时2可以不参与运算(发生短路).可以提高效率.    --逻辑|:表示或者关系        1 | 2 :如果最终运算的结果,想要是true,要求1和2中,有一个true就行    --短路或/双或||:表示或者关系  -- 高效            1 || 2 :            2的位置可能会发生短路,当1的位置判断完得到true时,结果早都注定了是true,此时2可以不参与运算(发生短路).用来提高效率.--7,练习：自增自减</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 自增++   自减--<br>public class Test1_ZIzeng &#123;<br>public static void main(String[] args) &#123;<br>int a &#x3D; 1;<br>&#x2F;&#x2F;符号在后,先使用再变化<br>System.out.println(a++);&#x2F;&#x2F;1<br><br>int b &#x3D; 1;<br>&#x2F;&#x2F;符号在前,先变化再使用<br>System.out.println(++b);&#x2F;&#x2F;2<br><br>System.out.println(++b+b+a++);&#x2F;&#x2F;3+3+2&#x3D;8<br><br>int c &#x3D; 1;<br>&#x2F;&#x2F;符号在后,先使用再变化<br>System.out.println(c--);&#x2F;&#x2F;1<br><br>int d &#x3D; 1;<br>&#x2F;&#x2F;符号在前,先变化再使用<br>System.out.println(--d);&#x2F;&#x2F;0<br><br>System.out.println(--c-c-d--);&#x2F;&#x2F;-1-(-1)-0&#x3D;0<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--8,练习：求两个数里的大值    </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试 三元运算符<br>public class Test2_MaxValue &#123;<br>public static void main(String[] args) &#123;<br>int a &#x3D; new Scanner(System.in).nextInt();<br>int b &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F; 两个数里的大值:max记录的值可能是a也可能是b,到底是a还是b呢?--要看a&gt;b判断成立不<br>int max &#x3D; a &gt; b ? a : b;<br>System.out.println(&quot;a b里的大值是:&quot; + max);<br><br>&#x2F;&#x2F; 三个数里的大值:<br>int c &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F;res记录着max和c里的大值<br>int res &#x3D; max  &gt; c ? max : c ;<br>System.out.println(&quot;a b c里的大值是:&quot;+res);<br><br>&#x2F;&#x2F;TODO 优化:一步到位<br>&#x2F;&#x2F;int res &#x3D; a &gt; b ? 2 : 3 ;<br>&#x2F;&#x2F;int res &#x3D; a &gt; b ? a大 : b大 ;<br>int res &#x3D; a &gt; b ? ( a &gt; c ? a : c ) : ( b &gt; c ? b : c ) ;<br>System.out.println(&quot;a b c里的大值是:&quot;+res);<br><br><br>&#125;<br><br>&#125;<br><br><br>--9,练习：平年闰年<br>--需求:1、能被4整除，并且不能被100整除<br>2、或者能被400整除<br><br>package cn.tedu.basic;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 平年闰年<br>public class Test3_Runnian &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收键盘输入的年号<br>int year &#x3D; new Scanner(System.in).nextInt();<br><br>String desc &#x3D; &quot;平年&quot;;&#x2F;&#x2F;设置默认值<br>&#x2F;&#x2F;2,判断   : if(判断条件)&#123;满足条件的代码&#125;<br>&#x2F;&#x2F;条件1、能被4整除，并且不能被100整除    ||    条件2、能被400整除<br>&#x2F;&#x2F;能被4整除    &amp;&amp;    不能被100整除    ||   能被400整除<br>&#x2F;&#x2F;if(判断条件)&#123;满足条件的代码&#125;<br>&#x2F;&#x2F;if(能被4整除    &amp;&amp;  不能被100整除    ||  能被400整除)&#123;满足条件的代码&#125;<br>if( year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0 || year % 400 &#x3D;&#x3D; 0 )&#123;<br>desc &#x3D; &quot;闰年&quot;;&#x2F;&#x2F;修改desc的值是闰年<br>&#125;<br><br>&#x2F;&#x2F;System.out.println(&quot;2020年是闰年&quot;);<br>System.out.println(year+&quot;年是&quot;+desc);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>二,!!!分支结构：if<br>    –1,概述<br>        分支结构是相对于顺序结构而言的.顺序结构只能一行一行顺序的从上往下执行.但是无法完成先判断再执行的需求.<br>    –2,语法<br>        单分支:<br>        if(判断条件){<br>            满足了条件代码<br>        }<br>        多分支:<br>        if(判断条件){<br>            满足了条件代码<br>        }else{<br>            不满足了条件代码<br>        }<br>        嵌套分支:<br>        if(判断条件1){<br>            满足了条件代码1<br>        }else if(判断条件2){<br>            满足了条件代码2<br>        }else if(判断条件3){<br>            满足了条件代码3<br>        }else{<br>            上面的谁都不满足才要执行的代码4<br>        }<br>    –3,练习:商品打折<br>        –版本1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test4_IF &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收用户输入的原价<br>double price &#x3D; new Scanner(System.in).nextDouble();<br><br>double discount &#x3D; price;&#x2F;&#x2F;定义变量,记录折后价<br>&#x2F;&#x2F;2,开始计算折后价,并输出<br>if(price &gt;&#x3D; 5000) &#123;&#x2F;&#x2F;满5000打5折<br>discount &#x3D; price * 0.5 ;<br>&#125;else if(price &gt;&#x3D; 2000) &#123;&#x2F;&#x2F;满2000打8折<br>discount &#x3D; price * 0.8 ;<br>&#125;else if(price &gt;&#x3D; 1000) &#123;&#x2F;&#x2F;满1000打9折<br>discount &#x3D; price * 0.9 ;<br>&#125;<br>&#x2F;&#x2F;3,输出<br>System.out.println(&quot;原价是:&quot;+price+&quot;,折后价是:&quot;+discount);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--版本2:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test4_IF &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,接收用户输入的原价<br>double price &#x3D; new Scanner(System.in).nextDouble();<br><br>&#x2F;&#x2F;double discount &#x3D; price;&#x2F;&#x2F;定义变量,记录折后价<br><br>&#x2F;&#x2F;2,开始计算折后价,并输出<br>if(price &gt;&#x3D; 5000) &#123;&#x2F;&#x2F;满5000打5折<br>&#x2F;&#x2F;price &#x3D; price * 0.5 ;<br><br>price *&#x3D; 0.5 ;&#x2F;&#x2F;等效于:price&#x3D;price*0.5;相当于是一种简写形式.<br><br>&#125;else if(price &gt;&#x3D; 2000) &#123;&#x2F;&#x2F;满2000打8折<br>&#x2F;&#x2F;price &#x3D; price * 0.8 ;<br>price *&#x3D; 0.8 ;<br>&#125;else if(price &gt;&#x3D; 1000) &#123;&#x2F;&#x2F;满1000打9折<br>&#x2F;&#x2F;price &#x3D; price * 0.9 ;<br>price *&#x3D; 0.9 ;<br>&#125;<br>&#x2F;&#x2F;3,输出<br>&#x2F;&#x2F;System.out.println(&quot;原价是:&quot;+price+&quot;,折后价是:&quot;+discount);<br>System.out.println(&quot;折后价是:&quot;+price);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:统计学员得分</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试 if<br>public class Test5_If2 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F; 1,接收用户输入的分数<br>int score &#x3D; new Scanner(System.in).nextInt();<br><br>&#x2F;&#x2F; 为了增强程序的健壮性.设置上限100和下限0<br>if (score &gt; 100 || score &lt; 0) &#123;<br>System.out.println(&quot;请您输入有效的分数!&quot;);<br>return;&#x2F;&#x2F; 结束程序<br>&#125;<br>&#x2F;&#x2F; 2,判断<br>if (score &gt;&#x3D; 90) &#123;&#x2F;&#x2F; 90分以上 优秀<br>System.out.println(&quot;优秀&quot;);<br>&#125; else if (score &gt;&#x3D; 80 &amp;&amp; score &lt;&#x3D; 89) &#123;&#x2F;&#x2F; 80~89 良好<br>System.out.println(&quot;良好&quot;);<br>&#125; else if (score &gt;&#x3D; 70 &amp;&amp; score &lt;&#x3D; 79) &#123;&#x2F;&#x2F; 70~79 中等<br>System.out.println(&quot;中等&quot;);<br>&#125; else if (score &gt;&#x3D; 60 &amp;&amp; score &lt;&#x3D; 69) &#123;&#x2F;&#x2F; 60~69 及格<br>System.out.println(&quot;及格&quot;);<br>&#125; else if (score &lt; 60) &#123;&#x2F;&#x2F; 60分以下 不及格<br>System.out.println(&quot;不及格&quot;);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>三,分支结构：switch<br>    –1,概述<br>        也可以完成先判断再执行的需求.<br>    –2,语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">switch(判断条件)&#123;<br>case 0 : syso(0) ;break;<br>case 1 : syso(1) ;<br>case &#39;x&#39; : syso(2) ;<br>case &quot;java&quot; : syso(3) ; <br><br>default:syso(100) ;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.ifdemo;<br>&#x2F;&#x2F;这个类用来测试  switch<br>public class Test6_Switch &#123;<br>public static void main(String[] args) &#123;<br><br>int sum  &#x3D; 2 ;<br>&#x2F;&#x2F;1,判断条件:可以转化为int类型的表达式.<br>&#x2F;&#x2F;可以是byte short char int类型.jdk7以后,支持String类型.<br>switch(sum) &#123;<br>case 1 : System.out.println(1);<br>&#x2F;&#x2F;2,自从成功匹配了case后,会继续向后穿透所有case包括default<br>case 2 : System.out.println(2);break ;&#x2F;&#x2F;3,立刻结束<br>case &#39;2&#39; : System.out.println(&#39;2&#39;);break ;<br>case &#39;x&#39; : System.out.println(&#39;x&#39;);break ;<br>case 100 : System.out.println(100);break ;<br><br>default :System.out.println(666);<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>四,循环结构：<code>for</code><br>    –1,概述<br>        是指在程序中,需要重复执行很多次的某些功能.<br>    –2,语法<br>        for(循环的开始位置;循环的判断条件;循环的更改条件){循环体}<br>    –3,练习：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.fordemo;<br>&#x2F;&#x2F;这个类用来测试 for循环<br>public class Test7_For &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;int i &#x3D; 0 循环的开始位置<br>&#x2F;&#x2F;i &lt;&#x3D; 10 循环的判断条件<br>&#x2F;&#x2F;i++ 循环的更改条件,使i不断自增<br>&#x2F;&#x2F;i 就表示每次获取到的数据<br>for(int i &#x3D; 0; i &lt;&#x3D; 10 ; i++ )&#123;&#x2F;&#x2F;练习：打印0到10<br>System.out.println(i);&#x2F;&#x2F;打印当前i的值<br>&#125;<br><br>&#x2F;&#x2F;练习：打印10到0<br>for(int i &#x3D; 10 ; i &gt;&#x3D; 0  ; i-- ) &#123;<br>System.out.println(i);<br>&#125;<br><br>&#x2F;&#x2F;TODO 打印8,88,888,8888<br>&#x2F;&#x2F;TODO 画流程图!!<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>[练习] 求【0,100】中，奇数的个数<br>[练习] 求【0,100】中，偶数的和    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">package com.seeker.exercise;<br><br>import org.junit.Test;<br><br>&#x2F;&#x2F;1-100偶数和<br>public class For &#123;<br>@Test<br>public void Oshuhe() &#123;<br>int sum &#x3D; 0;<br>for (int i &#x3D; 1; i &lt;&#x3D;100; i++) &#123;<br>if (i%2&#x3D;&#x3D;0) &#123;<br>sum+&#x3D;i;<br>&#125;<br>&#125;<br>System.out.println(&quot;1-100的偶数和是&quot; +sum);<br>&#125;<br>&#x2F;&#x2F;1-100奇数个数<br>@Test<br>public void Jshuge() &#123;<br>int i&#x3D;0;<br>for (int j &#x3D; 1; j &lt;&#x3D;100; j++) &#123;<br>if (j%2!&#x3D;0) &#123;<br>++i;<br>&#125;<br>&#125;<br>System.out.println(&quot;100以内的奇数个数为&quot; +i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一,运算符&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java课程第二天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/18/day02/"/>
    <id>https://blog.fate-seeker.com/2020/06/18/day02/</id>
    <published>2020-06-17T16:26:16.000Z</published>
    <updated>2020-06-22T01:55:20.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一,数据类型"></a>一,数据类型</h2><a id="more"></a><pre><code>--1,基本类型 八种    --整数:`byte` `short` `int` `long`    --小数:`float` `double`    --布尔:`boolean`    --字符:`char`  --2,练习:最大值最小值</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>&#x2F;&#x2F;这个类用来测试  取值范围<br>&#x2F;&#x2F;总结:<br>&#x2F;&#x2F;1,变量定义的三要素: 变量类型  变量名 &#x3D; 变量值<br>&#x2F;&#x2F;2,基本类型对应的工具类:<br>&#x2F;&#x2F;基本类型: byte short int     long float double char      boolean<br>&#x2F;&#x2F;工具类:  Byte Short Integer Long  Float Double Character Boolean<br>&#x2F;&#x2F;3,通过点.来调用工具类的功能<br>&#x2F;&#x2F;4,打印变量时,千万不要用双引号<br>public class Test1_Scope &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,整数类型的取值范围 byte short int long<br>&#x2F;&#x2F;创建变量,记录最大值:变量类型  变量名 变量值<br>byte max &#x3D; Byte.MAX_VALUE ;<br>&#x2F;&#x2F;System.out.println(&quot;max&quot;);&#x2F;&#x2F;指定了打印固定的数据--max这个单词!!!<br>System.out.println(max);&#x2F;&#x2F;127,打印max变量的值<br>&#x2F;&#x2F;创建变量,记录最小值<br>byte min &#x3D; Byte.MIN_VALUE ;<br>System.out.println(min);&#x2F;&#x2F;-128,打印min变量的值<br><br>short max2 &#x3D; Short.MAX_VALUE ;<br>short min2 &#x3D; Short.MIN_VALUE ;<br>System.out.println(max2);&#x2F;&#x2F;32767<br>System.out.println(min2);&#x2F;&#x2F;-32768<br><br>&#x2F;&#x2F;int--Integer long--Long  <br>int max3 &#x3D; Integer.MAX_VALUE ;<br>int min3 &#x3D; Integer.MIN_VALUE ;<br>System.out.println(max3);&#x2F;&#x2F;2147483647<br>System.out.println(min3);&#x2F;&#x2F;-2147483648<br><br>long max4 &#x3D; Long.MAX_VALUE ;<br>long min4 &#x3D; Long.MIN_VALUE ;<br>System.out.println(max4);&#x2F;&#x2F;9223372036854775807<br>System.out.println(min4);&#x2F;&#x2F;-9223372036854775808<br><br>&#x2F;&#x2F;float--Float double--Double <br>&#x2F;&#x2F;区别:float是单精度,对小数位运算不精确<br>&#x2F;&#x2F;区别:double是单精度,对小数位运算非常精确<br>float max5 &#x3D; Float.MAX_VALUE ;<br>float min5 &#x3D; Float.MIN_VALUE ;<br>System.out.println(max5);&#x2F;&#x2F;3.4028235E38<br>System.out.println(min5);&#x2F;&#x2F;1.4E-45<br><br>double max6 &#x3D; Double.MAX_VALUE ;<br>double min6 &#x3D; Double.MIN_VALUE ;<br>System.out.println(max6);&#x2F;&#x2F;1.7976931348623157E308<br>System.out.println(min6);&#x2F;&#x2F;4.9E-324<br><br>&#x2F;&#x2F;boolean--Boolean  char--Character<br>boolean b &#x3D; true; <br>boolean b2 &#x3D; false; <br><br>&#x2F;&#x2F;char--字符型 --一个字符<br>char c &#x3D; &#39;a&#39; ;&#x2F;&#x2F;一个字母<br>char c2 &#x3D; &#39;1&#39; ;&#x2F;&#x2F;一个数字<br>char c3 &#x3D; &#39;中&#39; ;&#x2F;&#x2F;char类型能不能存一个中文汉字?  --  可以<br>char c4 &#x3D; 126 ;&#x2F;&#x2F;可以直接存数字<br><br>System.out.println(c);<br>System.out.println(c2);<br>System.out.println(c3);<br>&#x2F;&#x2F;char类型是字符型,允许你直接存入一个数字本身.但是,使用时还是要用字符的.<br>&#x2F;&#x2F;使用时,底层会去查询ascii码表,数字对应的字符是啥,然后用字符本身.<br>&#x2F;&#x2F;ascii码表里,规定了0~127数字对应的字符,char类型的取值范围是0~65535.<br>&#x2F;&#x2F;自从128~65535默认对应的字符是?.<br>System.out.println(c4);&#x2F;&#x2F;~<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--3,练习:输入个人信息</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>&#x2F;&#x2F;这个类用来测试  个人信息<br>public class Test2_Info &#123;<br>public static void main(String[] args) &#123;<br>String name &#x3D; &quot;渣渣辉&quot; ;<br><br>&#x2F;&#x2F;通过 + 拼接字符串<br>&#x2F;&#x2F;System.out.println(&quot;大家好,我叫渣渣辉&quot;);<br>System.out.println(&quot;大家好,我叫&quot;+name);<br><br>&#x2F;&#x2F;System.out.println(&quot;渣渣辉,你好&quot;);<br>System.out.println(name+&quot;,你好&quot;);<br><br>&#x2F;&#x2F;动态拼接字符串  &quot;+??+&quot;<br>&#x2F;&#x2F;System.out.println(&quot;大家好,我叫渣渣辉!&quot;);<br>System.out.println(&quot;大家好,我叫&quot;+name+&quot;!&quot;);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--4,练习:圆形面积</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>import java.util.Scanner;<br>&#x2F;&#x2F;这个类用来测试  圆形面积<br>&#x2F;&#x2F;总结<br>&#x2F;&#x2F;1,修改变量的值,既然被定义成了变量,他的值就可以一直被修改<br>&#x2F;&#x2F;2,变量的值为了写的更加灵活,可以动态接收键盘输入的值<br>&#x2F;&#x2F;3,拿着变量的值,带入公式,运算结果,并交给area&#x2F;zhouchang去保存<br>&#x2F;&#x2F;4,动态拼接字符串,用+完成<br>public class Test3_Area &#123;<br>public static void main(String[] args) &#123;<br>double r &#x3D; 5.5 ;&#x2F;&#x2F;定义变量,记录圆的半径<br><br>&#x2F;&#x2F;动态的接收键盘输入的值<br>r &#x3D; new Scanner(System.in).nextDouble() ;&#x2F;&#x2F;修改变量的值<br><br>double area &#x3D; 3.14 *r *r ;&#x2F;&#x2F;圆形面积:3.14 *r *r<br>System.out.println(&quot;圆的面积是:&quot;+area);&#x2F;&#x2F;打印面积<br><br>&#x2F;&#x2F;TODO 圆的周长<br>double zhouchang &#x3D; 2*3.14*r ;<br>System.out.println(&quot;圆的周长是:&quot;+zhouchang);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--5,练习:变量交换</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br><br>import java.util.Scanner;<br><br>&#x2F;&#x2F;这个类用来测试  变量值交换<br>public class Test4_Exchange &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,创建变量a和b<br>int a &#x3D; new Scanner(System.in).nextInt() ;<br>int b &#x3D; new Scanner(System.in).nextInt() ;<br>&#x2F;&#x2F;System.out.println(&quot;交换前:a&#x3D;1,b&#x3D;2&quot;);<br>System.out.println(&quot;交换前:a&#x3D;&quot;+a+&quot;,b&#x3D;&quot;+b);<br><br>&#x2F;&#x2F;2,交换值<br>int c &#x3D; a ;&#x2F;&#x2F;把a的值交给c保存<br>a &#x3D; b ;&#x2F;&#x2F;把b的值交给a保存<br>b &#x3D; c ; &#x2F;&#x2F;把c的值交给b保存<br><br>&#x2F;&#x2F;TODO 3,打印<br>System.out.println(&quot;交换后:a&#x3D;&quot;+a+&quot;,b&#x3D;&quot;+b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>--6,引用类型--数组/OOP ...</code></pre><h2 id="二-基本类型的字面值（5条）"><a href="#二-基本类型的字面值（5条）" class="headerlink" title="二,基本类型的字面值（5条）"></a>二,基本类型的字面值（5条）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 字面值<br>public class Test5 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;1,java里整数有4种类型,那么,我们写的整数到底字面值是什么类型呢?--int<br>int a &#x3D; 1000 ;<br><br>&#x2F;&#x2F;2,在取值范围内,可以直接赋值<br>byte m &#x3D; 123 ;<br>&#x2F;&#x2F;byte n &#x3D; 128 ;&#x2F;&#x2F;报错,右侧是int类型,左侧的byte类型根本就存不下<br>&#x2F;&#x2F;char o &#x3D; 65536 ;&#x2F;&#x2F;报错,右侧是int类型,左侧的char类型根本就存不下<br><br>&#x2F;&#x2F;3,java里小数有2种类型,那么,我们写的小数到底字面值是什么类型呢?--double<br>double x &#x3D; 9.9 ;<br><br>&#x2F;&#x2F;4,字面值的后缀lfd ,  l-long  f-float  d-double  <br>&#x2F;&#x2F;报错,因为有右侧字面值是int类型,但是,超出了int范围!!--加后缀L变成long类型<br>long b &#x3D; 10000000000L;<br>&#x2F;&#x2F;报错,右侧是double类型8字节,左侧是float类型4字节,存不下!!--加后缀f变成float类型<br>float y &#x3D; 9.9f ;<br>double z &#x3D; 3d;&#x2F;&#x2F;右侧就从字面值int类型转成了double类型<br>System.out.println(z);&#x2F;&#x2F;3.0<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-基本类型的类型转换"><a href="#三-基本类型的类型转换" class="headerlink" title="三,基本类型的类型转换"></a>三,基本类型的类型转换</h2><pre><code>--1,从小到大:拿着小类型给大类型赋值--隐式转换--2,从大到小:拿着大类型给小类型赋值--显式转换--3,测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">package cn.tedu.basic;<br>&#x2F;&#x2F;这个类用来测试 转换<br>public class Test6 &#123;<br>public static void main(String[] args) &#123;<br>&#x2F;&#x2F;从小到大(隐式转换) byte小类型 -- long大类型<br>byte a &#x3D; 10 ;<br>&#x2F;&#x2F;拿着右侧的小类型a,给左侧的大类型b去赋值 --可以直接赋值!!<br>long b &#x3D; a ;<br><br>&#x2F;&#x2F;从大到小(显式转换) double-int<br>double m &#x3D; 10;<br>&#x2F;&#x2F;拿着右侧的大类型m,给左侧的小类型n去赋值--不可以!!需要强转<br>int n &#x3D; (int) m ;<br><br>&#x2F;&#x2F;练习:小转大long-float<br>long x &#x3D; 10 ;<br>float y &#x3D; x ;&#x2F;&#x2F;隐式转换<br><br>&#x2F;&#x2F;大转小:double-float<br>double o &#x3D; 9 ;<br>float p &#x3D; (float)o ;&#x2F;&#x2F;显示转换<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-运算规则（5条）"><a href="#四-运算规则（5条）" class="headerlink" title="四,运算规则（5条）"></a>四,运算规则（5条）</h2><pre><code>package cn.tedu.basic;//这个类用来测试 运算规则public class Test7 {    public static void main(String[] args) {        //1,计算结果的数据类型，与最大类型一致        System.out.println(3/2); //1 , int/int-&gt;int        System.out.println(3d/2); //1.5 , double/int -&gt; double        System.out.println(3.14*10);//31.4 , double*int -&gt; double        //2,byte,short,char三种比int小的整数，运算时会先自动转换成int        byte a = 1;        byte b = 2;        //右侧拿着两个byte类型的值,做运算时,会变成大类型int类型--需要强转        byte c = (byte) (a*b);        //3,整数运算溢出  -- 因为在运算时已经超出了int的范围!!--需要加后缀L扩大范围        //光速运行一年的运行是多少米?--3亿m/s        System.out.println( 300000000L * 60 * 60 * 24 * 365   );        //4,浮点数的特殊值--由于小数运算中,出现了不应该出现的现象:分子或者分母为0了!!        System.out.println( 3.14/0 );//Infinity         System.out.println( 0/0.0  );//NaN    }}</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-数据类型&quot;&gt;&lt;a href=&quot;#一-数据类型&quot; class=&quot;headerlink&quot; title=&quot;一,数据类型&quot;&gt;&lt;/a&gt;一,数据类型&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java课程第一天笔记</title>
    <link href="https://blog.fate-seeker.com/2020/06/17/day01/"/>
    <id>https://blog.fate-seeker.com/2020/06/17/day01/</id>
    <published>2020-06-17T15:29:01.000Z</published>
    <updated>2020-06-22T02:00:03.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识JAVA，常用开发工具"><a href="#认识JAVA，常用开发工具" class="headerlink" title="认识JAVA，常用开发工具"></a>认识JAVA，常用开发工具</h2><a id="more"></a><p>  &lt;java从入门到精通&gt; &lt;java核心技术卷I II&gt;</p><p>一,学习资料的下载<br>    –网址:<a href="http://code.tarena.com.cn" target="_blank" rel="noopener">http://code.tarena.com.cn</a><br>    –用户名:tarenacode<br>    –密码:code_2017<br>二,jdk<br>    –1,java开发的核心就是jdk.jdk是简称,全称是,java开发工具包<br>    –2,需要下载 安装  配置 和检验<br>    –3,检验jdk是否成功?<br>        – 运行dos命令: java -version<br>        – C:\Users\Administrator&gt;java -version<br>           java version “1.8.0_45”<br>三,eclipse<br>    –1,用来做java开发的工具.工具有很多,比如:Myeclipse是收费的,    IDEA有收费版和免费体验版.<br>    –2,需要自己指定workspace,来保存你的代码.<br>    –3,使用eclipse开发,对于目录的要求非常严格<br>    –4,把代码放入相应的目录.工程/项目 – 包 – 类<br>四,使用eclipse<br>    –1,创建工程<br>        -右键-new-project-java project-next-输入工程名称-finish<br>    –2,创建包<br>        -选中src-右键-new-package-输入包名-finish<br>    –3,创建类<br>        -选中包-右键-new-class-输入类名-finish<br>    –4,说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;单行注释<br>&#x2F;* 多行注释 *&#x2F;<br><br>&#x2F;*<br> * 用来定义一个包<br> * package --是关键字 ,专门定义包<br> * cn.tedu.hello  --包名 ,  全小写+公司域名倒着写<br> * ; --Java语句结束符 <br> *&#x2F;<br>package cn.tedu.hello;<br>&#x2F;*<br> * 定义类<br> * public --是java的关键字,专门用来描述类的访问权限<br> * class  --是java的关键字,专门用来定义类<br> * HelloWorld  --类名,符合驼峰命名法<br> * &#123; java代码    &#125;<br> *&#x2F;<br>public class HelloWorld &#123;<br>&#x2F;*<br> *   定义主函数&#x2F;主方法&#x2F;main方法....用来作为程序的入口<br> * public --是java的关键字, 用来描述主方法的 访问权限<br> * static --是java的关键字,用来描述主方法是静态的<br> * void --是java的关键字,用来描述主方法是 没有返回值的<br> * main --是方法名<br> * ()  -- 看做是方法的标志<br> * String[] args -- 方法的参数<br> * &#123;  java代码  &#x2F;  方法体      &#125;<br> *&#x2F;<br>public static void main(String[] args) &#123;<br>&#x2F;*<br> * 指定输出的数据( syso + alt + &#x2F; )<br> * System -- 是让程序发出一个系统指令<br> * .   -- 调用系统的功能<br> * out    --向外输出的动作<br> * println --打印后换行<br> * ()  -- 方法的标志<br> * &quot;hello java123~&quot;  -- 方法的参数<br> * ;  --java语句的结束符<br> *&#x2F;<br>System.out.println(&quot;hello java123~&quot;);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;认识JAVA，常用开发工具&quot;&gt;&lt;a href=&quot;#认识JAVA，常用开发工具&quot; class=&quot;headerlink&quot; title=&quot;认识JAVA，常用开发工具&quot;&gt;&lt;/a&gt;认识JAVA，常用开发工具&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.fate-seeker.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.fate-seeker.com/2020/06/17/hello-world/"/>
    <id>https://blog.fate-seeker.com/2020/06/17/hello-world/</id>
    <published>2020-06-17T13:39:08.835Z</published>
    <updated>2020-06-17T13:39:08.835Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
